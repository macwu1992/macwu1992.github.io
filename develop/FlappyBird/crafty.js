/**
 * craftyjs 0.7.1
 * http://craftyjs.com/
 *
 * Copyright 2016, Louis Stowasser
 * Dual licensed under the MIT or GPL licenses.
 */


(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==&quot;function&quot;&amp;&amp;require;if(!u&amp;&amp;a)return a(o,!0);if(i)return i(o,!0);var f=new Error(&quot;Cannot find module &apos;&quot;+o+&quot;&apos;&quot;);throw f.code=&quot;MODULE_NOT_FOUND&quot;,f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==&quot;function&quot;&amp;&amp;require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){="" shim="" for="" using="" process="" in="" browser="" var="" =="" {};="" queue="[];" draining="false;" currentqueue;="" queueindex="-1;" function="" cleanupnexttick()="" {="" if="" (currentqueue.length)="" }="" else="" (queue.length)="" drainqueue();="" drainqueue()="" (draining)="" return;="" timeout="setTimeout(cleanUpNextTick);" len="queue.length;" while(len)="" currentqueue="queue;" while="" (++queueindex="" <="" len)="" (currentqueue)="" currentqueue[queueindex].run();="" cleartimeout(timeout);="" process.nexttick="function" (fun)="" args="new" array(arguments.length="" -="" 1);="" (arguments.length=""> 1) {
        for (var i = 1; i &lt; arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 &amp;&amp; !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = &apos;browser&apos;;
process.browser = true;
process.env = {};
process.argv = [];
process.version = &apos;&apos;; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error(&apos;process.binding is not supported&apos;);
};

process.cwd = function () { return &apos;/&apos; };
process.chdir = function (dir) {
    throw new Error(&apos;process.chdir is not supported&apos;);
};
process.umask = function() { return 0; };

},{}],2:[function(require,module,exports){
var Crafty = require(&apos;../core/core.js&apos;);

/**@
 * #Draggable
 * @category Controls
 * Enable drag and drop of the entity. Listens to events from `MouseDrag` and moves entity accordingly.
 *
 * @see MouseDrag
 */
Crafty.c(&quot;Draggable&quot;, {
    _origX: null,
    _origY: null,
    _oldX: null,
    _oldY: null,
    _dir: null,

    init: function () {
        this.requires(&quot;MouseDrag&quot;);
        this.bind(&quot;StartDrag&quot;, this._startDrag)
            .bind(&quot;Dragging&quot;, this._drag);
    },

    remove: function() {
        this.unbind(&quot;StartDrag&quot;, this._startDrag)
            .unbind(&quot;Dragging&quot;, this._drag);
    },

    /**@
     * #.enableDrag
     * @comp Draggable
     * @sign public this .enableDrag(void)
     *
     * Reenable dragging of entity. Use if `.disableDrag` has been called.
     *
     * @see .disableDrag
     */
    enableDrag: function () {
        this.uniqueBind(&quot;Dragging&quot;, this._drag);
        return this;
    },

    /**@
     * #.disableDrag
     * @comp Draggable
     * @sign public this .disableDrag(void)
     *
     * Disables entity dragging. Reenable with `.enableDrag()`.
     *
     * @see .enableDrag
     */
    disableDrag: function () {
        this.unbind(&quot;Dragging&quot;, this._drag);
        return this;
    },

    /**@
     * #.dragDirection
     * @comp Draggable
     * Method used for modifying the drag direction.
     * If direction is set, the entity being dragged will only move along the specified direction.
     * If direction is not set, the entity being dragged will move along any direction.
     *
     * @sign public this .dragDirection()
     * Remove any previously specified direction.
     *
     * @sign public this .dragDirection(vector)
     * @param vector - Of the form of {x: valx, y: valy}, the vector (valx, valy) denotes the move direction.
     *
     * @sign public this .dragDirection(degree)
     * @param degree - A number, the degree (clockwise) of the move direction with respect to the x axis.
     *
     * Specify the dragging direction.
     *
     * @example
     * <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* <span class="keyword">this</span>.dragDirection()</span><br><span class="line">* <span class="keyword">this</span>.dragDirection({x:<span class="number">1</span>, y:<span class="number">0</span>}) <span class="comment">//Horizontal</span></span><br><span class="line">* <span class="keyword">this</span>.dragDirection({x:<span class="number">0</span>, y:<span class="number">1</span>}) <span class="comment">//Vertical</span></span><br><span class="line">* <span class="comment">// <span class="doctag">Note:</span> because of the orientation of x and y axis,</span></span><br><span class="line">* <span class="comment">// this is 45 degree clockwise with respect to the x axis.</span></span><br><span class="line">* <span class="keyword">this</span>.dragDirection({x:<span class="number">1</span>, y:<span class="number">1</span>}) <span class="comment">//45 degree.</span></span><br><span class="line">* <span class="keyword">this</span>.dragDirection(<span class="number">60</span>) <span class="comment">//60 degree.</span></span><br><span class="line">*</span><br></pre></td></tr></table></figure>

     */
    dragDirection: function (dir) {
        if (typeof dir === &apos;undefined&apos;) {
            this._dir = null;
        } else if ((&quot;&quot; + parseInt(dir, 10)) == dir) { //dir is a number
            this._dir = {
                x: Math.cos(dir / 180 * Math.PI),
                y: Math.sin(dir / 180 * Math.PI)
            };
        } else {
            if (dir.x === 0 &amp;&amp; dir.y === 0) {
                this._dir = { x: 0, y: 0 };
            } else {
                var r = Math.sqrt(dir.x * dir.x + dir.y * dir.y);
                this._dir = {
                    x: dir.x / r,
                    y: dir.y / r
                };
            }
        }
        return this;
    },

    _startDrag: function (e) {
        this._origX = e.realX;
        this._origY = e.realY;
        this._oldX = this._x;
        this._oldY = this._y;
    },

    _drag: function(e) {
        if (this._dir) {
            if (this._dir.x !== 0 || this._dir.y !== 0) {
                var len = (e.realX - this._origX) * this._dir.x + (e.realY - this._origY) * this._dir.y;
                this.x = this._oldX + len * this._dir.x;
                this.y = this._oldY + len * this._dir.y;
            }
        } else {
            this.x = this._oldX + (e.realX - this._origX);
            this.y = this._oldY + (e.realY - this._origY);
        }
    }
});

/**@
 * #Multiway
 * @category Controls
 * @trigger NewDirection - When entity has changed direction due to velocity on either x or y axis a NewDirection event is triggered. The event is triggered once, if direction is different from last frame. - { x: -1 | 0 | 1, y: -1 | 0 | 1 } - New direction
 * @trigger Moved - When entity has moved due to velocity/acceleration on either x or y axis a Moved event is triggered. If the entity has moved on both axes for diagonal movement the event is triggered twice. - { axis: &apos;x&apos; | &apos;y&apos;, oldValue: Number } - Old position
 *
 * Used to bind keys to directions and have the entity move accordingly.
 *
 * @see Motion, Keyboard
 */
Crafty.c(&quot;Multiway&quot;, {
    _speed: null,
    
    init: function () {
        this.requires(&quot;Motion, Keyboard&quot;);

        this._keyDirection = {}; // keyCode -&gt; direction
        this._activeDirections = {}; // direction -&gt; # of keys pressed for that direction
        this._directionSpeed = {}; // direction -&gt; {x: x_speed, y: y_speed}
        this._speed = { x: 150, y: 150 };

        this.bind(&quot;KeyDown&quot;, this._keydown)
            .bind(&quot;KeyUp&quot;, this._keyup);
    },

    remove: function() {
        this.unbind(&quot;KeyDown&quot;, this._keydown)
            .unbind(&quot;KeyUp&quot;, this._keyup);

        // unapply movement of pressed keys
        this.__unapplyActiveDirections();
    },

    _keydown: function (e) {
        var direction = this._keyDirection[e.key];
        if (direction !== undefined) { // if this is a key we are interested in
            if (this._activeDirections[direction] === 0 &amp;&amp; !this.disableControls) { // if key is first one pressed for this direction
                this.vx += this._directionSpeed[direction].x;
                this.vy += this._directionSpeed[direction].y;
            }
            this._activeDirections[direction]++;
        }
    },

    _keyup: function (e) {
        var direction = this._keyDirection[e.key];
        if (direction !== undefined) { // if this is a key we are interested in
            this._activeDirections[direction]--;
            if (this._activeDirections[direction] === 0 &amp;&amp; !this.disableControls) { // if key is last one unpressed for this direction
                this.vx -= this._directionSpeed[direction].x;
                this.vy -= this._directionSpeed[direction].y;
            }
        }
    },


    /**@
     * #.multiway
     * @comp Multiway
     * @sign public this .multiway([Number speed,] Object keyBindings)
     * @param speed - A speed in pixels per second
     * @param keyBindings - What keys should make the entity go in which direction. Direction is specified in degrees
     *
     * Constructor to initialize the speed and keyBindings. Component will listen to key events and move the entity appropriately.
     * Can be called while a key is pressed to change direction &amp; speed on the fly.
     *
     * Multiway acts by adding a velocity on key press and removing the same velocity when the respective key is released.
     * This works well in most cases, but can cause undesired behavior if you manipulate velocities by yourself while this component is in effect.
     * If you need to resolve collisions, it&apos;s advised to correct the position directly rather than to manipulate the velocity. If you still need to reset the velocity once a collision happens, make sure to re-add the previous velocity once the collision is resolved.
     *
     * @example
     * <figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* <span class="tag">this</span><span class="class">.multiway</span>(<span class="number">150</span>, {<span class="attribute">UP_ARROW</span>: -<span class="number">90</span>, <span class="attribute">DOWN_ARROW</span>: <span class="number">90</span>, <span class="attribute">RIGHT_ARROW</span>: <span class="number">0</span>, <span class="attribute">LEFT_ARROW</span>: <span class="number">180</span>});</span><br><span class="line">* <span class="tag">this</span><span class="class">.multiway</span>({<span class="tag">x</span><span class="pseudo">:150</span>,<span class="tag">y</span><span class="pseudo">:75</span>}, {<span class="attribute">UP_ARROW</span>: -<span class="number">90</span>, <span class="attribute">DOWN_ARROW</span>: <span class="number">90</span>, <span class="attribute">RIGHT_ARROW</span>: <span class="number">0</span>, <span class="attribute">LEFT_ARROW</span>: <span class="number">180</span>});</span><br><span class="line">* <span class="tag">this</span><span class="class">.multiway</span>({<span class="attribute">W</span>: -<span class="number">90</span>, <span class="attribute">S</span>: <span class="number">90</span>, <span class="attribute">D</span>: <span class="number">0</span>, <span class="attribute">A</span>: <span class="number">180</span>});</span><br><span class="line">*</span><br></pre></td></tr></table></figure>

     *
     * @see Motion, Keyboard
     */
    multiway: function (speed, keys) {
        if (keys) {
            if (speed.x !== undefined &amp;&amp; speed.y !== undefined) {
                this._speed.x = speed.x;
                this._speed.y = speed.y;
            } else {
                this._speed.x = speed;
                this._speed.y = speed;
            }
        } else {
            keys = speed;
        }


        if (!this.disableControls) {
            this.__unapplyActiveDirections();
        }

        this._updateKeys(keys);
        this._updateSpeed(this._speed);

        if (!this.disableControls) {
            this.__applyActiveDirections();
        }

        return this;
    },

    /**@
     * #.speed
     * @comp Multiway
     * @sign public this .speed(Object speed)
     * @param speed - New speed the entity has, for x and y axis.
     *
     * Change the speed that the entity moves with, in units of pixels per second.
     *
     * Can be called while a key is pressed to change speed on the fly.
     *
     * @example
     * <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* <span class="tag">this</span><span class="class">.speed</span>(<span class="rules">{ <span class="rule"><span class="attribute">x</span>:<span class="value"> <span class="number">150</span>, y: <span class="number">50</span> </span></span></span>});</span><br><span class="line">*</span><br></pre></td></tr></table></figure>

     */
    speed: function (speed) {
        if (!this.disableControls) {
            this.__unapplyActiveDirections();
        }

        this._updateSpeed(speed);

        if (!this.disableControls) {
            this.__applyActiveDirections();
        }

        return this;
    },

    _updateKeys: function(keys) {
        // reset data
        this._keyDirection = {};
        this._activeDirections = {};

        for (var k in keys) {
            var keyCode = Crafty.keys[k] || k;
            // add new data
            var direction = this._keyDirection[keyCode] = keys[k];
            this._activeDirections[direction] = this._activeDirections[direction] || 0;
            if (this.isDown(keyCode)) // add directions of already pressed keys
                this._activeDirections[direction]++;
        }
    },

    _updateSpeed: function(speed) {
        // reset data
        this._directionSpeed = {};

        var direction;
        for (var keyCode in this._keyDirection) {
            direction = this._keyDirection[keyCode];
            // add new data
            this._directionSpeed[direction] = {
                x: Math.round(Math.cos(direction * (Math.PI / 180)) * 1000 * speed.x) / 1000,
                y: Math.round(Math.sin(direction * (Math.PI / 180)) * 1000 * speed.y) / 1000
            };
        }
    },

    __applyActiveDirections: function() {
        for (var direction in this._activeDirections) {
            if (this._activeDirections[direction] &gt; 0) {
                this.vx += this._directionSpeed[direction].x;
                this.vy += this._directionSpeed[direction].y;
            }
        }
    },

    __unapplyActiveDirections: function() {
        for (var direction in this._activeDirections) {
            if (this._activeDirections[direction] &gt; 0) {
                this.vx -= this._directionSpeed[direction].x;
                this.vy -= this._directionSpeed[direction].y;
            }
        }
    },

    /**@
     * #.enableControl
     * @comp Multiway
     * @sign public this .enableControl()
     *
     * Enable the component to listen to key events.
     *
     * @example
     * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span> this.enableControl();</span><br><span class="line"><span class="keyword">*</span></span><br></pre></td></tr></table></figure>

     */
    enableControl: function () {
        if (this.disableControls) {
            this.__applyActiveDirections();
        }
        this.disableControls = false;

        return this;
    },

    /**@
     * #.disableControl
     * @comp Multiway
     * @sign public this .disableControl()
     *
     * Disable the component to listen to key events.
     *
     * @example
     * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span> this.disableControl();</span><br><span class="line"><span class="keyword">*</span></span><br></pre></td></tr></table></figure>

     */
    disableControl: function () {
        if (!this.disableControls) {
            this.__unapplyActiveDirections();
        }
        this.disableControls = true;

        return this;
    }
});


/**@
 * #Jumper
 * @category Controls
 * @trigger NewDirection - When entity has changed direction due to velocity on either x or y axis a NewDirection event is triggered. The event is triggered once, if direction is different from last frame. - { x: -1 | 0 | 1, y: -1 | 0 | 1 } - New direction
 * @trigger Moved - When entity has moved due to velocity/acceleration on either x or y axis a Moved event is triggered. If the entity has moved on both axes for diagonal movement the event is triggered twice. - { axis: &apos;x&apos; | &apos;y&apos;, oldValue: Number } - Old position
 * @trigger CheckJumping - When entity is about to jump. This event is triggered with the object the entity is about to jump from (if it exists). Third parties can respond to this event and enable the entity to jump.
 *
 * Make an entity jump in response to key events.
 *
 * @see Supportable, Motion, Keyboard, Gravity
 */
Crafty.c(&quot;Jumper&quot;, {
    _jumpSpeed: 300,

    /**@
     * #.canJump
     * @comp Jumper
     *
     * The canJump function determines if the entity is allowed to jump or not (e.g. perhaps the entity should be able to double jump).
     * The Jumper component will trigger a &quot;CheckJumping&quot; event.
     * Interested parties can listen to this event and enable the entity to jump by setting `canJump` to true.
     *
     * @example
     * <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">* <span class="keyword">var</span> player = Crafty.e(<span class="string">&quot;2D, Jumper&quot;</span>);</span><br><span class="line">* player.hasDoubleJumpPowerUp = <span class="literal">true</span>; <span class="comment">// allow player to double jump by granting him a powerup</span></span><br><span class="line">* player.bind(<span class="string">&quot;CheckJumping&quot;</span>, <span class="function"><span class="keyword">function</span><span class="params">(ground)</span> </span>{</span><br><span class="line">*     <span class="keyword">if</span> (!ground &amp;&amp; player.hasDoubleJumpPowerUp) { <span class="comment">// allow player to double jump by using up his double jump powerup</span></span><br><span class="line">*         player.canJump = <span class="literal">true</span>;</span><br><span class="line">*         player.hasDoubleJumpPowerUp = <span class="literal">false</span>;</span><br><span class="line">*     }</span><br><span class="line">* });</span><br><span class="line">* player.bind(<span class="string">&quot;LandedOnGround&quot;</span>, <span class="function"><span class="keyword">function</span><span class="params">(ground)</span> </span>{</span><br><span class="line">*     player.hasDoubleJumpPowerUp = <span class="literal">true</span>; <span class="comment">// give player new double jump powerup upon landing</span></span><br><span class="line">* });</span><br><span class="line">*</span><br></pre></td></tr></table></figure>

     */
    canJump: true,

    /**@
     * #.enableControl
     * @comp Jumper
     * @sign public this .enableControl()
     *
     * Enable the component to listen to key events.
     *
     * @example
     * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span> this.enableControl();</span><br><span class="line"><span class="keyword">*</span></span><br></pre></td></tr></table></figure>

     */

    /**@
     * #.disableControl
     * @comp Jumper
     * @sign public this .disableControl()
     *
     * Disable the component to listen to key events.
     *
     * @example
     * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span> this.disableControl();</span><br><span class="line"><span class="keyword">*</span></span><br></pre></td></tr></table></figure>

     */

    init: function () {
        this.requires(&quot;Supportable, Motion, Keyboard&quot;);
        // don&apos;t overwrite methods from Multiway if they exist
        this.enableControl = this.enableControl || function() { this.disableControls = false; };
        this.disableControl = this.disableControl || function() { this.disableControls = true; };
    },

    remove: function() {
        this.unbind(&quot;KeyDown&quot;, this._keydown_jumper);
    },

    _keydown_jumper: function (e) {
        if (this.disableControls) return;

        if (this._jumpKeys[e.key]) {
            var ground = this.ground;
            this.canJump = !!ground;
            this.trigger(&quot;CheckJumping&quot;, ground);
            if (this.canJump) {
                this.vy = -this._jumpSpeed;
            }
        }
    },

    /**@
     * #.jumper
     * @comp Jumper
     * @sign public this .jumper([Number jumpSpeed,] Array jumpKeys)
     * @param jumpSpeed - Vertical jump speed in pixels per second
     * @param jumpKeys - Keys to listen for and make entity jump in response
     *
     * Constructor to initialize the power of jump and keys to listen to. Component will
     * listen for key events and move the entity appropriately. Used with the
     * `gravity` component will simulate jumping.
     *
     * @example
     * <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* <span class="keyword">this</span>.jumper(<span class="number">300</span>, [<span class="string">&apos;UP_ARROW&apos;</span>, <span class="string">&apos;W&apos;</span>]);</span><br><span class="line">* <span class="keyword">this</span>.jumper([<span class="string">&apos;UP_ARROW&apos;</span>, <span class="string">&apos;W&apos;</span>]);</span><br><span class="line">*</span><br></pre></td></tr></table></figure>

     *
     * @see Supportable, Motion, Keyboard, Gravity
     */
    jumper: function (jumpSpeed, jumpKeys) {
        if (jumpKeys) {
            this._jumpSpeed = jumpSpeed;
        } else {
            jumpKeys = jumpSpeed;
        }

        this._jumpKeys = {};
        for (var i = 0; i &lt; jumpKeys.length; ++i) {
            var key = jumpKeys[i];
            var keyCode = Crafty.keys[key] || key;
            this._jumpKeys[keyCode] = true;
        }

        this.uniqueBind(&quot;KeyDown&quot;, this._keydown_jumper);

        return this;
    },

    /**@
     * #.jumpSpeed
     * @comp Jumper
     * @sign public this .jumpSpeed(Number jumpSpeed)
     * @param jumpSpeed - new vertical jump speed
     *
     * Change the vertical jump speed.
     *
     * @example
     * <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* <span class="keyword">this</span>.jumpSpeed(<span class="number">300</span>);</span><br><span class="line">*</span><br></pre></td></tr></table></figure>

     */
    jumpSpeed: function (jumpSpeed) {
        this._jumpSpeed = jumpSpeed;
        return this;
    }
});

/**@
 * #Fourway
 * @category Controls
 * @trigger NewDirection - When entity has changed direction due to velocity on either x or y axis a NewDirection event is triggered. The event is triggered once, if direction is different from last frame. - { x: -1 | 0 | 1, y: -1 | 0 | 1 } - New direction
 * @trigger Moved - When entity has moved due to velocity/acceleration on either x or y axis a Moved event is triggered. If the entity has moved on both axes for diagonal movement the event is triggered twice. - { axis: &apos;x&apos; | &apos;y&apos;, oldValue: Number } - Old position
 *
 * Move an entity in four directions by using the
 * arrow keys or `W`, `A`, `S`, `D`.
 *
 * @see Multiway
 */
Crafty.c(&quot;Fourway&quot;, {

    init: function () {
        this.requires(&quot;Multiway&quot;);
    },

    /**@
     * #.fourway
     * @comp Fourway
     * @sign public this .fourway([Number speed])
     * @param speed - The speed of motion in pixels per second.
     *
     * Constructor to initialize the speed. Component will listen for key events and move the entity appropriately.
     * This includes `Up Arrow`, `Right Arrow`, `Down Arrow`, `Left Arrow` as well as `W`, `A`, `S`, `D`.
     *
     * The key presses will move the entity in that direction by the speed passed in the argument.
     *
     * @see Multiway
     */
    fourway: function (speed) {
        this.multiway(speed || this._speed, {
            UP_ARROW: -90,
            DOWN_ARROW: 90,
            RIGHT_ARROW: 0,
            LEFT_ARROW: 180,
            W: -90,
            S: 90,
            D: 0,
            A: 180,
            Z: -90,
            Q: 180
        });

        return this;
    }
});

/**@
 * #Twoway
 * @category Controls
 * @trigger NewDirection - When entity has changed direction due to velocity on either x or y axis a NewDirection event is triggered. The event is triggered once, if direction is different from last frame. - { x: -1 | 0 | 1, y: -1 | 0 | 1 } - New direction
 * @trigger Moved - When entity has moved due to velocity/acceleration on either x or y axis a Moved event is triggered. If the entity has moved on both axes for diagonal movement the event is triggered twice. - { axis: &apos;x&apos; | &apos;y&apos;, oldValue: Number } - Old position
 * @trigger CheckJumping - When entity is about to jump. This event is triggered with the object the entity is about to jump from (if it exists). Third parties can respond to this event and enable the entity to jump.
 *
 * Move an entity left or right using the arrow keys or `D` and `A` and jump using up arrow or `W`.
 *
 * @see Multiway, Jumper
 */
Crafty.c(&quot;Twoway&quot;, {

    init: function () {
        this.requires(&quot;Multiway, Jumper&quot;);
    },

    /**@
     * #.twoway
     * @comp Twoway
     * @sign public this .twoway([Number speed[, Number jumpSpeed]])
     * @param speed - A speed in pixels per second
     * @param jumpSpeed - Vertical jump speed in pixels per second
     *
     * Constructor to initialize the speed and power of jump. Component will
     * listen for key events and move the entity appropriately. This includes
     * `Up Arrow`, `Right Arrow`, `Left Arrow` as well as `W`, `A`, `D`. Used with the
     * `gravity` component to simulate jumping.
     *
     * The key presses will move the entity in that direction by the speed passed in
     * the argument. Pressing the `Up Arrow` or `W` will cause the entity to jump.
     *
     * @see Multiway, Jumper
     */
    twoway: function (speed, jumpSpeed) {

        this.multiway(speed || this._speed, {
            RIGHT_ARROW: 0,
            LEFT_ARROW: 180,
            D: 0,
            A: 180,
            Q: 180
        });

        this.jumper(jumpSpeed || speed * 2 || this._jumpSpeed, [
            Crafty.keys.UP_ARROW,
            Crafty.keys.W,
            Crafty.keys.Z
        ]);

        return this;
    }
});

},{&quot;../core/core.js&quot;:7}],3:[function(require,module,exports){
var Crafty = require(&apos;../core/core.js&apos;);


Crafty.extend({
    /**@
     * #Crafty.device
     * @category Misc
     *
     * Methods relating to devices such as tablets or phones
     */
    device: {
        _deviceOrientationCallback: false,
        _deviceMotionCallback: false,

        /**
         * The HTML5 DeviceOrientation event returns three pieces of data:
         *  * alpha the direction the device is facing according to the compass
         *  * beta the angle in degrees the device is tilted front-to-back
         *  * gamma the angle in degrees the device is tilted left-to-right.
         *  * The angles values increase as you tilt the device to the right or towards you.
         *
         * Since Firefox uses the MozOrientationEvent which returns similar data but
         * using different parameters and a different measurement system, we want to
         * normalize that before we pass it to our _deviceOrientationCallback function.
         *
         * @param eventData HTML5 DeviceOrientation event
         */
        _normalizeDeviceOrientation: function (eventData) {
            var data;
            if (window.DeviceOrientationEvent) {
                data = {
                    // gamma is the left-to-right tilt in degrees, where right is positive
                    &apos;tiltLR&apos;: eventData.gamma,
                    // beta is the front-to-back tilt in degrees, where front is positive
                    &apos;tiltFB&apos;: eventData.beta,
                    // alpha is the compass direction the device is facing in degrees
                    &apos;dir&apos;: eventData.alpha,
                    // deviceorientation does not provide this data
                    &apos;motUD&apos;: null
                };
            } else if (window.OrientationEvent) {
                data = {
                    // x is the left-to-right tilt from -1 to +1, so we need to convert to degrees
                    &apos;tiltLR&apos;: eventData.x * 90,
                    // y is the front-to-back tilt from -1 to +1, so we need to convert to degrees
                    // We also need to invert the value so tilting the device towards us (forward)
                    // results in a positive value.
                    &apos;tiltFB&apos;: eventData.y * -90,
                    // MozOrientation does not provide this data
                    &apos;dir&apos;: null,
                    // z is the vertical acceleration of the device
                    &apos;motUD&apos;: eventData.z
                };
            }

            Crafty.device._deviceOrientationCallback(data);
        },

        /**
         * @param eventData HTML5 DeviceMotion event
         */
        _normalizeDeviceMotion: function (eventData) {
            var acceleration = eventData.accelerationIncludingGravity,
                facingUp = (acceleration.z &gt; 0) ? +1 : -1;

            var data = {
                // Grab the acceleration including gravity from the results
                &apos;acceleration&apos;: acceleration,
                &apos;rawAcceleration&apos;: &quot;[&quot; + Math.round(acceleration.x) + &quot;, &quot; + Math.round(acceleration.y) + &quot;, &quot; + Math.round(acceleration.z) + &quot;]&quot;,
                // Z is the acceleration in the Z axis, and if the device is facing up or down
                &apos;facingUp&apos;: facingUp,
                // Convert the value from acceleration to degrees acceleration.x|y is the
                // acceleration according to gravity, we&apos;ll assume we&apos;re on Earth and divide
                // by 9.81 (earth gravity) to get a percentage value, and then multiply that
                // by 90 to convert to degrees.
                &apos;tiltLR&apos;: Math.round(((acceleration.x) / 9.81) * -90),
                &apos;tiltFB&apos;: Math.round(((acceleration.y + 9.81) / 9.81) * 90 * facingUp)
            };

            Crafty.device._deviceMotionCallback(data);
        },

        /**@
         * #Crafty.device.deviceOrientation
         * @comp Crafty.device
         * @sign public Crafty.device.deviceOrientation(Function callback)
         * @param callback - Callback method executed once as soon as device orientation is change
         *
         * Do something with normalized device orientation data:
         * <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">* {</span><br><span class="line">*   tiltLR    :   &apos;gamma <span class="comment">-- the angle in degrees the device is tilted left-to-right.&apos;,</span></span><br><span class="line">*   tiltFB    :   &apos;beta <span class="comment">-- the angle in degrees the device is tilted front-to-back&apos;,</span></span><br><span class="line">*   dir       :   &apos;alpha <span class="comment">-- the direction the device is facing according to the compass&apos;,</span></span><br><span class="line">*   motUD     :   &apos;The angle&apos;s values increase <span class="keyword">as</span> you tilt <span class="keyword">the</span> device <span class="keyword">to</span> <span class="keyword">the</span> right <span class="keyword">or</span> towards you.&apos;</span><br><span class="line">* }</span><br><span class="line">*</span><br></pre></td></tr></table></figure>

         *
         * @example
         * <figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* // Get DeviceOrientation event normalized <span class="type">data</span>.</span><br><span class="line">* Crafty.device.deviceOrientation(<span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>{</span><br><span class="line">*     Crafty.<span class="built_in">log</span>(<span class="string">&apos;data.tiltLR : &apos;</span>+Math.<span class="keyword">round</span>(<span class="type">data</span>.tiltLR)+<span class="string">&apos;, data.tiltFB : &apos;</span>+Math.<span class="keyword">round</span>(<span class="type">data</span>.tiltFB)+<span class="string">&apos;, data.dir : &apos;</span>+Math.<span class="keyword">round</span>(<span class="type">data</span>.dir)+<span class="string">&apos;, data.motUD : &apos;</span>+<span class="type">data</span>.motUD+<span class="string">&apos;&apos;</span>);</span><br><span class="line">* });</span><br><span class="line">*</span><br></pre></td></tr></table></figure>

         *
         * See browser support at http://caniuse.com/#search=device orientation.
         */
        deviceOrientation: function (func) {
            this._deviceOrientationCallback = func;
            if (Crafty.support.deviceorientation) {
                if (window.DeviceOrientationEvent) {
                    // Listen for the deviceorientation event and handle DeviceOrientationEvent object
                    Crafty.addEvent(this, window, &apos;deviceorientation&apos;, this._normalizeDeviceOrientation);
                } else if (window.OrientationEvent) {
                    // Listen for the MozOrientation event and handle OrientationData object
                    Crafty.addEvent(this, window, &apos;MozOrientation&apos;, this._normalizeDeviceOrientation);
                }
            }
        },

        /**@
         * #Crafty.device.deviceMotion
         * @comp Crafty.device
         * @sign public Crafty.device.deviceMotion(Function callback)
         * @param callback - Callback method executed once as soon as device motion is change
         *
         * Do something with normalized device motion data:
         * <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* {</span><br><span class="line">*     acceleration : &apos;Grab <span class="keyword">the</span> acceleration including gravity <span class="keyword">from</span> <span class="keyword">the</span> results&apos;,</span><br><span class="line">*     rawAcceleration : &apos;Display <span class="keyword">the</span> raw acceleration data&apos;,</span><br><span class="line">*     facingUp : &apos;Z <span class="keyword">is</span> <span class="keyword">the</span> acceleration <span class="keyword">in</span> <span class="keyword">the</span> Z axis, <span class="keyword">and</span> <span class="keyword">if</span> <span class="keyword">the</span> device <span class="keyword">is</span> facing up <span class="keyword">or</span> down&apos;,</span><br><span class="line">*     tiltLR : &apos;Convert <span class="keyword">the</span> value <span class="keyword">from</span> acceleration <span class="keyword">to</span> degrees. acceleration.x <span class="keyword">is</span> <span class="keyword">the</span> acceleration according <span class="keyword">to</span> gravity, we&apos;ll assume we&apos;re <span class="function_start"><span class="keyword">on</span></span> Earth <span class="keyword">and</span> divide <span class="keyword">by</span> <span class="number">9.81</span> (earth gravity) <span class="keyword">to</span> <span class="keyword">get</span> a percentage value, <span class="keyword">and</span> <span class="keyword">then</span> multiply <span class="keyword">that</span> <span class="keyword">by</span> <span class="number">90</span> <span class="keyword">to</span> convert <span class="keyword">to</span> degrees.&apos;,</span><br><span class="line">*     tiltFB : &apos;Convert <span class="keyword">the</span> value <span class="keyword">from</span> acceleration <span class="keyword">to</span> degrees.&apos;</span><br><span class="line">* }</span><br><span class="line">*</span><br></pre></td></tr></table></figure>

         *
         * @example
         * <figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* // Get DeviceMotion event normalized <span class="type">data</span>.</span><br><span class="line">* Crafty.device.deviceMotion(<span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>{</span><br><span class="line">*     Crafty.<span class="built_in">log</span>(<span class="string">&apos;data.moAccel : &apos;</span>+<span class="type">data</span>.rawAcceleration+<span class="string">&apos;, data.moCalcTiltLR : &apos;</span>+Math.<span class="keyword">round</span>(<span class="type">data</span>.tiltLR)+<span class="string">&apos;, data.moCalcTiltFB : &apos;</span>+Math.<span class="keyword">round</span>(<span class="type">data</span>.tiltFB)+<span class="string">&apos;&apos;</span>);</span><br><span class="line">* });</span><br><span class="line">*</span><br></pre></td></tr></table></figure>

         *
         * See browser support at http://caniuse.com/#search=motion.
         */
        deviceMotion: function (func) {
            this._deviceMotionCallback = func;
            if (Crafty.support.devicemotion) {
                if (window.DeviceMotionEvent) {
                    // Listen for the devicemotion event and handle DeviceMotionEvent object
                    Crafty.addEvent(this, window, &apos;devicemotion&apos;, this._normalizeDeviceMotion);
                }
            }
        }
    }
});

},{&quot;../core/core.js&quot;:7}],4:[function(require,module,exports){
var Crafty = require(&apos;../core/core.js&apos;),
    document = window.document;

Crafty.extend({
    over: null, //object mouseover, waiting for out
    mouseObjs: 0,
    mousePos: {},
    lastEvent: null,
    touchObjs: 0,
    selected: false,

    /**@
     * #Crafty.keydown
     * @category Input
     * Check which keys (referred by Unicode values) are currently down.
     *
     * @example
     * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span> Crafty.c(<span class="string">&quot;Keyboard&quot;</span>, {</span><br><span class="line"><span class="keyword">*</span>   isDown: function (key) {</span><br><span class="line"><span class="keyword">*</span>     if (typeof key === <span class="string">&quot;string&quot;</span>) {</span><br><span class="line"><span class="keyword">*</span>       key = Crafty.keys[key];</span><br><span class="line"><span class="keyword">*</span>     }</span><br><span class="line"><span class="keyword">*</span>     return !!Crafty.keydown[key];</span><br><span class="line"><span class="keyword">*</span>   }</span><br><span class="line"><span class="keyword">*</span> });</span><br><span class="line"><span class="keyword">*</span></span><br></pre></td></tr></table></figure>

     * @see Keyboard, Crafty.keys
     */
     keydown: {},

    detectBlur: function (e) {
        var selected = ((e.clientX &gt; Crafty.stage.x &amp;&amp; e.clientX &lt; Crafty.stage.x + Crafty.viewport.width) &amp;&amp;
            (e.clientY &gt; Crafty.stage.y &amp;&amp; e.clientY &lt; Crafty.stage.y + Crafty.viewport.height));

        if (!Crafty.selected &amp;&amp; selected) {
            Crafty.trigger(&quot;CraftyFocus&quot;);
        }
        
        if (Crafty.selected &amp;&amp; !selected) {
            Crafty.trigger(&quot;CraftyBlur&quot;);
        }
        
        Crafty.selected = selected;
    },

    /**@
     * #Crafty.multitouch
     * @category Input
     * @sign public this .multitouch(Boolean bool)
     * @param bool - Turns multitouch on and off.  The initial state is off (false).
     *
     * @sign public Boolean .multitouch()
     * @returns Whether multitouch is currently enabled;
     *
     * Enables/disables support for multitouch feature.
     * 
     * If this is set to true, it is expected that your entities have the Touch component instead of Mouse component.
     * If false (default), then only entities with the Mouse component will respond to touch.
     *
     * If no boolean is passed to the function call, it will just return whether multitouch is on or not.
     * 
     * @note The Touch component (and thus the multitouch feature) is currently incompatible with the Draggable component.
     * 
     * @example
     * <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">* Crafty.multitouch(<span class="literal">true</span>);</span><br><span class="line">* </span><br><span class="line">* var myEntity1 = Crafty.e(<span class="string">&apos;2D, Canvas, Color, Touch&apos;</span>)</span><br><span class="line">*    .attr({<span class="string">x:</span> <span class="number">100</span>, <span class="string">y:</span> <span class="number">100</span>, <span class="string">w:</span><span class="number">200</span>, <span class="string">h:</span><span class="number">200</span>, <span class="string">z:</span><span class="number">1</span> })</span><br><span class="line">*    .color(<span class="string">&apos;black&apos;</span>)</span><br><span class="line">*    .bind(<span class="string">&apos;TouchStart&apos;</span>,function(e){ alert(<span class="string">&apos;big black box was touched&apos;</span>, e); }),</span><br><span class="line">*  myEntity2 = Crafty.e(<span class="string">&apos;2D, Canvas, Color, Touch&apos;</span>)</span><br><span class="line">*    .attr({<span class="string">x:</span> <span class="number">40</span>, <span class="string">y:</span> <span class="number">150</span>, <span class="string">w:</span><span class="number">90</span>, <span class="string">h:</span><span class="number">300</span>, <span class="string">z:</span><span class="number">2</span> })</span><br><span class="line">*    .color(<span class="string">&apos;green&apos;</span>)</span><br><span class="line">*    .bind(<span class="string">&apos;TouchStart&apos;</span>,function(e){ alert(<span class="string">&apos;big GREEN box was touched&apos;</span>, e); });</span><br><span class="line">* </span><br><span class="line">* Crafty.log(<span class="string">&quot;multitouch is &quot;</span>+Crafty.multitouch());</span><br><span class="line">*</span><br></pre></td></tr></table></figure>

     * @see Crafty.touchDispatch
     */
    multitouch: function (bool) {
        if (typeof bool !== &quot;boolean&quot;) return this._touchHandler.multitouch;
        this._touchHandler.multitouch = bool;
    },
    
    resetKeyDown: function() {
        // Tell all the keys they&apos;re no longer held down
        for (var k in Crafty.keys) {
             if (Crafty.keydown[Crafty.keys[k]]) {
                 this.trigger(&quot;KeyUp&quot;, {
                     key: Crafty.keys[k]
                 });
             }
        }
		
        Crafty.keydown = {};
    },
    
    /**@
     * #Crafty.mouseDispatch
     * @category Input
     *
     * Internal method which dispatches mouse events received by Crafty (crafty.stage.elem).
     * The mouse events get dispatched to the closest entity to the source of the event (if available).
     *
     * You can read more about the MouseEvent, which is the parameter passed to the callback.
     * https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent
     *
     * This method also sets a global property Crafty.lastEvent, which holds the most recent event that
     * occured (useful for determining mouse position in every frame).
     * 
     * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span> <span class="comment">@example</span></span><br><span class="line"><span class="keyword">*</span></span><br></pre></td></tr></table></figure>

     * var newestX = Crafty.lastEvent.realX,
     *     newestY = Crafty.lastEvent.realY;
     * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span> </span><br><span class="line"><span class="keyword">*</span> Notable properties of a MouseEvent e:</span><br><span class="line"><span class="keyword">*</span></span><br></pre></td></tr></table></figure>

     * //(x,y) coordinates of mouse event in web browser screen space
     * e.clientX, e.clientY
     * //(x,y) coordinates of mouse event in world/viewport space
     * e.realX, e.realY
     * // Normalized mouse button according to Crafty.mouseButtons
     * e.mouseButton
     * <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"> * @see Crafty.touchDispatch</span></span><br><span class="line"><span class="comment"> * @see Crafty.multitouch</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">mouseDispatch: function (<span class="keyword">e</span>) {</span><br><span class="line">    <span class="keyword">if</span> (!Crafty.mouseObjs) <span class="keyword">return</span>;</span><br><span class="line">    Crafty.lastEvent = <span class="keyword">e</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> maxz = -1,</span><br><span class="line">        tar = <span class="keyword">e</span>.target ? <span class="keyword">e</span>.target : <span class="keyword">e</span>.srcElement,</span><br><span class="line">        closest,</span><br><span class="line">        q,</span><br><span class="line">        i = 0,</span><br><span class="line">        <span class="keyword">l</span>,</span><br><span class="line">        pos = Crafty.domHelper.<span class="keyword">translate</span>(<span class="keyword">e</span>.clientX, <span class="keyword">e</span>.clientY),</span><br><span class="line">        x, y,</span><br><span class="line">        dupes = {},</span><br><span class="line">        <span class="keyword">type</span> = <span class="keyword">e</span>.<span class="keyword">type</span>;     </span><br><span class="line"></span><br><span class="line">    <span class="comment">//Normalize button according to http://unixpapa.com/js/mouse.html</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">e</span>.<span class="keyword">which</span> === &apos;undefined&apos;) {</span><br><span class="line">        <span class="keyword">e</span>.mouseButton = (<span class="keyword">e</span>.button &lt; 2) ? Crafty.mouseButtons.LEFT : ((<span class="keyword">e</span>.button == 4) ? Crafty.mouseButtons.MIDDLE : Crafty.mouseButtons.RIGHT);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">e</span>.mouseButton = (<span class="keyword">e</span>.<span class="keyword">which</span> &lt; 2) ? Crafty.mouseButtons.LEFT : ((<span class="keyword">e</span>.<span class="keyword">which</span> == 2) ? Crafty.mouseButtons.MIDDLE : Crafty.mouseButtons.RIGHT);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">e</span>.realX = x = Crafty.mousePos.x = pos.x;</span><br><span class="line">    <span class="keyword">e</span>.realY = y = Crafty.mousePos.y = pos.y;</span><br><span class="line"></span><br><span class="line">    closest = Crafty.findClosestEntityByComponent(<span class="string">&quot;Mouse&quot;</span>, x, y, tar);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//found closest object to mouse</span></span><br><span class="line">    <span class="keyword">if</span> (closest) {</span><br><span class="line">        <span class="comment">//click must mousedown and out on tile</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">type</span> === <span class="string">&quot;mousedown&quot;</span>) {</span><br><span class="line">            closest.trigger(<span class="string">&quot;MouseDown&quot;</span>, <span class="keyword">e</span>);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">type</span> === <span class="string">&quot;mouseup&quot;</span>) {</span><br><span class="line">            closest.trigger(<span class="string">&quot;MouseUp&quot;</span>, <span class="keyword">e</span>);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">type</span> == <span class="string">&quot;dblclick&quot;</span>) {</span><br><span class="line">            closest.trigger(<span class="string">&quot;DoubleClick&quot;</span>, <span class="keyword">e</span>);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">type</span> == <span class="string">&quot;click&quot;</span>) {</span><br><span class="line">            closest.trigger(<span class="string">&quot;Click&quot;</span>, <span class="keyword">e</span>);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">type</span> === <span class="string">&quot;mousemove&quot;</span>) {</span><br><span class="line">            closest.trigger(<span class="string">&quot;MouseMove&quot;</span>, <span class="keyword">e</span>);</span><br><span class="line">            <span class="keyword">if</span> (this.over !== closest) { <span class="comment">//if new mousemove, it is over</span></span><br><span class="line">                <span class="keyword">if</span> (this.over) {</span><br><span class="line">                    this.over.trigger(<span class="string">&quot;MouseOut&quot;</span>, <span class="keyword">e</span>); <span class="comment">//if over wasn&apos;t null, send mouseout</span></span><br><span class="line">                    this.over = null;</span><br><span class="line">                }</span><br><span class="line">                this.over = closest;</span><br><span class="line">                closest.trigger(<span class="string">&quot;MouseOver&quot;</span>, <span class="keyword">e</span>);</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">else</span> closest.trigger(<span class="keyword">type</span>, <span class="keyword">e</span>); <span class="comment">//trigger whatever it is</span></span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">type</span> === <span class="string">&quot;mousemove&quot;</span> &amp;&amp; this.over) {</span><br><span class="line">            this.over.trigger(<span class="string">&quot;MouseOut&quot;</span>, <span class="keyword">e</span>);</span><br><span class="line">            this.over = null;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">type</span> === <span class="string">&quot;mousedown&quot;</span>) {</span><br><span class="line">            Crafty.viewport.mouselook(&apos;start&apos;, <span class="keyword">e</span>);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">type</span> === <span class="string">&quot;mousemove&quot;</span>) {</span><br><span class="line">            Crafty.viewport.mouselook(&apos;drag&apos;, <span class="keyword">e</span>);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">type</span> == <span class="string">&quot;mouseup&quot;</span>) {</span><br><span class="line">            Crafty.viewport.mouselook(&apos;stop&apos;);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">type</span> === <span class="string">&quot;mousemove&quot;</span>) {</span><br><span class="line">        this.lastEvent = <span class="keyword">e</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Crafty.touchDispatch</span><br><span class="line"> * @category Input</span><br><span class="line"> *</span><br><span class="line"> * Internal method which dispatches touch events received by Crafty (crafty.stage.elem).</span><br><span class="line"> * The touch events get dispatched to the closest entity to the source of the event (if available).</span><br><span class="line"> * </span><br><span class="line"> * By default, touch events are treated as mouse events. To change this behaviour (and enable multitouch)</span><br><span class="line"> * you must use Crafty.multitouch.</span><br><span class="line"> * </span><br><span class="line"> * If using multitouch feature, this method sets the array Crafty.touchHandler.fingers, which holds data </span><br><span class="line"> * of the most recent touches that occured (useful for determining positions of fingers in every frame) </span><br><span class="line"> * as well as last entity touched by each finger. Data is lost as soon as the finger is raised.</span><br><span class="line"> * </span><br><span class="line"> * You can read about the MouseEvent, which is the parameter passed to the Mouse entity&apos;s callback.</span><br><span class="line"> * https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent</span><br><span class="line"> *</span><br><span class="line"> * You can also read about the TouchEvent.</span><br><span class="line"> * https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent</span><br><span class="line"> * </span><br><span class="line"> * And about the touch point interface, which is the parameter passed to the Touch entity&apos;s callback.</span><br><span class="line"> * http://www.w3.org/TR/touch-events/#dfn-active-touch-point</span><br><span class="line"> * </span><br><span class="line"> * @see Crafty.multitouch</span><br><span class="line"> * @see Crafty.mouseDispatch</span><br><span class="line"> */</span></span><br><span class="line">touchDispatch: function (<span class="keyword">e</span>) {</span><br><span class="line">    <span class="keyword">if</span> (!Crafty.touchObjs &amp;&amp; !Crafty.mouseObjs) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (this._touchHandler.multitouch)</span><br><span class="line">        switch (<span class="keyword">e</span>.<span class="keyword">type</span>) {</span><br><span class="line">            case <span class="string">&quot;touchstart&quot;</span>:</span><br><span class="line">                this._touchHandler.handleStart(<span class="keyword">e</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            case <span class="string">&quot;touchmove&quot;</span>:</span><br><span class="line">                this._touchHandler.handleMove(<span class="keyword">e</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            case <span class="string">&quot;touchleave&quot;</span>: <span class="comment">// touchleave is treated as touchend</span></span><br><span class="line">            case <span class="string">&quot;touchcancel&quot;</span>: <span class="comment">// touchcancel is treated as touchend, but triggers a TouchCancel event</span></span><br><span class="line">            case <span class="string">&quot;touchend&quot;</span>:</span><br><span class="line">                this._touchHandler.handleEnd(<span class="keyword">e</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        this._touchHandler.mimicMouse(<span class="keyword">e</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Don&apos;t prevent default actions if target node is input or textarea.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">e</span>.target &amp;&amp; <span class="keyword">e</span>.target.nodeName !== &apos;<span class="keyword">INPUT</span>&apos; &amp;&amp; <span class="keyword">e</span>.target.nodeName !== &apos;TEXTAREA&apos;)</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">e</span>.preventDefault) {</span><br><span class="line">            <span class="keyword">e</span>.preventDefault();</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">e</span>.returnValue = false;</span><br><span class="line">        }</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">_touchHandler: {</span><br><span class="line">    fingers: [], <span class="comment">// keeps track of touching fingers</span></span><br><span class="line">    multitouch: false,</span><br><span class="line">    </span><br><span class="line">    handleStart: function (<span class="keyword">e</span>) {</span><br><span class="line">        <span class="keyword">var</span> touches = <span class="keyword">e</span>.changedTouches;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = 0, <span class="keyword">l</span> = touches.length; i &lt; <span class="keyword">l</span>; i++) {</span><br><span class="line">            <span class="keyword">var</span> idx = false,</span><br><span class="line">              pos = Crafty.domHelper.<span class="keyword">translate</span>(touches[i].clientX, touches[i].clientY),</span><br><span class="line">              tar = <span class="keyword">e</span>.target ? <span class="keyword">e</span>.target : <span class="keyword">e</span>.srcElement,</span><br><span class="line">              x, y, closest;</span><br><span class="line">            touches[i].realX = x = pos.x;</span><br><span class="line">            touches[i].realY = y = pos.y;</span><br><span class="line">            closest = this.findClosestTouchEntity(x, y, tar);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (closest) {</span><br><span class="line">                closest.trigger(<span class="string">&quot;TouchStart&quot;</span>, touches[i]);</span><br><span class="line">                <span class="comment">// In case the entity was already being pressed, get the finger index</span></span><br><span class="line">                idx = this.fingerDownIndexByEntity(closest);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">var</span> touch = this.setTouch(touches[i], closest);</span><br><span class="line">            <span class="keyword">if</span> (idx !== false &amp;&amp; idx &gt;= 0) {</span><br><span class="line">                <span class="comment">// Recycling finger...</span></span><br><span class="line">                this.fingers[idx] = touch;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                this.fingers.push(touch);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">        </span><br><span class="line">    handleMove: function (<span class="keyword">e</span>) {</span><br><span class="line">        <span class="keyword">var</span> touches = <span class="keyword">e</span>.changedTouches;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = 0, <span class="keyword">l</span> = touches.length; i &lt; <span class="keyword">l</span>; i++) {</span><br><span class="line">            <span class="keyword">var</span> idx = this.fingerDownIndexById(touches[i].identifier),</span><br><span class="line">              pos = Crafty.domHelper.<span class="keyword">translate</span>(touches[i].clientX, touches[i].clientY),</span><br><span class="line">              tar = <span class="keyword">e</span>.target ? <span class="keyword">e</span>.target : <span class="keyword">e</span>.srcElement,</span><br><span class="line">              x, y, closest;</span><br><span class="line">            touches[i].realX = x = pos.x;</span><br><span class="line">            touches[i].realY = y = pos.y;</span><br><span class="line">            closest = this.findClosestTouchEntity(x, y, tar);</span><br><span class="line">        </span><br><span class="line">            <span class="keyword">if</span> (idx &gt;= 0) {</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">typeof</span> this.fingers[idx].entity !== <span class="string">&quot;undefined&quot;</span>)</span><br><span class="line">                    <span class="keyword">if</span> (this.fingers[idx].entity == closest) {</span><br><span class="line">                        this.fingers[idx].entity.trigger(<span class="string">&quot;TouchMove&quot;</span>, touches[i]);</span><br><span class="line">                    } <span class="keyword">else</span> {</span><br><span class="line">                        <span class="keyword">if</span> (<span class="keyword">typeof</span> closest === <span class="string">&quot;object&quot;</span>) closest.trigger(<span class="string">&quot;TouchStart&quot;</span>, touches[i]);</span><br><span class="line">                        this.fingers[idx].entity.trigger(<span class="string">&quot;TouchEnd&quot;</span>);</span><br><span class="line">                    }</span><br><span class="line">                this.fingers[idx].entity = closest;</span><br><span class="line">                this.fingers[idx].realX = x;</span><br><span class="line">                this.fingers[idx].realY = y;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    </span><br><span class="line">    handleEnd: function (<span class="keyword">e</span>) {</span><br><span class="line">        <span class="keyword">var</span> touches = <span class="keyword">e</span>.changedTouches, </span><br><span class="line">            eventName = <span class="keyword">e</span>.<span class="keyword">type</span> == <span class="string">&quot;touchcancel&quot;</span> ? <span class="string">&quot;TouchCancel&quot;</span> : <span class="string">&quot;TouchEnd&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = 0, <span class="keyword">l</span> = touches.length; i &lt; <span class="keyword">l</span>; i++) {</span><br><span class="line">            <span class="keyword">var</span> idx = this.fingerDownIndexById(touches[i].identifier);</span><br><span class="line">        </span><br><span class="line">            <span class="keyword">if</span> (idx &gt;= 0) {</span><br><span class="line">                    <span class="keyword">if</span> (this.fingers[idx].entity)</span><br><span class="line">                        this.fingers[idx].entity.trigger(eventName);</span><br><span class="line">                    this.fingers.splice(idx, 1);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">        </span><br><span class="line">    setTouch: function (touch, entity) {</span><br><span class="line">        <span class="keyword">return</span> { identifier: touch.identifier, realX: touch.realX, realY: touch.realY, entity: entity };</span><br><span class="line">    },</span><br><span class="line">        </span><br><span class="line">    findClosestTouchEntity: function (x, y, tar) {</span><br><span class="line">        <span class="keyword">return</span> Crafty.findClosestEntityByComponent(<span class="string">&quot;Touch&quot;</span>, x, y, tar);</span><br><span class="line">    },</span><br><span class="line">       </span><br><span class="line">    fingerDownIndexById: function(idToFind) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = 0, <span class="keyword">l</span> = this.fingers.length; i &lt; <span class="keyword">l</span>; i++) {</span><br><span class="line">            <span class="keyword">var</span> id = this.fingers[i].identifier;</span><br><span class="line">            </span><br><span class="line">               <span class="keyword">if</span> (id == idToFind) {</span><br><span class="line">                   <span class="keyword">return</span> i;</span><br><span class="line">               }</span><br><span class="line">            }</span><br><span class="line">        <span class="keyword">return</span> -1;</span><br><span class="line">    },</span><br><span class="line">        </span><br><span class="line">    fingerDownIndexByEntity: function(entityToFind) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = 0, <span class="keyword">l</span> = this.fingers.length; i &lt; <span class="keyword">l</span>; i++) {</span><br><span class="line">            <span class="keyword">var</span> ent = this.fingers[i].entity;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (ent == entityToFind) {</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> -1;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    mimicMouse: function (<span class="keyword">e</span>) {</span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">type</span>,</span><br><span class="line">            lastEvent = Crafty.lastEvent;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">e</span>.<span class="keyword">type</span> === <span class="string">&quot;touchstart&quot;</span>) <span class="keyword">type</span> = <span class="string">&quot;mousedown&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">e</span>.<span class="keyword">type</span> === <span class="string">&quot;touchmove&quot;</span>) <span class="keyword">type</span> = <span class="string">&quot;mousemove&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">e</span>.<span class="keyword">type</span> === <span class="string">&quot;touchend&quot;</span>) <span class="keyword">type</span> = <span class="string">&quot;mouseup&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">e</span>.<span class="keyword">type</span> === <span class="string">&quot;touchcancel&quot;</span>) <span class="keyword">type</span> = <span class="string">&quot;mouseup&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">e</span>.<span class="keyword">type</span> === <span class="string">&quot;touchleave&quot;</span>) <span class="keyword">type</span> = <span class="string">&quot;mouseup&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">e</span>.touches &amp;&amp; <span class="keyword">e</span>.touches.length) {</span><br><span class="line">            first = <span class="keyword">e</span>.touches[0];</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">e</span>.changedTouches &amp;&amp; <span class="keyword">e</span>.changedTouches.length) {</span><br><span class="line">            first = <span class="keyword">e</span>.changedTouches[0];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">var</span> simulatedEvent = document.createEvent(<span class="string">&quot;MouseEvent&quot;</span>);</span><br><span class="line">        simulatedEvent.initMouseEvent(<span class="keyword">type</span>, true, true, <span class="keyword">window</span>, 1,</span><br><span class="line">          first.screenX,</span><br><span class="line">          first.screenY,</span><br><span class="line">          first.clientX,</span><br><span class="line">          first.clientY,</span><br><span class="line">          false, false, false, false, 0, <span class="keyword">e</span>.relatedTarget</span><br><span class="line">        );</span><br><span class="line">        first.target.dispatchEvent(simulatedEvent);</span><br><span class="line">        <span class="comment">// trigger click when it should be triggered</span></span><br><span class="line">        <span class="keyword">if</span> (lastEvent !== null &amp;&amp; lastEvent.<span class="keyword">type</span> == &apos;mousedown&apos; &amp;&amp; <span class="keyword">type</span> == &apos;mouseup&apos;) {</span><br><span class="line">            <span class="keyword">type</span> = &apos;click&apos;;</span><br><span class="line">            simulatedEvent = document.createEvent(<span class="string">&quot;MouseEvent&quot;</span>);</span><br><span class="line">            simulatedEvent.initMouseEvent(<span class="keyword">type</span>, true, true, <span class="keyword">window</span>, 1,</span><br><span class="line">              first.screenX,</span><br><span class="line">              first.screenY,</span><br><span class="line">              first.clientX,</span><br><span class="line">              first.clientY,</span><br><span class="line">              false, false, false, false, 0, <span class="keyword">e</span>.relatedTarget</span><br><span class="line">            );</span><br><span class="line">            first.target.dispatchEvent(simulatedEvent);</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Crafty.findClosestEntityByComponent</span><br><span class="line"> * @category Input</span><br><span class="line"> * </span><br><span class="line"> * @sign public this .findClosestEntityByComponent(String comp, Number x, Number y[, Object target])</span><br><span class="line"> * Finds closest entity with certain component at given coordinates.</span><br><span class="line"> * @param comp - Component name</span><br><span class="line"> * @param x - `x` position where to look for entities</span><br><span class="line"> * @param y - `y` position where to look for entities</span><br><span class="line"> * @param target - Target element wherein to look for entities </span><br><span class="line"> * </span><br><span class="line"> * This method is used internally by the .mouseDispatch and .touchDispatch methods, but can be used otherwise for </span><br><span class="line"> * Canvas entities.</span><br><span class="line"> * </span><br><span class="line"> * Finds the top most entity (with the highest z) with a given component at a given point (x, y).</span><br><span class="line"> * For having a detection area specified for the enity, add the AreaMap component to the entity expected to be found.</span><br><span class="line"> * </span><br><span class="line"> * The &apos;target&apos; argument is only meant to be used by .mouseDispatch and touchDispatch; defaults to Crafty.stage.elem, </span><br><span class="line"> * thus using this function directly is only worth anything for canvas entities.</span><br><span class="line"> * </span><br><span class="line"> * Returns the found entity, or undefined if no entity was found.</span><br><span class="line"> * </span><br><span class="line"> * @example</span><br><span class="line"> *</span></span><br></pre></td></tr></table></figure>

     * var coords = { x: 455, y: 267 },
     *     closestText = Crafty.findClosestEntityByComponent(&quot;Text&quot;, coords.x, coords.y);
     * <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"> */</span><br><span class="line">findClosestEntityByComponent: <span class="function"><span class="keyword">function</span> <span class="params">(comp, x, y, target)</span> </span>{ </span><br><span class="line">    <span class="keyword">var</span> tar = target ? target : Crafty.stage.elem,</span><br><span class="line">        closest, q, l, i = <span class="number">0</span>, maxz = -<span class="number">1</span>, dupes = {};</span><br><span class="line">        </span><br><span class="line">    <span class="comment">//if it&apos;s a DOM element with component we are done</span></span><br><span class="line">    <span class="keyword">if</span> (tar.nodeName != <span class="string">&quot;CANVAS&quot;</span>) {</span><br><span class="line">        <span class="keyword">while</span> (typeof (tar.id) != <span class="string">&apos;string&apos;</span> &amp;&amp; tar.id.indexOf(<span class="string">&apos;ent&apos;</span>) == -<span class="number">1</span>) {</span><br><span class="line">            tar = tar.parentNode;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">var</span> ent = Crafty(parseInt(tar.id.replace(<span class="string">&apos;ent&apos;</span>, <span class="string">&apos;&apos;</span>), <span class="number">10</span>));</span><br><span class="line">        <span class="keyword">if</span> (ent.__c[comp] &amp;&amp; ent.isAt(x, y)){</span><br><span class="line">            closest = ent;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">        <span class="comment">//else we search for an entity with component</span></span><br><span class="line">    <span class="keyword">if</span> (!closest) {</span><br><span class="line">        q = Crafty.map.search({</span><br><span class="line">            _x: x,</span><br><span class="line">            _y: y,</span><br><span class="line">            _w: <span class="number">1</span>,</span><br><span class="line">            _h: <span class="number">1</span></span><br><span class="line">        }, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (l = q.length; i &lt; l; ++i) {</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (!q[i].__c[comp] || !q[i]._visible){ <span class="keyword">continue</span>; }</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> current = q[i],</span><br><span class="line">                    flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//weed out duplicates</span></span><br><span class="line">                <span class="keyword">if</span> (dupes[current[<span class="number">0</span>]]){  <span class="keyword">continue</span>; }</span><br><span class="line">                <span class="keyword">else</span> dupes[current[<span class="number">0</span>]] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (current.mapArea) {</span><br><span class="line">                    <span class="keyword">if</span> (current.mapArea.containsPoint(x, y)) {</span><br><span class="line">                        flag = <span class="keyword">true</span>;</span><br><span class="line">                    }</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (current.isAt(x, y)) flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (flag &amp;&amp; (current._z &gt;= maxz || maxz === -<span class="number">1</span>)) {</span><br><span class="line">                    <span class="comment">//if the Z is the same, select the closest GUID</span></span><br><span class="line">                    <span class="keyword">if</span> (current._z === maxz &amp;&amp; current[<span class="number">0</span>] &lt; closest[<span class="number">0</span>]) {</span><br><span class="line">                        <span class="keyword">continue</span>; </span><br><span class="line">                }</span><br><span class="line">                maxz = current._z;</span><br><span class="line">                closest = current;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> closest;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Crafty.mouseWheelDispatch</span><br><span class="line"> * <span class="doctag">@category</span> Input</span><br><span class="line"> * Mouse wheel event triggered by Crafty.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@trigger</span> MouseWheelScroll - is triggered when mouse is scrolled on stage - { direction: +1 | -1} - Scroll direction (up | down)</span><br><span class="line"> *</span><br><span class="line"> * Internal method which dispatches mouse wheel events received by Crafty (crafty.stage.elem).</span><br><span class="line"> * The mouse wheel events get dispatched to Crafty, as well as all entities.</span><br><span class="line"> *</span><br><span class="line"> * The native event parameter is passed to the callback.</span><br><span class="line"> * You can read more about the native `mousewheel` event (all browsers except Firefox) https://developer.mozilla.org/en-US/docs/Web/Events/mousewheel</span><br><span class="line"> * or the native `DOMMouseScroll` event (Firefox only) https://developer.mozilla.org/en-US/docs/Web/Events/DOMMouseScroll .</span><br><span class="line"> *</span><br><span class="line"> * Note that the wheel delta properties of the event vary in magnitude across browsers, thus it is recommended to check for `.direction` instead.</span><br><span class="line"> * The `.direction` equals `+1` if wheel was scrolled up, `-1` if wheel was scrolled down.</span><br><span class="line"> * See http://stackoverflow.com/questions/5527601/normalizing-mousewheel-speed-across-browsers .</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@example</span></span><br><span class="line"> *</span></span><br></pre></td></tr></table></figure>

     * Crafty.bind(&quot;MouseWheelScroll&quot;, function(evt) {
     *     Crafty.viewport.scale(Crafty.viewport._scale * (1 + evt.direction * 0.1));
     * });
     * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">*</span>/</span><br><span class="line"> mouseWheelDispatch: function(e) {</span><br><span class="line">    e.direction = (e.detail <span class="variable">&lt; 0 || e.wheelDelta &gt;</span> 0) ? 1 : -1;</span><br><span class="line">    Crafty.trigger(<span class="string">&quot;MouseWheelScroll&quot;</span>, e);</span><br><span class="line"> },</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span>@</span><br><span class="line"> <span class="keyword">*</span> <span class="comment">#KeyboardEvent</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@category Input</span></span><br><span class="line"> <span class="keyword">*</span> Keyboard Event triggered by Crafty Core</span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@trigger KeyDown - is triggered for each entity when the DOM &apos;keydown&apos; event is triggered.</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@trigger KeyUp - is triggered for each entity when the DOM &apos;keyup&apos; event is triggered.</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@example</span></span><br><span class="line"> <span class="keyword">*</span></span><br></pre></td></tr></table></figure>

     * Crafty.e(&quot;2D, DOM, Color&quot;)
     *   .attr({x: 100, y: 100, w: 50, h: 50})
     *   .color(&quot;red&quot;)
     *   .bind(&apos;KeyDown&apos;, function(e) {
     *     if(e.key == Crafty.keys.LEFT_ARROW) {
     *       this.x = this.x-1;
     *     } else if (e.key == Crafty.keys.RIGHT_ARROW) {
     *       this.x = this.x+1;
     *     } else if (e.key == Crafty.keys.UP_ARROW) {
     *       this.y = this.y-1;
     *     } else if (e.key == Crafty.keys.DOWN_ARROW) {
     *       this.y = this.y+1;
     *     }
     *   });
     * <figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line">     *</span><br><span class="line">     * <span class="annotation">@see</span> Crafty.keys</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #Crafty.eventObject</span><br><span class="line">     * <span class="doctag">@category</span> Input</span><br><span class="line">     *</span><br><span class="line">     * Event Object used in Crafty for cross browser compatibility</span><br><span class="line">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.key</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.eventObject</span><br><span class="line">     *</span><br><span class="line">     * Unicode of the key pressed</span><br><span class="line">     */</span></span><br><span class="line">    keyboardDispatch: function (e) {</span><br><span class="line">        <span class="comment">// Use a Crafty-standard event object to avoid cross-browser issues</span></span><br><span class="line">        var original = e,</span><br><span class="line">            evnt = {},</span><br><span class="line">            props = <span class="string">&quot;char charCode keyCode type shiftKey ctrlKey metaKey timestamp&quot;</span>.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (var i = props.length; i;) {</span><br><span class="line">            var prop = props[--i];</span><br><span class="line">            evnt[prop] = original[prop];</span><br><span class="line">        }</span><br><span class="line">        evnt.which = original.charCode !== <span class="keyword">null</span> ? original.charCode : original.keyCode;</span><br><span class="line">        evnt.key = original.keyCode || original.which;</span><br><span class="line">        evnt.originalEvent = original;</span><br><span class="line">        e = evnt;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (e.type === <span class="string">&quot;keydown&quot;</span>) {</span><br><span class="line">            <span class="keyword">if</span> (Crafty.keydown[e.key] !== <span class="keyword">true</span>) {</span><br><span class="line">                Crafty.keydown[e.key] = <span class="keyword">true</span>;</span><br><span class="line">                Crafty.trigger(<span class="string">&quot;KeyDown&quot;</span>, e);</span><br><span class="line">            }</span><br><span class="line">        } <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(e.type === <span class="string">&quot;keyup&quot;</span>)</span> </span>{</span><br><span class="line">            delete Crafty.keydown[e.key];</span><br><span class="line">            Crafty.trigger(<span class="string">&quot;KeyUp&quot;</span>, e);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//prevent default actions for all keys except backspace and F1-F12 and except actions in INPUT and TEXTAREA.</span></span><br><span class="line">        <span class="comment">//prevent bubbling up for all keys except backspace and F1-F12.</span></span><br><span class="line">        <span class="comment">//Among others this prevent the arrow keys from scrolling the parent page</span></span><br><span class="line">        <span class="comment">//of an iframe hosting the game</span></span><br><span class="line">        <span class="keyword">if</span> (Crafty.selected &amp;&amp; !(e.key == <span class="number">8</span> || e.key &gt;= <span class="number">112</span> &amp;&amp; e.key &lt;= <span class="number">135</span>)) {</span><br><span class="line">            <span class="keyword">if</span> (original.stopPropagation) original.stopPropagation();</span><br><span class="line">            <span class="keyword">else</span> original.cancelBubble = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//Don&apos;t prevent default actions if target node is input or textarea.</span></span><br><span class="line">            <span class="keyword">if</span> (original.<span class="keyword">target</span> &amp;&amp; original.<span class="keyword">target</span>.nodeName !== <span class="string">&apos;INPUT&apos;</span> &amp;&amp; original.<span class="keyword">target</span>.nodeName !== <span class="string">&apos;TEXTAREA&apos;</span>) {</span><br><span class="line">                <span class="keyword">if</span> (original.preventDefault) {</span><br><span class="line">                    original.preventDefault();</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    original.returnValue = <span class="keyword">false</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">//initialize the input events onload</span></span><br><span class="line">Crafty._preBind(<span class="string">&quot;Load&quot;</span>, function () {</span><br><span class="line">    Crafty.addEvent(<span class="keyword">this</span>, <span class="string">&quot;keydown&quot;</span>, Crafty.keyboardDispatch);</span><br><span class="line">    Crafty.addEvent(<span class="keyword">this</span>, <span class="string">&quot;keyup&quot;</span>, Crafty.keyboardDispatch);</span><br><span class="line"></span><br><span class="line">    Crafty.addEvent(<span class="keyword">this</span>, Crafty.stage.elem, <span class="string">&quot;mousedown&quot;</span>, Crafty.mouseDispatch);</span><br><span class="line">    Crafty.addEvent(<span class="keyword">this</span>, Crafty.stage.elem, <span class="string">&quot;mouseup&quot;</span>, Crafty.mouseDispatch);</span><br><span class="line">    Crafty.addEvent(<span class="keyword">this</span>, document.body, <span class="string">&quot;mouseup&quot;</span>, Crafty.detectBlur);</span><br><span class="line">    Crafty.addEvent(<span class="keyword">this</span>, window, <span class="string">&quot;blur&quot;</span>, Crafty.resetKeyDown);</span><br><span class="line">    Crafty.addEvent(<span class="keyword">this</span>, Crafty.stage.elem, <span class="string">&quot;mousemove&quot;</span>, Crafty.mouseDispatch);</span><br><span class="line">    Crafty.addEvent(<span class="keyword">this</span>, Crafty.stage.elem, <span class="string">&quot;click&quot;</span>, Crafty.mouseDispatch);</span><br><span class="line">    Crafty.addEvent(<span class="keyword">this</span>, Crafty.stage.elem, <span class="string">&quot;dblclick&quot;</span>, Crafty.mouseDispatch);</span><br><span class="line"></span><br><span class="line">    Crafty.addEvent(<span class="keyword">this</span>, Crafty.stage.elem, <span class="string">&quot;touchstart&quot;</span>, Crafty.touchDispatch);</span><br><span class="line">    Crafty.addEvent(<span class="keyword">this</span>, Crafty.stage.elem, <span class="string">&quot;touchmove&quot;</span>, Crafty.touchDispatch);</span><br><span class="line">    Crafty.addEvent(<span class="keyword">this</span>, Crafty.stage.elem, <span class="string">&quot;touchend&quot;</span>, Crafty.touchDispatch);</span><br><span class="line">    Crafty.addEvent(<span class="keyword">this</span>, Crafty.stage.elem, <span class="string">&quot;touchcancel&quot;</span>, Crafty.touchDispatch);</span><br><span class="line">    Crafty.addEvent(<span class="keyword">this</span>, Crafty.stage.elem, <span class="string">&quot;touchleave&quot;</span>, Crafty.touchDispatch);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Crafty.support.prefix === <span class="string">&quot;Moz&quot;</span>) <span class="comment">// mouse wheel event for firefox</span></span><br><span class="line">        Crafty.addEvent(<span class="keyword">this</span>, Crafty.stage.elem, <span class="string">&quot;DOMMouseScroll&quot;</span>, Crafty.mouseWheelDispatch);</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">// mouse wheel event for rest of browsers</span></span><br><span class="line">        Crafty.addEvent(<span class="keyword">this</span>, Crafty.stage.elem, <span class="string">&quot;mousewheel&quot;</span>, Crafty.mouseWheelDispatch);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">Crafty._preBind(<span class="string">&quot;CraftyStop&quot;</span>, function () {</span><br><span class="line">    Crafty.removeEvent(<span class="keyword">this</span>, <span class="string">&quot;keydown&quot;</span>, Crafty.keyboardDispatch);</span><br><span class="line">    Crafty.removeEvent(<span class="keyword">this</span>, <span class="string">&quot;keyup&quot;</span>, Crafty.keyboardDispatch);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Crafty.stage) {</span><br><span class="line">        Crafty.removeEvent(<span class="keyword">this</span>, Crafty.stage.elem, <span class="string">&quot;mousedown&quot;</span>, Crafty.mouseDispatch);</span><br><span class="line">        Crafty.removeEvent(<span class="keyword">this</span>, Crafty.stage.elem, <span class="string">&quot;mouseup&quot;</span>, Crafty.mouseDispatch);</span><br><span class="line">        Crafty.removeEvent(<span class="keyword">this</span>, Crafty.stage.elem, <span class="string">&quot;mousemove&quot;</span>, Crafty.mouseDispatch);</span><br><span class="line">        Crafty.removeEvent(<span class="keyword">this</span>, Crafty.stage.elem, <span class="string">&quot;click&quot;</span>, Crafty.mouseDispatch);</span><br><span class="line">        Crafty.removeEvent(<span class="keyword">this</span>, Crafty.stage.elem, <span class="string">&quot;dblclick&quot;</span>, Crafty.mouseDispatch);</span><br><span class="line"></span><br><span class="line">        Crafty.removeEvent(<span class="keyword">this</span>, Crafty.stage.elem, <span class="string">&quot;touchstart&quot;</span>, Crafty.touchDispatch);</span><br><span class="line">        Crafty.removeEvent(<span class="keyword">this</span>, Crafty.stage.elem, <span class="string">&quot;touchmove&quot;</span>, Crafty.touchDispatch);</span><br><span class="line">        Crafty.removeEvent(<span class="keyword">this</span>, Crafty.stage.elem, <span class="string">&quot;touchend&quot;</span>, Crafty.touchDispatch);</span><br><span class="line">        Crafty.removeEvent(<span class="keyword">this</span>, Crafty.stage.elem, <span class="string">&quot;touchcancel&quot;</span>, Crafty.touchDispatch);</span><br><span class="line">        Crafty.removeEvent(<span class="keyword">this</span>, Crafty.stage.elem, <span class="string">&quot;touchleave&quot;</span>, Crafty.touchDispatch);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Crafty.support.prefix === <span class="string">&quot;Moz&quot;</span>) <span class="comment">// mouse wheel event for firefox</span></span><br><span class="line">            Crafty.removeEvent(<span class="keyword">this</span>, Crafty.stage.elem, <span class="string">&quot;DOMMouseScroll&quot;</span>, Crafty.mouseWheelDispatch);</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">// mouse wheel event for rest of browsers</span></span><br><span class="line">            Crafty.removeEvent(<span class="keyword">this</span>, Crafty.stage.elem, <span class="string">&quot;mousewheel&quot;</span>, Crafty.mouseWheelDispatch);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    Crafty.removeEvent(<span class="keyword">this</span>, document.body, <span class="string">&quot;mouseup&quot;</span>, Crafty.detectBlur);</span><br><span class="line">    Crafty.removeEvent(<span class="keyword">this</span>, window, <span class="string">&quot;blur&quot;</span>, Crafty.resetKeyDown);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Mouse</span><br><span class="line"> * <span class="doctag">@category</span> Input</span><br><span class="line"> *</span><br><span class="line"> * Provides the entity with mouse related events</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@trigger</span> MouseOver - when the mouse enters - MouseEvent</span><br><span class="line"> * <span class="doctag">@trigger</span> MouseOut - when the mouse leaves - MouseEvent</span><br><span class="line"> * <span class="doctag">@trigger</span> MouseDown - when the mouse button is pressed on - MouseEvent</span><br><span class="line"> * <span class="doctag">@trigger</span> MouseUp - when the mouse button is released on - MouseEvent</span><br><span class="line"> * <span class="doctag">@trigger</span> Click - when the user clicks - MouseEvent</span><br><span class="line"> * <span class="doctag">@trigger</span> DoubleClick - when the user double clicks - MouseEvent</span><br><span class="line"> * <span class="doctag">@trigger</span> MouseMove - when the mouse is over and moves - MouseEvent</span><br><span class="line"> *</span><br><span class="line"> * If you do not add this component, mouse events will not be triggered on an entity.</span><br><span class="line"> *</span><br><span class="line"> * You can read more about the MouseEvent, which is the parameter passed to the callback.</span><br><span class="line"> * https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent</span><br><span class="line"> *</span><br><span class="line"> * Crafty will add the mouseButton property to MouseEvents that match one of</span><br><span class="line"> *</span><br><span class="line"> * - Crafty.mouseButtons.LEFT</span><br><span class="line"> * - Crafty.mouseButtons.RIGHT</span><br><span class="line"> * - Crafty.mouseButtons.MIDDLE</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@note</span> If you&apos;re targeting mobile, you should know that by default Crafty turns touch events into mouse events, </span><br><span class="line"> * making mouse dependent components work with touch. However, if you need multitouch, you&apos;ll have </span><br><span class="line"> * to make use of the Touch component instead, which can break compatibility with things which directly interact with the Mouse component.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@example</span></span><br><span class="line"> *</span></span><br></pre></td></tr></table></figure>

 * var myEntity = Crafty.e(&apos;2D, Canvas, Color, Mouse&apos;)
 * .attr({x: 10, y: 10, w: 40, h: 40})
 * .color(&apos;red&apos;)
 * .bind(&apos;Click&apos;, function(MouseEvent){
 *   alert(&apos;clicked&apos;, MouseEvent);
 * });
 *
 * myEntity.bind(&apos;MouseUp&apos;, function(e) {
 *    if( e.mouseButton == Crafty.mouseButtons.RIGHT )
 *        Crafty.log(&quot;Clicked right button&quot;);
 * })
 * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">*</span> <span class="comment">@see Crafty.mouseDispatch</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@see Crafty.multitouch</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@see Crafty.touchDispatch</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@see Crafty.mouseButtons</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">Crafty.c(<span class="string">&quot;Mouse&quot;</span>, {</span><br><span class="line">    init: function () {</span><br><span class="line">        Crafty.mouseObjs++;</span><br><span class="line">        this.requires(<span class="string">&quot;AreaMap&quot;</span>)</span><br><span class="line">            .bind(<span class="string">&quot;Remove&quot;</span>, function () {</span><br><span class="line">                Crafty.mouseObjs--;</span><br><span class="line">            });</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span>@</span><br><span class="line"> <span class="keyword">*</span> <span class="comment">#Touch</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@category Input</span></span><br><span class="line"> <span class="keyword">*</span> Provides the entity with touch related events</span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@trigger TouchStart - when entity is touched - TouchPoint</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@trigger TouchMove - when finger is moved over entity - TouchPoint</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@trigger TouchCancel - when a touch event has been disrupted in some way - TouchPoint</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@trigger TouchEnd - when the finger is raised over the entity, or when finger leaves entity.  (Passes no data) - null</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> To be able to use multitouch, you must enable it with  `Crafty.multitouch(true)`.</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> If you don&apos;t need multitouch, you can probably use the Mouse component instead, since by default Crafty will trigger mouse events for touch input.</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> You can read more about the TouchEvent.</span><br><span class="line"> <span class="keyword">*</span> - [TouchEvent.touches and TouchEvent.changedTouches](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent)</span><br><span class="line"> <span class="keyword">*</span> - [TouchPoint](http://www.w3.org/TR/touch-events/<span class="comment">#dfn-active-touch-point) is the parameter passed to the event callback in the related touch.</span></span><br><span class="line"> <span class="keyword">*</span> </span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@example</span></span><br><span class="line"> <span class="keyword">*</span></span><br></pre></td></tr></table></figure>

 * Crafty.multitouch(true);
 * 
 * var myEntity = Crafty.e(&apos;2D, Canvas, Color, Touch&apos;)
 * .attr({x: 10, y: 10, w: 40, h: 40})
 * .color(&apos;green&apos;)
 * .bind(&apos;TouchStart&apos;, function(TouchPoint){
 *   Crafty.log(&apos;myEntity has been touched&apos;, TouchPoint);
 * }).bind(&apos;TouchMove&apos;, function(TouchPoint) {
 *   Crafty.log(&apos;Finger moved over myEntity at the { x: &apos; + TouchPoint.realX + &apos;, y: &apos; + TouchPoint.realY + &apos; } coordinates.&apos;);
 * }).bind(&apos;TouchEnd&apos;, function() {
 *   Crafty.log(&apos;Touch over myEntity has finished.&apos;);
 * });
 * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">*</span> <span class="comment">@see Crafty.multitouch</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@see Crafty.touchDispatch</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@see Crafty.mouseDispatch</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@see Crafty.mouseButtons</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">Crafty.c(<span class="string">&quot;Touch&quot;</span>, {</span><br><span class="line">    init: function () {</span><br><span class="line">        Crafty.touchObjs++;</span><br><span class="line">        this.requires(<span class="string">&quot;AreaMap&quot;</span>)</span><br><span class="line">            .bind(<span class="string">&quot;Remove&quot;</span>, function () {</span><br><span class="line">                Crafty.touchObjs--;</span><br><span class="line">            });</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span>@</span><br><span class="line"> <span class="keyword">*</span> <span class="comment">#AreaMap</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@category Input</span></span><br><span class="line"> <span class="keyword">*</span> Component used by Mouse and Touch.</span><br><span class="line"> <span class="keyword">*</span> Can be added to other entities for use with the Crafty.findClosestEntityByComponent method.</span><br><span class="line"> <span class="keyword">*</span> </span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@see Crafty.mouseDispatch</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@see Crafty.touchDispatch</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@see Crafty.mouseButtons</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@see Crafty.polygon</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">Crafty.c(<span class="string">&quot;AreaMap&quot;</span>, {</span><br><span class="line">    init: function () {</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    /<span class="keyword">*</span><span class="keyword">*</span>@</span><br><span class="line">     <span class="keyword">*</span> <span class="comment">#.areaMap</span></span><br><span class="line">     <span class="keyword">*</span> <span class="comment">@comp AreaMap</span></span><br><span class="line">     <span class="keyword">*</span></span><br><span class="line">     <span class="keyword">*</span> <span class="comment">@trigger NewAreaMap - when a new areaMap is assigned - Crafty.polygon</span></span><br><span class="line">     <span class="keyword">*</span></span><br><span class="line">     <span class="keyword">*</span> <span class="comment">@sign public this .areaMap(Crafty.polygon polygon)</span></span><br><span class="line">     <span class="keyword">*</span> <span class="comment">@param polygon - Instance of Crafty.polygon used to check if the mouse coordinates are inside this region</span></span><br><span class="line">     <span class="keyword">*</span></span><br><span class="line">     <span class="keyword">*</span> <span class="comment">@sign public this .areaMap(Array coordinatePairs)</span></span><br><span class="line">     <span class="keyword">*</span> <span class="comment">@param coordinatePairs - Array of `x`, `y` coordinate pairs to generate a polygon</span></span><br><span class="line">     <span class="keyword">*</span></span><br><span class="line">     <span class="keyword">*</span> <span class="comment">@sign public this .areaMap(x1, y1,.., xN, yN)</span></span><br><span class="line">     <span class="keyword">*</span> <span class="comment">@param point# - List of `x`, `y` coordinate pairs to generate a polygon</span></span><br><span class="line">     <span class="keyword">*</span></span><br><span class="line">     <span class="keyword">*</span> Assign a polygon to the entity so that pointer (mouse or touch) events will only be triggered if</span><br><span class="line">     <span class="keyword">*</span> the coordinates are inside the given polygon.</span><br><span class="line">     <span class="keyword">*</span></span><br><span class="line">     <span class="keyword">*</span> <span class="comment">@example</span></span><br><span class="line">     <span class="keyword">*</span></span><br></pre></td></tr></table></figure>

     * Crafty.e(&quot;2D, DOM, Color, Mouse&quot;)
     *     .color(&quot;red&quot;)
     *     .attr({ w: 100, h: 100 })
     *     .bind(&apos;MouseOver&apos;, function() {Crafty.log(&quot;over&quot;)})
     *     .areaMap(0, 0, 50, 0, 50, 50, 0, 50);
     *
     * Crafty.e(&quot;2D, Mouse&quot;)
     *     .areaMap([0, 0, 50, 0, 50, 50, 0, 50]);
     *
     * Crafty.e(&quot;2D, Mouse&quot;).areaMap(
     *     new Crafty.polygon([0, 0, 50, 0, 50, 50, 0, 50])
     * );
     * <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line">     *</span><br><span class="line">     * @see Crafty.polygon</span><br><span class="line">     */</span><br><span class="line">    areaMap: <span class="function"><span class="keyword">function</span> <span class="params">(poly)</span> </span>{</span><br><span class="line">        <span class="comment">//create polygon</span></span><br><span class="line">        <span class="keyword">if</span> (arguments.length &gt; <span class="number">1</span>) {</span><br><span class="line">            <span class="comment">//convert args to array to create polygon</span></span><br><span class="line">            <span class="keyword">var</span> args = Array.prototype.slice.call(arguments, <span class="number">0</span>);</span><br><span class="line">            poly = <span class="keyword">new</span> Crafty.polygon(args);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (poly.constructor === Array) {</span><br><span class="line">            poly = <span class="keyword">new</span> Crafty.polygon(poly.slice());</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            poly = poly.clone();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        poly.shift(<span class="keyword">this</span>._x, <span class="keyword">this</span>._y);</span><br><span class="line">        <span class="keyword">this</span>.mapArea = poly;</span><br><span class="line">        <span class="keyword">this</span>.attach(<span class="keyword">this</span>.mapArea);</span><br><span class="line">        <span class="keyword">this</span>.trigger(<span class="string">&quot;NewAreaMap&quot;</span>, poly);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Button</span><br><span class="line"> * @category Input</span><br><span class="line"> * Provides the entity with touch or mouse functionality, depending on whether this is a pc </span><br><span class="line"> * or mobile device, and also on multitouch configuration.</span><br><span class="line"> * </span><br><span class="line"> * @see Crafty.multitouch</span><br><span class="line"> */</span></span><br><span class="line">Crafty.c(<span class="string">&quot;Button&quot;</span>, {</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">var</span> req = (!Crafty.mobile || (Crafty.mobile &amp;&amp; !Crafty.multitouch())) ? <span class="string">&quot;Mouse&quot;</span> : <span class="string">&quot;Touch&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>.requires(req);</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #MouseDrag</span><br><span class="line"> * @category Input</span><br><span class="line"> * Provides the entity with drag and drop mouse events.</span><br><span class="line"> * @trigger Dragging - is triggered each frame the entity is being dragged - MouseEvent</span><br><span class="line"> * @trigger StartDrag - is triggered when dragging begins - MouseEvent</span><br><span class="line"> * @trigger StopDrag - is triggered when dragging ends - MouseEvent</span><br><span class="line"> *</span><br><span class="line"> * @see Mouse</span><br><span class="line"> */</span></span><br><span class="line">Crafty.c(<span class="string">&quot;MouseDrag&quot;</span>, {</span><br><span class="line">    _dragging: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//<span class="doctag">Note:</span> the code is not tested with zoom, etc., that may distort the direction between the viewport and the coordinate on the canvas.</span></span><br><span class="line">    init: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.requires(<span class="string">&quot;Mouse&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.bind(<span class="string">&quot;MouseDown&quot;</span>, <span class="keyword">this</span>._ondown);</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    remove: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.unbind(<span class="string">&quot;MouseDown&quot;</span>, <span class="keyword">this</span>._ondown);</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">// When dragging is enabled, this method is bound to the MouseDown crafty event</span></span><br><span class="line">    _ondown: <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (e.mouseButton !== Crafty.mouseButtons.LEFT) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">this</span>.startDrag(e);</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">// While a drag is occurring, this method is bound to the mousemove DOM event</span></span><br><span class="line">    _ondrag: <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>{</span><br><span class="line">        <span class="comment">// ignore invalid 0 position - strange problem on ipad</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>._dragging || e.realX === <span class="number">0</span> || e.realY === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">this</span>.trigger(<span class="string">&quot;Dragging&quot;</span>, e);</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">// While a drag is occurring, this method is bound to mouseup DOM event</span></span><br><span class="line">    _onup: <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (e.mouseButton !== Crafty.mouseButtons.LEFT) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">this</span>.stopDrag(e);</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.startDrag</span><br><span class="line">     * @comp MouseDrag</span><br><span class="line">     * @sign public this .startDrag(void)</span><br><span class="line">     *</span><br><span class="line">     * Make the entity produce drag events, essentially making the entity follow the mouse positions.</span><br><span class="line">     *</span><br><span class="line">     * @see .stopDrag</span><br><span class="line">     */</span></span><br><span class="line">    startDrag: <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._dragging) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">this</span>._dragging = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        Crafty.addEvent(<span class="keyword">this</span>, Crafty.stage.elem, <span class="string">&quot;mousemove&quot;</span>, <span class="keyword">this</span>._ondrag);</span><br><span class="line">        Crafty.addEvent(<span class="keyword">this</span>, Crafty.stage.elem, <span class="string">&quot;mouseup&quot;</span>, <span class="keyword">this</span>._onup);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if event undefined, use the last known position of the mouse</span></span><br><span class="line">        <span class="keyword">this</span>.trigger(<span class="string">&quot;StartDrag&quot;</span>, e || Crafty.lastEvent);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.stopDrag</span><br><span class="line">     * @comp MouseDrag</span><br><span class="line">     * @sign public this .stopDrag(void)</span><br><span class="line">     *</span><br><span class="line">     * Stop the entity from producing drag events, essentially reproducing the drop.</span><br><span class="line">     *</span><br><span class="line">     * @see .startDrag</span><br><span class="line">     */</span></span><br><span class="line">    stopDrag: <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>._dragging) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">this</span>._dragging = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        Crafty.removeEvent(<span class="keyword">this</span>, Crafty.stage.elem, <span class="string">&quot;mousemove&quot;</span>, <span class="keyword">this</span>._ondrag);</span><br><span class="line">        Crafty.removeEvent(<span class="keyword">this</span>, Crafty.stage.elem, <span class="string">&quot;mouseup&quot;</span>, <span class="keyword">this</span>._onup);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if event undefined, use the last known position of the mouse</span></span><br><span class="line">        <span class="keyword">this</span>.trigger(<span class="string">&quot;StopDrag&quot;</span>, e || Crafty.lastEvent);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Keyboard</span><br><span class="line"> * @category Input</span><br><span class="line"> *</span><br><span class="line"> * Give entities keyboard events (`Keydown` and `Keyup`).</span><br><span class="line"> *</span><br><span class="line"> * In particular, changes to the key state are broadcasted by `KeyboardEvent`s; interested entities can bind to these events.</span><br><span class="line"> *</span><br><span class="line"> * The current state (pressed/released) of a key can also be queried using the `.isDown` method.</span><br><span class="line"> *</span><br><span class="line"> * All available key codes are described in `Crafty.keys`.</span><br><span class="line"> *</span><br><span class="line"> * @see KeyboardEvent</span><br><span class="line"> * @see Crafty.keys</span><br><span class="line"> */</span></span><br><span class="line">Crafty.c(<span class="string">&quot;Keyboard&quot;</span>, {</span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.isDown</span><br><span class="line">     * @comp Keyboard</span><br><span class="line">     * @sign public Boolean isDown(String keyName)</span><br><span class="line">     * @param keyName - Name of the key to check. See `Crafty.keys`.</span><br><span class="line">     * @sign public Boolean isDown(Number keyCode)</span><br><span class="line">     * @param keyCode - Key code in `Crafty.keys`.</span><br><span class="line">     *</span><br><span class="line">     * Determine if a certain key is currently down.</span><br><span class="line">     *</span><br><span class="line">     * @example</span><br><span class="line">     *</span></span><br></pre></td></tr></table></figure>

     * entity.requires(&apos;Keyboard&apos;).bind(&apos;KeyDown&apos;, function () { if (this.isDown(&apos;SPACE&apos;)) jump(); });
     * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">     <span class="keyword">*</span></span><br><span class="line">     <span class="keyword">*</span> <span class="comment">@see Crafty.keys</span></span><br><span class="line">     <span class="keyword">*</span>/</span><br><span class="line">    isDown: function (key) {</span><br><span class="line">        if (typeof key === <span class="string">&quot;string&quot;</span>) {</span><br><span class="line">            key = Crafty.keys[key];</span><br><span class="line">        }</span><br><span class="line">        return !!Crafty.keydown[key];</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">},{<span class="string">&quot;../core/core.js&quot;</span>:7}],5:[function(require,module,exports){</span><br><span class="line">var Crafty = require(&apos;../core/core.js&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Crafty.extend({</span><br><span class="line">    /<span class="keyword">*</span><span class="keyword">*</span>@</span><br><span class="line">     <span class="keyword">*</span> <span class="comment">#Crafty.keys</span></span><br><span class="line">     <span class="keyword">*</span> <span class="comment">@category Input</span></span><br><span class="line">     <span class="keyword">*</span> Object of key names and the corresponding key code.</span><br><span class="line">     <span class="keyword">*</span></span><br><span class="line">     <span class="keyword">*</span></span><br></pre></td></tr></table></figure>

     * BACKSPACE: 8,
     * TAB: 9,
     * ENTER: 13,
     * PAUSE: 19,
     * CAPS: 20,
     * ESC: 27,
     * SPACE: 32,
     * PAGE_UP: 33,
     * PAGE_DOWN: 34,
     * END: 35,
     * HOME: 36,
     * LEFT_ARROW: 37,
     * UP_ARROW: 38,
     * RIGHT_ARROW: 39,
     * DOWN_ARROW: 40,
     * INSERT: 45,
     * DELETE: 46,
     * 0: 48,
     * 1: 49,
     * 2: 50,
     * 3: 51,
     * 4: 52,
     * 5: 53,
     * 6: 54,
     * 7: 55,
     * 8: 56,
     * 9: 57,
     * A: 65,
     * B: 66,
     * C: 67,
     * D: 68,
     * E: 69,
     * F: 70,
     * G: 71,
     * H: 72,
     * I: 73,
     * J: 74,
     * K: 75,
     * L: 76,
     * M: 77,
     * N: 78,
     * O: 79,
     * P: 80,
     * Q: 81,
     * R: 82,
     * S: 83,
     * T: 84,
     * U: 85,
     * V: 86,
     * W: 87,
     * X: 88,
     * Y: 89,
     * Z: 90,
     * NUMPAD_0: 96,
     * NUMPAD_1: 97,
     * NUMPAD_2: 98,
     * NUMPAD_3: 99,
     * NUMPAD_4: 100,
     * NUMPAD_5: 101,
     * NUMPAD_6: 102,
     * NUMPAD_7: 103,
     * NUMPAD_8: 104,
     * NUMPAD_9: 105,
     * MULTIPLY: 106,
     * ADD: 107,
     * SUBSTRACT: 109,
     * DECIMAL: 110,
     * DIVIDE: 111,
     * F1: 112,
     * F2: 113,
     * F3: 114,
     * F4: 115,
     * F5: 116,
     * F6: 117,
     * F7: 118,
     * F8: 119,
     * F9: 120,
     * F10: 121,
     * F11: 122,
     * F12: 123,
     * SHIFT: 16,
     * CTRL: 17,
     * ALT: 18,
     * PLUS: 187,
     * COMMA: 188,
     * MINUS: 189,
     * PERIOD: 190,
     * PULT_UP: 29460,
     * PULT_DOWN: 29461,
     * PULT_LEFT: 4,
     * PULT_RIGHT&apos;: 5
     * <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"> */</span><br><span class="line"><span class="string">keys:</span> {</span><br><span class="line">    <span class="string">&apos;BACKSPACE&apos;</span>: <span class="number">8</span>,</span><br><span class="line">    <span class="string">&apos;TAB&apos;</span>: <span class="number">9</span>,</span><br><span class="line">    <span class="string">&apos;ENTER&apos;</span>: <span class="number">13</span>,</span><br><span class="line">    <span class="string">&apos;PAUSE&apos;</span>: <span class="number">19</span>,</span><br><span class="line">    <span class="string">&apos;CAPS&apos;</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="string">&apos;ESC&apos;</span>: <span class="number">27</span>,</span><br><span class="line">    <span class="string">&apos;SPACE&apos;</span>: <span class="number">32</span>,</span><br><span class="line">    <span class="string">&apos;PAGE_UP&apos;</span>: <span class="number">33</span>,</span><br><span class="line">    <span class="string">&apos;PAGE_DOWN&apos;</span>: <span class="number">34</span>,</span><br><span class="line">    <span class="string">&apos;END&apos;</span>: <span class="number">35</span>,</span><br><span class="line">    <span class="string">&apos;HOME&apos;</span>: <span class="number">36</span>,</span><br><span class="line">    <span class="string">&apos;LEFT_ARROW&apos;</span>: <span class="number">37</span>,</span><br><span class="line">    <span class="string">&apos;UP_ARROW&apos;</span>: <span class="number">38</span>,</span><br><span class="line">    <span class="string">&apos;RIGHT_ARROW&apos;</span>: <span class="number">39</span>,</span><br><span class="line">    <span class="string">&apos;DOWN_ARROW&apos;</span>: <span class="number">40</span>,</span><br><span class="line">    <span class="string">&apos;INSERT&apos;</span>: <span class="number">45</span>,</span><br><span class="line">    <span class="string">&apos;DELETE&apos;</span>: <span class="number">46</span>,</span><br><span class="line">    <span class="string">&apos;0&apos;</span>: <span class="number">48</span>,</span><br><span class="line">    <span class="string">&apos;1&apos;</span>: <span class="number">49</span>,</span><br><span class="line">    <span class="string">&apos;2&apos;</span>: <span class="number">50</span>,</span><br><span class="line">    <span class="string">&apos;3&apos;</span>: <span class="number">51</span>,</span><br><span class="line">    <span class="string">&apos;4&apos;</span>: <span class="number">52</span>,</span><br><span class="line">    <span class="string">&apos;5&apos;</span>: <span class="number">53</span>,</span><br><span class="line">    <span class="string">&apos;6&apos;</span>: <span class="number">54</span>,</span><br><span class="line">    <span class="string">&apos;7&apos;</span>: <span class="number">55</span>,</span><br><span class="line">    <span class="string">&apos;8&apos;</span>: <span class="number">56</span>,</span><br><span class="line">    <span class="string">&apos;9&apos;</span>: <span class="number">57</span>,</span><br><span class="line">    <span class="string">&apos;A&apos;</span>: <span class="number">65</span>,</span><br><span class="line">    <span class="string">&apos;B&apos;</span>: <span class="number">66</span>,</span><br><span class="line">    <span class="string">&apos;C&apos;</span>: <span class="number">67</span>,</span><br><span class="line">    <span class="string">&apos;D&apos;</span>: <span class="number">68</span>,</span><br><span class="line">    <span class="string">&apos;E&apos;</span>: <span class="number">69</span>,</span><br><span class="line">    <span class="string">&apos;F&apos;</span>: <span class="number">70</span>,</span><br><span class="line">    <span class="string">&apos;G&apos;</span>: <span class="number">71</span>,</span><br><span class="line">    <span class="string">&apos;H&apos;</span>: <span class="number">72</span>,</span><br><span class="line">    <span class="string">&apos;I&apos;</span>: <span class="number">73</span>,</span><br><span class="line">    <span class="string">&apos;J&apos;</span>: <span class="number">74</span>,</span><br><span class="line">    <span class="string">&apos;K&apos;</span>: <span class="number">75</span>,</span><br><span class="line">    <span class="string">&apos;L&apos;</span>: <span class="number">76</span>,</span><br><span class="line">    <span class="string">&apos;M&apos;</span>: <span class="number">77</span>,</span><br><span class="line">    <span class="string">&apos;N&apos;</span>: <span class="number">78</span>,</span><br><span class="line">    <span class="string">&apos;O&apos;</span>: <span class="number">79</span>,</span><br><span class="line">    <span class="string">&apos;P&apos;</span>: <span class="number">80</span>,</span><br><span class="line">    <span class="string">&apos;Q&apos;</span>: <span class="number">81</span>,</span><br><span class="line">    <span class="string">&apos;R&apos;</span>: <span class="number">82</span>,</span><br><span class="line">    <span class="string">&apos;S&apos;</span>: <span class="number">83</span>,</span><br><span class="line">    <span class="string">&apos;T&apos;</span>: <span class="number">84</span>,</span><br><span class="line">    <span class="string">&apos;U&apos;</span>: <span class="number">85</span>,</span><br><span class="line">    <span class="string">&apos;V&apos;</span>: <span class="number">86</span>,</span><br><span class="line">    <span class="string">&apos;W&apos;</span>: <span class="number">87</span>,</span><br><span class="line">    <span class="string">&apos;X&apos;</span>: <span class="number">88</span>,</span><br><span class="line">    <span class="string">&apos;Y&apos;</span>: <span class="number">89</span>,</span><br><span class="line">    <span class="string">&apos;Z&apos;</span>: <span class="number">90</span>,</span><br><span class="line">    <span class="string">&apos;NUMPAD_0&apos;</span>: <span class="number">96</span>,</span><br><span class="line">    <span class="string">&apos;NUMPAD_1&apos;</span>: <span class="number">97</span>,</span><br><span class="line">    <span class="string">&apos;NUMPAD_2&apos;</span>: <span class="number">98</span>,</span><br><span class="line">    <span class="string">&apos;NUMPAD_3&apos;</span>: <span class="number">99</span>,</span><br><span class="line">    <span class="string">&apos;NUMPAD_4&apos;</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="string">&apos;NUMPAD_5&apos;</span>: <span class="number">101</span>,</span><br><span class="line">    <span class="string">&apos;NUMPAD_6&apos;</span>: <span class="number">102</span>,</span><br><span class="line">    <span class="string">&apos;NUMPAD_7&apos;</span>: <span class="number">103</span>,</span><br><span class="line">    <span class="string">&apos;NUMPAD_8&apos;</span>: <span class="number">104</span>,</span><br><span class="line">    <span class="string">&apos;NUMPAD_9&apos;</span>: <span class="number">105</span>,</span><br><span class="line">    <span class="string">&apos;MULTIPLY&apos;</span>: <span class="number">106</span>,</span><br><span class="line">    <span class="string">&apos;ADD&apos;</span>: <span class="number">107</span>,</span><br><span class="line">    <span class="string">&apos;SUBSTRACT&apos;</span>: <span class="number">109</span>,</span><br><span class="line">    <span class="string">&apos;DECIMAL&apos;</span>: <span class="number">110</span>,</span><br><span class="line">    <span class="string">&apos;DIVIDE&apos;</span>: <span class="number">111</span>,</span><br><span class="line">    <span class="string">&apos;F1&apos;</span>: <span class="number">112</span>,</span><br><span class="line">    <span class="string">&apos;F2&apos;</span>: <span class="number">113</span>,</span><br><span class="line">    <span class="string">&apos;F3&apos;</span>: <span class="number">114</span>,</span><br><span class="line">    <span class="string">&apos;F4&apos;</span>: <span class="number">115</span>,</span><br><span class="line">    <span class="string">&apos;F5&apos;</span>: <span class="number">116</span>,</span><br><span class="line">    <span class="string">&apos;F6&apos;</span>: <span class="number">117</span>,</span><br><span class="line">    <span class="string">&apos;F7&apos;</span>: <span class="number">118</span>,</span><br><span class="line">    <span class="string">&apos;F8&apos;</span>: <span class="number">119</span>,</span><br><span class="line">    <span class="string">&apos;F9&apos;</span>: <span class="number">120</span>,</span><br><span class="line">    <span class="string">&apos;F10&apos;</span>: <span class="number">121</span>,</span><br><span class="line">    <span class="string">&apos;F11&apos;</span>: <span class="number">122</span>,</span><br><span class="line">    <span class="string">&apos;F12&apos;</span>: <span class="number">123</span>,</span><br><span class="line">    <span class="string">&apos;SHIFT&apos;</span>: <span class="number">16</span>,</span><br><span class="line">    <span class="string">&apos;CTRL&apos;</span>: <span class="number">17</span>,</span><br><span class="line">    <span class="string">&apos;ALT&apos;</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="string">&apos;PLUS&apos;</span>: <span class="number">187</span>,</span><br><span class="line">    <span class="string">&apos;COMMA&apos;</span>: <span class="number">188</span>,</span><br><span class="line">    <span class="string">&apos;MINUS&apos;</span>: <span class="number">189</span>,</span><br><span class="line">    <span class="string">&apos;PERIOD&apos;</span>: <span class="number">190</span>,</span><br><span class="line">    <span class="string">&apos;PULT_UP&apos;</span>: <span class="number">29460</span>,</span><br><span class="line">    <span class="string">&apos;PULT_DOWN&apos;</span>: <span class="number">29461</span>,</span><br><span class="line">    <span class="string">&apos;PULT_LEFT&apos;</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="string">&apos;PULT_RIGHT&apos;</span>: <span class="number">5</span></span><br><span class="line"></span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Crafty.mouseButtons</span><br><span class="line"> * <span class="doctag">@category</span> Input</span><br><span class="line"> * An object mapping mouseButton names to the corresponding button ID.</span><br><span class="line"> * In all mouseEvents, we add the `e.mouseButton` property with a value normalized to match e.button of modern webkit browsers:</span><br><span class="line"> *</span><br><span class="line"> *</span></span><br></pre></td></tr></table></figure>

     * LEFT: 0,
     * MIDDLE: 1,
     * RIGHT: 2
     * <figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">     */</span><br><span class="line">    mouseButtons: {</span><br><span class="line">        <span class="type">LEFT</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="type">MIDDLE</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="type">RIGHT</span>: <span class="number">2</span></span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line">},{<span class="string">&quot;../core/core.js&quot;</span>:<span class="number">7</span>}],<span class="number">6</span>:[function(require,module,exports){</span><br><span class="line">/**@</span><br><span class="line"> * <span class="comment">#Crafty.easing</span></span><br><span class="line"> * @category <span class="type">Animation</span></span><br><span class="line"> * </span><br><span class="line"> *</span><br><span class="line"> * <span class="type">An</span> <span class="keyword">object</span> <span class="keyword">for</span> tracking transitions.  <span class="type">Typically</span> used indirectly through <span class="string">&quot;SpriteAnimation&quot;</span>, <span class="string">&quot;Tween&quot;</span>, <span class="keyword">or</span> viewport animations.</span><br><span class="line"> * </span><br><span class="line"> * <span class="type">If</span> a <span class="keyword">method</span> allows you to specify the <span class="keyword">type</span> <span class="keyword">of</span> easing, you can <span class="keyword">do</span> so by providing a custom function <span class="keyword">or</span> a <span class="type">string</span> corresponding to the name <span class="keyword">of</span> a built-<span class="keyword">in</span> <span class="keyword">method</span>.</span><br><span class="line"> *</span><br><span class="line"> * <span class="type">Built</span>-<span class="keyword">in</span> easing functions are <span class="string">&quot;linear&quot;</span>, <span class="string">&quot;smoothStep&quot;</span>, <span class="string">&quot;smootherStep&quot;</span>, <span class="string">&quot;easeInQuad&quot;</span>, <span class="string">&quot;easeOutQuad&quot;</span>, <span class="keyword">and</span> <span class="string">&quot;easeInOutQuad&quot;</span>.</span><br><span class="line"> *</span><br><span class="line"> * A custom function will be passed a parameter `t` which will vary between <span class="number">0</span> <span class="keyword">and</span> <span class="number">1</span>, <span class="keyword">and</span> should <span class="keyword">return</span> the progress <span class="keyword">of</span> the animation between <span class="number">0</span> <span class="keyword">and</span> <span class="number">1</span>.</span><br><span class="line"> * @example</span><br><span class="line"> * <span class="type">Here</span> <span class="keyword">is</span> how you might use easing functions <span class="keyword">with</span> the <span class="string">&quot;Tween&quot;</span> component.</span><br><span class="line"> * ~</span><br></pre></td></tr></table></figure>

 * var e = Crafty.e(&quot;2D, Tween&quot;);
 * // Use built-in easing functions
 * e.tween({x:100}, 1000, &quot;smoothStep&quot;);
 * e.tween({y:100}, 1000, &quot;easeInQuad&quot;);
 * // Define a custom easing function: 2t^2 - t
 * e.tween({w:0}, 1000, function(t){return 2*t*t - t;});
 * <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"> * @see Tween, SpriteAnimation</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">var</span> easing = <span class="function"><span class="keyword">function</span><span class="params">(duration, easingFn)</span> </span>{</span><br><span class="line">	<span class="keyword">this</span>.timePerFrame = <span class="number">1000</span> / Crafty.timer.FPS();</span><br><span class="line">	<span class="keyword">this</span>.duration = duration;   <span class="comment">//default duration given in ms</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">typeof</span> easingFn === <span class="string">&quot;function&quot;</span>){</span><br><span class="line">		<span class="keyword">this</span>.easing_function = easingFn;</span><br><span class="line">	} <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> easingFn === <span class="string">&quot;string&quot;</span> &amp;&amp; <span class="keyword">this</span>.standardEasingFunctions[easingFn]){</span><br><span class="line">		<span class="keyword">this</span>.easing_function = <span class="keyword">this</span>.standardEasingFunctions[easingFn];</span><br><span class="line">	} <span class="keyword">else</span> {</span><br><span class="line">		<span class="keyword">this</span>.easing_function = <span class="keyword">this</span>.standardEasingFunctions.linear;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">this</span>.reset();</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">easing.prototype = {</span><br><span class="line">	duration: <span class="number">0</span>,</span><br><span class="line">	clock:<span class="number">0</span>,</span><br><span class="line">	steps: <span class="literal">null</span>,</span><br><span class="line">	complete: <span class="literal">false</span>,</span><br><span class="line">	paused: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">	<span class="comment">// init values</span></span><br><span class="line">	reset: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</span><br><span class="line">		<span class="keyword">this</span>.loops = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">this</span>.clock = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">this</span>.complete = <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">this</span>.paused = <span class="literal">false</span>;</span><br><span class="line">	},</span><br><span class="line"></span><br><span class="line">	repeat: <span class="function"><span class="keyword">function</span><span class="params">(loopCount)</span></span>{</span><br><span class="line">		<span class="keyword">this</span>.loops = loopCount;</span><br><span class="line">	},</span><br><span class="line"></span><br><span class="line">	setProgress: <span class="function"><span class="keyword">function</span><span class="params">(progress, loopCount)</span></span>{</span><br><span class="line">		<span class="keyword">this</span>.clock = <span class="keyword">this</span>.duration * progress;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">typeof</span> loopCount !== <span class="string">&quot;undefined&quot;</span>)</span><br><span class="line">			<span class="keyword">this</span>.loops = loopCount;</span><br><span class="line"></span><br><span class="line">	},</span><br><span class="line"></span><br><span class="line">	pause: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</span><br><span class="line">		<span class="keyword">this</span>.paused = <span class="literal">true</span>;</span><br><span class="line">	},</span><br><span class="line"></span><br><span class="line">	resume: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</span><br><span class="line">		<span class="keyword">this</span>.paused = <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">this</span>.complete = <span class="literal">false</span>;</span><br><span class="line">	},</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Increment the clock by some amount dt</span></span><br><span class="line">	<span class="comment">// Handles looping and sets a flag on completion</span></span><br><span class="line">	tick: <span class="function"><span class="keyword">function</span><span class="params">(dt)</span></span>{</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.paused || <span class="keyword">this</span>.complete) <span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">this</span>.clock += dt;</span><br><span class="line">		<span class="keyword">this</span>.frames = Math.floor(<span class="keyword">this</span>.clock/<span class="keyword">this</span>.timePerFrame);</span><br><span class="line">		<span class="keyword">while</span> (<span class="keyword">this</span>.clock &gt;= <span class="keyword">this</span>.duration &amp;&amp; <span class="keyword">this</span>.complete === <span class="literal">false</span>){</span><br><span class="line">			<span class="keyword">this</span>.loops--;</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.loops &gt; <span class="number">0</span>)</span><br><span class="line">				<span class="keyword">this</span>.clock -= <span class="keyword">this</span>.duration;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="keyword">this</span>.complete = <span class="literal">true</span>;</span><br><span class="line">		}</span><br><span class="line">	},</span><br><span class="line"></span><br><span class="line">	<span class="comment">// same as value for now; with other time value functions would be more useful</span></span><br><span class="line">	time: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</span><br><span class="line">		<span class="keyword">return</span> ( Math.min(<span class="keyword">this</span>.clock/<span class="keyword">this</span>.duration, <span class="number">1</span>) );</span><br><span class="line"></span><br><span class="line">	},</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Value is where along the tweening curve we are</span></span><br><span class="line">	value: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.easing_function(<span class="keyword">this</span>.time());</span><br><span class="line">	},</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Easing functions, formulas taken from https://gist.github.com/gre/1650294</span></span><br><span class="line">	<span class="comment">//	and https://en.wikipedia.org/wiki/Smoothstep</span></span><br><span class="line">	standardEasingFunctions: {</span><br><span class="line">		<span class="comment">// no easing, no acceleration</span></span><br><span class="line">		linear: <span class="function"><span class="keyword">function</span> <span class="params">(t)</span> </span>{ <span class="keyword">return</span> t; },</span><br><span class="line">		<span class="comment">// smooth step; starts and ends with v=0</span></span><br><span class="line">		smoothStep: <span class="function"><span class="keyword">function</span><span class="params">(t)</span></span>{ <span class="keyword">return</span> (<span class="number">3</span>-<span class="number">2</span>*t)*t*t; },</span><br><span class="line">		<span class="comment">// smootherstep; starts and ends with v, a=0</span></span><br><span class="line">		smootherStep: <span class="function"><span class="keyword">function</span><span class="params">(t)</span></span>{ <span class="keyword">return</span> (<span class="number">6</span>*t*t-<span class="number">15</span>*t+<span class="number">10</span>)*t*t*t; },</span><br><span class="line">		<span class="comment">// quadratic curve; starts with v=0</span></span><br><span class="line">		easeInQuad: <span class="function"><span class="keyword">function</span> <span class="params">(t)</span> </span>{ <span class="keyword">return</span> t*t; },</span><br><span class="line">		<span class="comment">// quadratic curve; ends with v=0</span></span><br><span class="line">		easeOutQuad: <span class="function"><span class="keyword">function</span> <span class="params">(t)</span> </span>{ <span class="keyword">return</span> t*(<span class="number">2</span>-t); },</span><br><span class="line">		<span class="comment">// quadratic curve; starts and ends with v=0</span></span><br><span class="line">		easeInOutQuad: <span class="function"><span class="keyword">function</span> <span class="params">(t)</span> </span>{ <span class="keyword">return</span> t&lt;<span class="number">0.5</span> ? <span class="number">2</span>*t*t : (<span class="number">4</span>-<span class="number">2</span>*t)*t-<span class="number">1</span>; }</span><br><span class="line">	}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">module.exports = easing;</span><br><span class="line">},{}],<span class="number">7</span>:[<span class="function"><span class="keyword">function</span><span class="params">(require,module,exports)</span></span>{</span><br><span class="line"><span class="keyword">var</span> version = require(<span class="string">&apos;./version&apos;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Crafty</span><br><span class="line"> * @category Core</span><br><span class="line"> *</span><br><span class="line"> * `Crafty` is both an object, and a function for selecting entities.</span><br><span class="line"> * Its many methods and properties are discussed individually.</span><br><span class="line"> * Below is the documentation for use as a selector.</span><br><span class="line"> *</span><br><span class="line"> * @sign public EntitySelection Crafty( String selector)</span><br><span class="line"> * @param selector - A string representing which entities to select</span><br><span class="line"> *</span><br><span class="line"> * @sign public Entity Crafty( Number selector )</span><br><span class="line"> * @param selector - An entity&apos;s id</span><br><span class="line"> *</span><br><span class="line"> * Select a set of or single entities by components or an entity&apos;s ID.</span><br><span class="line"> *</span><br><span class="line"> * Crafty uses syntax similar to jQuery by having a selector engine to select entities by their components.</span><br><span class="line"> *</span><br><span class="line"> * If there is more than one match, the return value is an Array-like object listing the ID numbers of each matching entity. If there is exactly one match, the entity itself is returned. If you&apos;re not sure how many matches to expect, check the number of matches via Crafty(...).length. Alternatively, use Crafty(...).each(...), which works in all cases.</span><br><span class="line"> *</span><br><span class="line"> * @note You can treat an entity as if it was a selection of length 1 -- it implements all the same methods.</span><br><span class="line"> *</span><br><span class="line"> * @example</span><br><span class="line"> *</span></span><br></pre></td></tr></table></figure>

 *    Crafty(&quot;MyComponent&quot;)
 *    Crafty(&quot;Hello 2D Component&quot;)
 *    Crafty(&quot;Hello, 2D, Component&quot;)
 * <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*</span><br><span class="line">* The <span class="keyword">first</span> selector will <span class="constant">return</span> all entities <span class="keyword">that</span> have <span class="keyword">the</span> component `MyComponent`. The <span class="keyword">second</span> will <span class="constant">return</span> all entities <span class="keyword">that</span> have `Hello` <span class="keyword">and</span> `<span class="number">2</span>D` <span class="keyword">and</span> `Component` whereas <span class="keyword">the</span> <span class="keyword">last</span> will <span class="constant">return</span> all entities <span class="keyword">that</span> have <span class="keyword">at</span> least one <span class="keyword">of</span> those components (<span class="keyword">or</span>).</span><br><span class="line">*</span><br><span class="line">*</span><br></pre></td></tr></table></figure>

 *   Crafty(&quot;*&quot;)
 * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span> Passing `<span class="keyword">*</span>` will select all entities.</span><br><span class="line"><span class="keyword">*</span></span><br><span class="line"><span class="keyword">*</span></span><br></pre></td></tr></table></figure>

 *   Crafty(1)
 * <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"> * Passing an integer will select the entity <span class="keyword">with</span> that <span class="string">`ID`</span>.</span><br><span class="line"> *</span><br><span class="line"> * To work directly <span class="keyword">with</span> an array <span class="keyword">of</span> entities, use the <span class="string">`get()`</span> method on a selection.</span><br><span class="line"> * To call a <span class="function"><span class="keyword">function</span> <span class="title">in</span> <span class="title">the</span> <span class="title">context</span> <span class="title">of</span> <span class="title">each</span> <span class="title">entity</span>, <span class="title">use</span> <span class="title">the</span> `.<span class="title">each</span>(<span class="params"></span>)` <span class="title">method</span>.</span><br><span class="line"> *</span><br><span class="line"> * <span class="title">The</span> <span class="title">event</span> <span class="title">related</span> <span class="title">methods</span> <span class="title">such</span> <span class="title">as</span> `<span class="title">bind</span>` <span class="title">and</span> `<span class="title">trigger</span>` <span class="title">will</span> <span class="title">work</span> <span class="title">on</span> <span class="title">selections</span> <span class="title">of</span> <span class="title">entities</span>.</span><br><span class="line"> *</span><br><span class="line"> * @<span class="title">see</span> <span class="title">Crafty</span> <span class="title">Core</span>#.<span class="title">get</span></span><br><span class="line"> * @<span class="title">see</span> <span class="title">Crafty</span> <span class="title">Core</span>#.<span class="title">each</span></span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"><span class="title">var</span> <span class="title">Crafty</span> = <span class="title">function</span> (<span class="params">selector</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Crafty.fn.init(selector);</span><br><span class="line">};</span><br><span class="line">    <span class="comment">// Internal variables</span></span><br><span class="line"><span class="keyword">var</span> GUID, frame, components, entities, handlers, onloads,</span><br><span class="line">slice, rlist, rspace, milliSecPerFrame;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">components  = {}; <span class="comment">// Map of components and their functions</span></span><br><span class="line">slice       = <span class="built_in">Array</span>.prototype.slice;</span><br><span class="line">rlist       = <span class="regexp">/\s*,\s*/</span>;</span><br><span class="line">rspace      = <span class="regexp">/\s+/</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> initState = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    GUID        = <span class="number">1</span>; <span class="comment">// GUID for entity IDs</span></span><br><span class="line">    frame       = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    entities    = {}; <span class="comment">// Map of entities and their data</span></span><br><span class="line">    handlers    = {}; <span class="comment">// Global event handlers</span></span><br><span class="line">    onloads     = []; <span class="comment">// Temporary storage of onload handlers</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">initState();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Crafty Core</span><br><span class="line"> * @category Core</span><br><span class="line"> * @trigger NewEntityName - After setting new name for entity - String - entity name</span><br><span class="line"> * @trigger NewComponent - when a new component is added to the entity - String - Component</span><br><span class="line"> * @trigger RemoveComponent - when a component is removed from the entity - String - Component</span><br><span class="line"> * @trigger Remove - when the entity is removed by calling .destroy()</span><br><span class="line"> *</span><br><span class="line"> * A set of methods added to every single entity.</span><br><span class="line"> */</span></span><br><span class="line">Crafty.fn = Crafty.prototype = {</span><br><span class="line"></span><br><span class="line">    init: <span class="function"><span class="keyword">function</span> (<span class="params">selector</span>) </span>{</span><br><span class="line">        <span class="comment">//select entities by component</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> selector === <span class="string">&quot;string&quot;</span>) {</span><br><span class="line">            <span class="keyword">var</span> elem = <span class="number">0</span>, <span class="comment">//index elements</span></span><br><span class="line">                e, <span class="comment">//entity forEach</span></span><br><span class="line">                current,</span><br><span class="line">                and = <span class="literal">false</span>, <span class="comment">//flags for multiple</span></span><br><span class="line">                or = <span class="literal">false</span>,</span><br><span class="line">                del,</span><br><span class="line">                comps,</span><br><span class="line">                score,</span><br><span class="line">                i, l;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (selector === <span class="string">&apos;*&apos;</span>) {</span><br><span class="line">                i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (e <span class="keyword">in</span> entities) {</span><br><span class="line">                    <span class="comment">// entities is something like {2:entity2, 3:entity3, 11:entity11, ...}</span></span><br><span class="line">                    <span class="comment">// The for...in loop sets e to &quot;2&quot;, &quot;3&quot;, &quot;11&quot;, ... i.e. all</span></span><br><span class="line">                    <span class="comment">// the entity ID numbers. e is a string, so +e converts to number type.</span></span><br><span class="line">                    <span class="keyword">this</span>[i] = +e;</span><br><span class="line">                    i++;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">this</span>.length = i;</span><br><span class="line">                <span class="comment">// if there&apos;s only one entity, return the actual entity</span></span><br><span class="line">                <span class="keyword">if</span> (i === <span class="number">1</span>) {</span><br><span class="line">                    <span class="keyword">return</span> entities[<span class="keyword">this</span>[<span class="number">0</span>]];</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">//multiple components OR</span></span><br><span class="line">            <span class="keyword">if</span> (selector.indexOf(<span class="string">&apos;,&apos;</span>) !== -<span class="number">1</span>) {</span><br><span class="line">                or = <span class="literal">true</span>;</span><br><span class="line">                del = rlist;</span><br><span class="line">                <span class="comment">//deal with multiple components AND</span></span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (selector.indexOf(<span class="string">&apos; &apos;</span>) !== -<span class="number">1</span>) {</span><br><span class="line">                and = <span class="literal">true</span>;</span><br><span class="line">                del = rspace;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">//loop over entities</span></span><br><span class="line">            <span class="keyword">for</span> (e <span class="keyword">in</span> entities) {</span><br><span class="line">                <span class="keyword">if</span> (!entities.hasOwnProperty(e)) <span class="keyword">continue</span>; <span class="comment">//skip</span></span><br><span class="line">                current = entities[e];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (and || or) { <span class="comment">//multiple components</span></span><br><span class="line">                    comps = selector.split(del);</span><br><span class="line">                    i = <span class="number">0</span>;</span><br><span class="line">                    l = comps.length;</span><br><span class="line">                    score = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> (; i &lt; l; i++) <span class="comment">//loop over components</span></span><br><span class="line">                        <span class="keyword">if</span> (current.__c[comps[i]]) score++; <span class="comment">//if component exists add to score</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">//if anded comps and has all OR ored comps and at least 1</span></span><br><span class="line">                    <span class="keyword">if</span> (and &amp;&amp; score === l || or &amp;&amp; score &gt; <span class="number">0</span>) <span class="keyword">this</span>[elem++] = +e;</span><br><span class="line"></span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (current.__c[selector]) <span class="keyword">this</span>[elem++] = +e; <span class="comment">//convert to int</span></span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">//extend all common components</span></span><br><span class="line">            <span class="keyword">if</span> (elem &gt; <span class="number">0</span> &amp;&amp; !and &amp;&amp; !or) <span class="keyword">this</span>.extend(components[selector]);</span><br><span class="line">            <span class="keyword">if</span> (comps &amp;&amp; and)</span><br><span class="line">                <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; l; i++) <span class="keyword">this</span>.extend(components[comps[i]]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.length = elem; <span class="comment">//length is the last index (already incremented)</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// if there&apos;s only one entity, return the actual entity</span></span><br><span class="line">            <span class="keyword">if</span> (elem === <span class="number">1</span>) {</span><br><span class="line">                <span class="keyword">return</span> entities[<span class="keyword">this</span>[elem - <span class="number">1</span>]];</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">        } <span class="keyword">else</span> { <span class="comment">//Select a specific entity</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!selector) { <span class="comment">//nothin passed creates God entity</span></span><br><span class="line">                selector = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (!(selector <span class="keyword">in</span> entities)) entities[selector] = <span class="keyword">this</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">//if not exists, return undefined</span></span><br><span class="line">            <span class="keyword">if</span> (!(selector <span class="keyword">in</span> entities)) {</span><br><span class="line">                <span class="keyword">this</span>.length = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>[<span class="number">0</span>] = selector;</span><br><span class="line">            <span class="keyword">this</span>.length = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//update from the cache</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.__c) <span class="keyword">this</span>.__c = {};</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>._callbacks) Crafty._addCallbackMethods(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//update to the cache if NULL</span></span><br><span class="line">            <span class="keyword">if</span> (!entities[selector]) entities[selector] = <span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">return</span> entities[selector]; <span class="comment">//return the cached selector</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        Crafty._addCallbackMethods(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.setName</span><br><span class="line">     * @comp Crafty Core</span><br><span class="line">     * @sign public this .setName(String name)</span><br><span class="line">     * @param name - A human readable name for debugging purposes.</span><br><span class="line">     *</span><br><span class="line">     * @example</span><br><span class="line">     *</span></span><br></pre></td></tr></table></figure>

     * this.setName(&quot;Player&quot;);
     * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">setName: function (name) {</span><br><span class="line">    var entityName = String(name);</span><br><span class="line"></span><br><span class="line">    this._entityName = entityName;</span><br><span class="line"></span><br><span class="line">    this.trigger(<span class="string">&quot;NewEntityName&quot;</span>, entityName);</span><br><span class="line">    return this;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span>@</span><br><span class="line"> <span class="keyword">*</span> <span class="comment">#.addComponent</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@comp Crafty Core</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@sign public this .addComponent(String componentList)</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param componentList - A string of components to add separated by a comma `,`</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@sign public this .addComponent(String Component1[, .., String ComponentN])</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param Component# - Component ID to add.</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> Adds a component to the selected entities or entity.</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> Components are used to extend the functionality of entities.</span><br><span class="line"> <span class="keyword">*</span> This means it will copy properties and assign methods to</span><br><span class="line"> <span class="keyword">*</span> augment the functionality of the entity.</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> For adding multiple components, you can either pass a string with</span><br><span class="line"> <span class="keyword">*</span> all the component names (separated by commas), or pass each component name as</span><br><span class="line"> <span class="keyword">*</span> an argument.</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> If the component has a function named `init` it will be called.</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> If the entity already has the component, the component is skipped (nothing happens).</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@example</span></span><br><span class="line"> <span class="keyword">*</span></span><br></pre></td></tr></table></figure>

     * this.addComponent(&quot;2D, Canvas&quot;);
     * this.addComponent(&quot;2D&quot;, &quot;Canvas&quot;);
     * <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"> */</span><br><span class="line">addComponent: <span class="function"><span class="keyword">function</span> <span class="params">(id)</span> </span>{</span><br><span class="line">    <span class="keyword">var</span> comps,</span><br><span class="line">        comp, c = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//add multiple arguments</span></span><br><span class="line">    <span class="keyword">if</span> (arguments.length === <span class="number">1</span> &amp;&amp; id.indexOf(<span class="string">&apos;,&apos;</span>) !== -<span class="number">1</span>) {</span><br><span class="line">        comps = id.split(rlist);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        comps = arguments;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//extend the components</span></span><br><span class="line">    <span class="keyword">for</span> (; c &lt; comps.length; c++) {</span><br><span class="line">        <span class="comment">// If component already exists, continue</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.__c[comps[c]] === <span class="literal">true</span>) {</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">this</span>.__c[comps[c]] = <span class="literal">true</span>;</span><br><span class="line">        comp = components[comps[c]];</span><br><span class="line">        <span class="comment">// Copy all methods of the component</span></span><br><span class="line">        <span class="keyword">this</span>.extend(comp);</span><br><span class="line">        <span class="comment">// Add any required components</span></span><br><span class="line">        <span class="keyword">if</span> (comp &amp;&amp; <span class="string">&quot;required&quot;</span> <span class="keyword">in</span> comp) {</span><br><span class="line">            <span class="keyword">this</span>.requires( comp.required );</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// Call constructor function</span></span><br><span class="line">        <span class="keyword">if</span> (comp &amp;&amp; <span class="string">&quot;init&quot;</span> <span class="keyword">in</span> comp) {</span><br><span class="line">            comp.init.call(<span class="keyword">this</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// Bind events</span></span><br><span class="line">        <span class="keyword">if</span> (comp &amp;&amp; <span class="string">&quot;events&quot;</span> <span class="keyword">in</span> comp){</span><br><span class="line">            <span class="keyword">var</span> auto = comp.events;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> eventName <span class="keyword">in</span> auto){</span><br><span class="line">                <span class="keyword">var</span> fn = <span class="keyword">typeof</span> auto[eventName] === <span class="string">&quot;function&quot;</span> ? auto[eventName] : comp[auto[eventName]];</span><br><span class="line">                <span class="keyword">this</span>.bind(eventName, fn);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.trigger(<span class="string">&quot;NewComponent&quot;</span>, comps);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #.toggleComponent</span><br><span class="line"> * @comp Crafty Core</span><br><span class="line"> * @sign public this .toggleComponent(String ComponentList)</span><br><span class="line"> * @param ComponentList - A string of components to add or remove separated by a comma `,`</span><br><span class="line"> * @sign public this .toggleComponent(String Component1[, .., String componentN])</span><br><span class="line"> * @param Component# - Component ID to add or remove.</span><br><span class="line"> * </span><br><span class="line"> * Add or Remove Components from an entity.</span><br><span class="line"> *</span><br><span class="line"> * @example</span><br><span class="line"> *</span></span><br></pre></td></tr></table></figure>

     * var e = Crafty.e(&quot;2D,DOM,Test&quot;);
     * e.toggleComponent(&quot;Test,Test2&quot;); //Remove Test, add Test2
     * e.toggleComponent(&quot;Test,Test2&quot;); //Add Test, remove Test2
     * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span></span><br><span class="line"><span class="keyword">*</span></span><br></pre></td></tr></table></figure>

     * var e = Crafty.e(&quot;2D,DOM,Test&quot;);
     * e.toggleComponent(&quot;Test&quot;,&quot;Test2&quot;); //Remove Test, add Test2
     * e.toggleComponent(&quot;Test&quot;,&quot;Test2&quot;); //Add Test, remove Test2
     * e.toggleComponent(&quot;Test&quot;);         //Remove Test
     * <figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"> */</span><br><span class="line">toggleComponent: function (toggle) {</span><br><span class="line">    var i = <span class="number">0</span>,</span><br><span class="line">        l, comps;</span><br><span class="line">    <span class="keyword">if</span> (arguments.length &gt; <span class="number">1</span>) {</span><br><span class="line">        l = arguments.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (; i &lt; l; i++) {</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.has(arguments[i])) {</span><br><span class="line">                <span class="keyword">this</span>.removeComponent(arguments[i]);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">this</span>.addComponent(arguments[i]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//split components if contains comma</span></span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (toggle.indexOf(<span class="string">&apos;,&apos;</span>) !== -<span class="number">1</span>) {</span><br><span class="line">        comps = toggle.split(rlist);</span><br><span class="line">        l = comps.length;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt; l; i++) {</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.has(comps[i])) {</span><br><span class="line">                <span class="keyword">this</span>.removeComponent(comps[i]);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">this</span>.addComponent(comps[i]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//single component passed</span></span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.has(toggle)) {</span><br><span class="line">            <span class="keyword">this</span>.removeComponent(toggle);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">this</span>.addComponent(toggle);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #.requires</span><br><span class="line"> * <span class="doctag">@comp</span> Crafty Core</span><br><span class="line"> * <span class="doctag">@sign</span> public this .requires(String componentList)</span><br><span class="line"> * <span class="doctag">@param</span> componentList - List of components that must be added</span><br><span class="line"> *</span><br><span class="line"> * Makes sure the entity has the components listed. If the entity does not</span><br><span class="line"> * have the component, it will add it.</span><br><span class="line"> *</span><br><span class="line"> * (In the current version of Crafty, this function behaves exactly the same</span><br><span class="line"> * as `addComponent`. By convention, developers have used `requires` for</span><br><span class="line"> * component dependencies -- i.e. to indicate specifically that one component</span><br><span class="line"> * will only work properly if another component is present -- and used</span><br><span class="line"> * `addComponent` in all other situations.)</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@see</span> .addComponent</span><br><span class="line"> */</span></span><br><span class="line">requires: function (list) {</span><br><span class="line">    <span class="function"><span class="keyword">return</span> <span class="keyword">this</span>.<span class="title">addComponent</span><span class="params">(list)</span></span>;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #.removeComponent</span><br><span class="line"> * <span class="doctag">@comp</span> Crafty Core</span><br><span class="line"> * <span class="doctag">@sign</span> public this .removeComponent(String Component[, soft])</span><br><span class="line"> * <span class="doctag">@param</span> component - Component to remove</span><br><span class="line"> * <span class="doctag">@param</span> soft - Whether to soft remove it (defaults to `true`)</span><br><span class="line"> *</span><br><span class="line"> * Removes a component from an entity. A soft remove (the default) will only</span><br><span class="line"> * refrain `.has()` from returning true. Hard will remove all</span><br><span class="line"> * associated properties and methods.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@example</span></span><br><span class="line"> *</span></span><br></pre></td></tr></table></figure>

     * var e = Crafty.e(&quot;2D,DOM,Test&quot;);
     * e.removeComponent(&quot;Test&quot;);        //Soft remove Test component
     * e.removeComponent(&quot;Test&quot;, false); //Hard remove Test component
     * <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"> */</span><br><span class="line">removeComponent: <span class="function"><span class="keyword">function</span> <span class="params">(id, soft)</span> </span>{</span><br><span class="line">    <span class="keyword">var</span> comp = components[id];</span><br><span class="line">    <span class="keyword">this</span>.trigger(<span class="string">&quot;RemoveComponent&quot;</span>, id);</span><br><span class="line">    <span class="keyword">if</span> (comp &amp;&amp; <span class="string">&quot;events&quot;</span> <span class="keyword">in</span> comp){</span><br><span class="line">        <span class="keyword">var</span> auto = comp.events;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> eventName <span class="keyword">in</span> auto){</span><br><span class="line">            <span class="keyword">var</span> fn = <span class="keyword">typeof</span> auto[eventName] === <span class="string">&quot;function&quot;</span> ? auto[eventName] : comp[auto[eventName]];</span><br><span class="line">            <span class="keyword">this</span>.unbind(eventName, fn);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (comp &amp;&amp; <span class="string">&quot;remove&quot;</span> <span class="keyword">in</span> comp) {</span><br><span class="line">        comp.remove.call(<span class="keyword">this</span>, <span class="literal">false</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (soft === <span class="literal">false</span> &amp;&amp; comp) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> comp) {</span><br><span class="line">            <span class="keyword">delete</span> <span class="keyword">this</span>[prop];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.__c[id];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #.getId</span><br><span class="line"> * @comp Crafty Core</span><br><span class="line"> * @sign public Number .getId(void)</span><br><span class="line"> * @returns the ID of this entity.</span><br><span class="line"> *</span><br><span class="line"> * For better performance, simply use the this[0] property.</span><br><span class="line"> *</span><br><span class="line"> * @example</span><br><span class="line"> * Finding out the `ID` of an entity can be done by returning the property `0`.</span><br><span class="line"> *</span></span><br></pre></td></tr></table></figure>

     *    var ent = Crafty.e(&quot;2D&quot;);
     *    ent[0]; //ID
     *    ent.getId(); //also ID
     * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">getId: function () {</span><br><span class="line">    return this[0];</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span>@</span><br><span class="line"> <span class="keyword">*</span> <span class="comment">#.has</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@comp Crafty Core</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@sign public Boolean .has(String component)</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param component - The name of the component to check</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@returns `true` or `false` depending on if the</span></span><br><span class="line"> <span class="keyword">*</span> entity has the given component.</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> For better performance, simply use the `.__c` object</span><br><span class="line"> <span class="keyword">*</span> which will be `true` if the entity has the component or</span><br><span class="line"> <span class="keyword">*</span> will not exist (or be `false`).</span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">has: function (id) {</span><br><span class="line">    return !!this.__c[id];</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span>@</span><br><span class="line"> <span class="keyword">*</span> <span class="comment">#.attr</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@comp Crafty Core</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@trigger Change - when properties change - {key: value}</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@sign public this .attr(String property, Any value[, Boolean silent[, Boolean recursive]])</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param property - Property of the entity to modify</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param value - Value to set the property to</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param silent - If you would like to supress events</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param recursive - If you would like merge recursively</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> Use this method to set any property of the entity.</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@sign public this .attr(Object map[, Boolean silent[, Boolean recursive]])</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param map - Object where each key is the property to modify and the value as the property value</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param silent - If you would like to supress events</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param recursive - If you would like merge recursively</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> Use this method to set multiple properties of the entity.</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> Setter options:</span><br><span class="line"> <span class="keyword">*</span> - `silent`: If you want to prevent it from firing events.</span><br><span class="line"> <span class="keyword">*</span> - `recursive`: If you pass in an object you could overwrite sibling keys, this recursively merges instead of just merging it. This is `false` by default, unless you are using dot notation `name.first`.</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@sign public Any .attr(String property)</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param property - Property of the entity to modify</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@returns Value - the value of the property</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> Use this method to get any property of the entity. You can also retrieve the property using `this.property`.</span><br><span class="line"> <span class="keyword">*</span> </span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@example</span></span><br><span class="line"> <span class="keyword">*</span></span><br></pre></td></tr></table></figure>

     * this.attr({key: &quot;value&quot;, prop: 5});
     * this.attr(&quot;key&quot;); // returns &quot;value&quot;
     * this.attr(&quot;prop&quot;); // returns 5
     * this.key; // &quot;value&quot;
     * this.prop; // 5
     *
     * this.attr(&quot;key&quot;, &quot;newvalue&quot;);
     * this.attr(&quot;key&quot;); // returns &quot;newvalue&quot;
     * this.key; // &quot;newvalue&quot;
     *
     * this.attr(&quot;parent.child&quot;, &quot;newvalue&quot;);
     * this.parent; // {child: &quot;newvalue&quot;};
     * this.attr(&apos;parent.child&apos;); // &quot;newvalue&quot;
     * <figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> */</span><br><span class="line">attr: function (key, value, silent, recursive) {</span><br><span class="line">    <span class="keyword">if</span> (arguments.length === <span class="number">1</span> &amp;&amp; typeof arguments[<span class="number">0</span>] === &apos;<span class="type">string</span>&apos;) {</span><br><span class="line">        <span class="keyword">return</span> this._attr_get(key);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> this._attr_set(key, value, silent, recursive);</span><br><span class="line">    }</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * <span class="type">Internal</span> getter <span class="keyword">method</span> <span class="keyword">for</span> data on the entity. <span class="type">Called</span> by `.attr`.</span><br><span class="line"> *</span><br><span class="line"> * example</span><br><span class="line"> *</span><br></pre></td></tr></table></figure>

     * person._attr_get(&apos;name&apos;); // Foxxy
     * person._attr_get(&apos;contact&apos;); // {email: &apos;fox_at_example.com&apos;}
     * person._attr_get(&apos;contact.email&apos;); // fox_at_example.com
     * <figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> */</span><br><span class="line">_attr_get: function(<span class="variable">key</span>, context) {</span><br><span class="line">    var first, keys, subkey;</span><br><span class="line">    <span class="keyword">if</span> (typeof context === <span class="string">&quot;undefined&quot;</span> || context === <span class="keyword">null</span>) {</span><br><span class="line">        context = <span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">key</span>.indexOf(<span class="string">&apos;.&apos;</span>) &gt; -<span class="number">1</span>) {</span><br><span class="line">        keys = <span class="variable">key</span>.<span class="built_in">split</span>(<span class="string">&apos;.&apos;</span>);</span><br><span class="line">        first = keys.shift();</span><br><span class="line">        subkey = keys.<span class="built_in">join</span>(<span class="string">&apos;.&apos;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._attr_get(keys.<span class="built_in">join</span>(<span class="string">&apos;.&apos;</span>), context[first]);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> context[<span class="variable">key</span>];</span><br><span class="line">    }</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Internal setter method for attributes on the component. Called by `.attr`.</span><br><span class="line"> *</span><br><span class="line"> * Options:</span><br><span class="line"> *</span><br><span class="line"> * `silent`: If you want to prevent it from firing events.</span><br><span class="line"> *</span><br><span class="line"> * `recursive`: If you pass in an object you could overwrite</span><br><span class="line"> * sibling keys, this recursively merges instead of just</span><br><span class="line"> * merging it. This is `false` by default, unless you are</span><br><span class="line"> * using dot notation `name.first`.</span><br><span class="line"> *</span><br><span class="line"> * example</span><br><span class="line"> *</span></span><br></pre></td></tr></table></figure>

     * person._attr_set(&apos;name&apos;, &apos;Foxxy&apos;, true);
     * person._attr_set(&apos;name&apos;, &apos;Foxxy&apos;);
     * person._attr_set({name: &apos;Foxxy&apos;}, true);
     * person._attr_set({name: &apos;Foxxy&apos;});
     * person._attr_set(&apos;name.first&apos;, &apos;Foxxy&apos;);
     * <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"> */</span><br><span class="line">_attr_set: function() {</span><br><span class="line">    <span class="keyword">var</span> data, silent, recursive;</span><br><span class="line">    <span class="keyword">if</span> (typeof arguments[<span class="number">0</span>] === <span class="string">&apos;string&apos;</span>) {</span><br><span class="line">        data = <span class="keyword">this</span>._set_create_object(arguments[<span class="number">0</span>], arguments[<span class="number">1</span>]);</span><br><span class="line">        silent = !!arguments[<span class="number">2</span>];</span><br><span class="line">        recursive = arguments[<span class="number">3</span>] || arguments[<span class="number">0</span>].indexOf(<span class="string">&apos;.&apos;</span>) &gt; -<span class="number">1</span>;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        data = arguments[<span class="number">0</span>];</span><br><span class="line">        silent = !!arguments[<span class="number">1</span>];</span><br><span class="line">        recursive = !!arguments[<span class="number">2</span>];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!silent) {</span><br><span class="line">        <span class="keyword">this</span>.trigger(<span class="string">&apos;Change&apos;</span>, data);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (recursive) {</span><br><span class="line">        <span class="keyword">this</span>._recursive_extend(data, <span class="keyword">this</span>);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">this</span>.extend.call(<span class="keyword">this</span>, data);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/**</span><br><span class="line"> * If </span>you<span class="markdown"> </span>are<span class="markdown"> setting </span>a<span class="markdown"> key of &apos;foo.bar&apos; or &apos;bar&apos;, this creates</span><br><span class="line"> * </span>the<span class="markdown"> appropriate object for </span>you<span class="markdown"> to recursively merge with </span>the<span class="markdown"></span><br><span class="line"> * current attributes.</span><br><span class="line"> */</span></span></span><br><span class="line">_set_create_object: function(key, value) {</span><br><span class="line">    <span class="keyword">var</span> data = {}, keys, first, subkey;</span><br><span class="line">    <span class="keyword">if</span> (key.indexOf(<span class="string">&apos;.&apos;</span>) &gt; -<span class="number">1</span>) {</span><br><span class="line">        keys = key.split(<span class="string">&apos;.&apos;</span>);</span><br><span class="line">        first = keys.shift();</span><br><span class="line">        subkey = keys.join(<span class="string">&apos;.&apos;</span>);</span><br><span class="line">        data[first] = <span class="keyword">this</span>._set_create_object(subkey, value);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        data[key] = value;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/**</span><br><span class="line"> * Recursively puts <span class="code">`new_data`</span> into <span class="code">`original_data`</span>.</span><br><span class="line"> */</span></span></span><br><span class="line">_recursive_extend: function(new_data, original_data) {</span><br><span class="line">    <span class="keyword">var</span> key;</span><br><span class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> new_data) {</span><br><span class="line">        <span class="keyword">if</span> (new_data[key].constructor === <span class="built_in">Object</span>) {</span><br><span class="line">            original_data[key] = <span class="keyword">this</span>._recursive_extend(new_data[key], original_data[key]);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            original_data[key] = new_data[key];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> original_data;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/**@</span><br><span class="line"> * #.toArray</span><br><span class="line"> * @comp Crafty Core</span><br><span class="line"> * @sign public this .toArray(void)</span><br><span class="line"> *</span><br><span class="line"> * This method </span>will<span class="markdown"> </span>simply<span class="markdown"> return </span>the<span class="markdown"> found entities as </span>an<span class="markdown"> array of ids.  To get </span>an<span class="markdown"> array of </span>the<span class="markdown"> actual entities, use <span class="code">`get()`</span>.</span><br><span class="line"> * @see .get</span><br><span class="line"> */</span></span></span><br><span class="line">toArray: function () {</span><br><span class="line">    <span class="keyword">return</span> slice.call(<span class="keyword">this</span>, <span class="number">0</span>);</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/**@</span><br><span class="line"><span class="bullet">* </span>#.timeout</span><br><span class="line"><span class="bullet">* </span>@comp Crafty Core</span><br><span class="line"><span class="bullet">* </span>@sign public this .timeout(Function callback, Number delay)</span><br><span class="line"><span class="bullet">* </span>@param callback - Method to execute after given amount of milliseconds</span><br><span class="line"><span class="bullet">* </span>@param delay - Amount of milliseconds to execute </span>the<span class="markdown"> method</span><br><span class="line"><span class="bullet">*</span><br><span class="line"></span><span class="bullet">* </span>The delay method </span>will<span class="markdown"> execute </span>a<span class="markdown"> function after </span>a<span class="markdown"> given amount of time in milliseconds.</span><br><span class="line"><span class="bullet">*</span><br><span class="line"></span><span class="bullet">* </span>Essentially </span>a<span class="markdown"> wrapper for <span class="code">`setTimeout`</span>.</span><br><span class="line"><span class="bullet">*</span><br><span class="line"></span><span class="bullet">* </span>@example</span><br><span class="line"><span class="bullet">* </span>Destroy itself after 100 milliseconds</span><br><span class="line">*</span></span></span><br></pre></td></tr></table></figure>

    * this.timeout(function() {
         this.destroy();
    * }, 100);
    * <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">*/</span><br><span class="line">timeout: <span class="function"><span class="keyword">function</span> <span class="params">(callback, duration)</span> </span>{</span><br><span class="line">    this.each(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">self</span> = this;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">            callback.call(<span class="keyword">self</span>);</span><br><span class="line">        }, duration);</span><br><span class="line">    });</span><br><span class="line">    <span class="keyword">return</span> this;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #.bind</span><br><span class="line"> * <span class="doctag">@comp</span> Crafty Core</span><br><span class="line"> * <span class="doctag">@sign</span> public this .bind(String eventName, Function callback)</span><br><span class="line"> * <span class="doctag">@param</span> eventName - Name of the event to bind to</span><br><span class="line"> * <span class="doctag">@param</span> callback - Method to execute when the event is triggered</span><br><span class="line"> *</span><br><span class="line"> * Attach the current entity (or entities) to listen for an event.</span><br><span class="line"> *</span><br><span class="line"> * Callback will be invoked when an event with the event name passed</span><br><span class="line"> * is triggered. Depending on the event, some data may be passed</span><br><span class="line"> * via an argument to the callback function.</span><br><span class="line"> *</span><br><span class="line"> * The first argument is the event name (can be anything) whilst the</span><br><span class="line"> * second argument is the callback. If the event has data, the</span><br><span class="line"> * callback should have an argument.</span><br><span class="line"> *</span><br><span class="line"> * Events are arbitrary and provide communication between components.</span><br><span class="line"> * You can trigger or bind an event even if it doesn&apos;t exist yet.</span><br><span class="line"> *</span><br><span class="line"> * Unlike DOM events, Crafty events are executed synchronously.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@example</span></span><br><span class="line"> *</span></span><br></pre></td></tr></table></figure>

     * this.attr(&quot;triggers&quot;, 0); //set a trigger count
     * this.bind(&quot;myevent&quot;, function() {
     *     this.triggers++; //whenever myevent is triggered, increment
     * });
     * this.bind(&quot;EnterFrame&quot;, function() {
     *     this.trigger(&quot;myevent&quot;); //trigger myevent on every frame
     * });
     * <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"> *</span><br><span class="line"> * @see .trigger, .unbind</span><br><span class="line"> */</span><br><span class="line">bind: <span class="function"><span class="keyword">function</span> <span class="params">(event, callback)</span> </span>{</span><br><span class="line">    <span class="comment">//  To learn how the event system functions, see the comments for Crafty._callbackMethods</span></span><br><span class="line">    <span class="comment">//optimization for 1 entity</span></span><br><span class="line">    <span class="keyword">if</span> (this.length === <span class="number">1</span>) {</span><br><span class="line">        this._bindCallback(event, callback);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; this.length; i++) {</span><br><span class="line">            <span class="keyword">var</span> e = entities[this[i]];</span><br><span class="line">            <span class="keyword">if</span> (e) {</span><br><span class="line">                e._bindCallback(event, callback);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> this;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #.uniqueBind</span><br><span class="line"> * <span class="doctag">@comp</span> Crafty Core</span><br><span class="line"> * <span class="doctag">@sign</span> public Number .uniqueBind(String eventName, Function callback)</span><br><span class="line"> * <span class="doctag">@param</span> eventName - Name of the event to bind to</span><br><span class="line"> * <span class="doctag">@param</span> callback - Method to execute upon event triggered</span><br><span class="line"> * <span class="doctag">@returns</span> ID of the current callback used to unbind</span><br><span class="line"> *</span><br><span class="line"> * Works like Crafty.bind, but prevents a callback from being bound multiple times.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@see</span> .bind</span><br><span class="line"> */</span></span><br><span class="line">uniqueBind: <span class="function"><span class="keyword">function</span> <span class="params">(event, callback)</span> </span>{</span><br><span class="line">    this.unbind(event, callback);</span><br><span class="line">    this.bind(event, callback);</span><br><span class="line"></span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #.one</span><br><span class="line"> * <span class="doctag">@comp</span> Crafty Core</span><br><span class="line"> * <span class="doctag">@sign</span> public Number one(String eventName, Function callback)</span><br><span class="line"> * <span class="doctag">@param</span> eventName - Name of the event to bind to</span><br><span class="line"> * <span class="doctag">@param</span> callback - Method to execute upon event triggered</span><br><span class="line"> * <span class="doctag">@returns</span> ID of the current callback used to unbind</span><br><span class="line"> *</span><br><span class="line"> * Works like Crafty.bind, but will be unbound once the event triggers.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@see</span> .bind</span><br><span class="line"> */</span></span><br><span class="line">one: <span class="function"><span class="keyword">function</span> <span class="params">(event, callback)</span> </span>{</span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">self</span> = this;</span><br><span class="line">    <span class="keyword">var</span> oneHandler = <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>{</span><br><span class="line">        callback.call(<span class="keyword">self</span>, data);</span><br><span class="line">        <span class="keyword">self</span>.unbind(event, oneHandler);</span><br><span class="line">    };</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.bind(event, oneHandler);</span><br><span class="line"></span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #.unbind</span><br><span class="line"> * <span class="doctag">@comp</span> Crafty Core</span><br><span class="line"> * <span class="doctag">@sign</span> public this .unbind(String eventName[, Function callback])</span><br><span class="line"> * <span class="doctag">@param</span> eventName - Name of the event to unbind</span><br><span class="line"> * <span class="doctag">@param</span> callback - Function to unbind</span><br><span class="line"> *</span><br><span class="line"> * Removes binding with an event from current entity.</span><br><span class="line"> *</span><br><span class="line"> * Passing an event name will remove all events bound to</span><br><span class="line"> * that event. Passing a reference to the callback will</span><br><span class="line"> * unbind only that callback.</span><br><span class="line"> * <span class="doctag">@see</span> .bind, .trigger</span><br><span class="line"> */</span></span><br><span class="line">unbind: <span class="function"><span class="keyword">function</span> <span class="params">(event, callback)</span> </span>{</span><br><span class="line">    <span class="comment">//  To learn how the event system functions, see the comments for Crafty._callbackMethods</span></span><br><span class="line">    <span class="keyword">var</span> i, e;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; this.length; i++) {</span><br><span class="line">        e = entities[this[i]];</span><br><span class="line">        <span class="keyword">if</span> (e) {</span><br><span class="line">            e._unbindCallbacks(event, callback);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> this;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #.trigger</span><br><span class="line"> * <span class="doctag">@comp</span> Crafty Core</span><br><span class="line"> * <span class="doctag">@sign</span> public this .trigger(String eventName[, Object data])</span><br><span class="line"> * <span class="doctag">@param</span> eventName - Event to trigger</span><br><span class="line"> * <span class="doctag">@param</span> data - Arbitrary data that will be passed into every callback as an argument</span><br><span class="line"> *</span><br><span class="line"> * Trigger an event with arbitrary data. Will invoke all callbacks with</span><br><span class="line"> * the context (value of `this`) of the current entity object.</span><br><span class="line"> *</span><br><span class="line"> * *<span class="doctag">Note:</span> This will only execute callbacks within the current entity, no other entity.*</span><br><span class="line"> *</span><br><span class="line"> * The first argument is the event name to trigger and the optional</span><br><span class="line"> * second argument is the arbitrary event data. This can be absolutely anything.</span><br><span class="line"> *</span><br><span class="line"> * Unlike DOM events, Crafty events are exectued synchronously.</span><br><span class="line"> */</span></span><br><span class="line">trigger: <span class="function"><span class="keyword">function</span> <span class="params">(event, data)</span> </span>{</span><br><span class="line">    <span class="comment">//  To learn how the event system functions, see the comments for Crafty._callbackMethods</span></span><br><span class="line">    <span class="keyword">if</span> (this.length === <span class="number">1</span>) {</span><br><span class="line">        <span class="comment">//find the handlers assigned to the entity</span></span><br><span class="line">        this._runCallbacks(event, data);</span><br><span class="line">     } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; this.length; i++) {</span><br><span class="line">            <span class="keyword">var</span> e = entities[this[i]];</span><br><span class="line">            <span class="keyword">if</span> (e) {</span><br><span class="line">                e._runCallbacks(event, data);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> this;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #.each</span><br><span class="line"> * <span class="doctag">@comp</span> Crafty Core</span><br><span class="line"> * <span class="doctag">@sign</span> public this .each(Function method)</span><br><span class="line"> * <span class="doctag">@param</span> method - Method to call on each iteration</span><br><span class="line"> *</span><br><span class="line"> * Iterates over found entities, calling a function for every entity.</span><br><span class="line"> *</span><br><span class="line"> * The function will be called for every entity and will pass the index</span><br><span class="line"> * in the iteration as an argument. The context (value of `this`) of the</span><br><span class="line"> * function will be the current entity in the iteration.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@example</span></span><br><span class="line"> * Destroy every second 2D entity</span><br><span class="line"> *</span></span><br></pre></td></tr></table></figure>

     * Crafty(&quot;2D&quot;).each(function(i) {
     *     if(i % 2 === 0) {
     *         this.destroy();
     *     }
     * });
     * <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> */</span><br><span class="line">each: <span class="function"><span class="keyword">function</span> <span class="params">(func)</span> </span>{</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>,</span><br><span class="line">        l = this.length;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; l; i++) {</span><br><span class="line">        <span class="comment">//skip if not exists</span></span><br><span class="line">        <span class="keyword">if</span> (!entities[this[i]]) <span class="keyword">continue</span>;</span><br><span class="line">        func.call(entities[this[i]], i);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> this;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #.get</span><br><span class="line"> * <span class="doctag">@comp</span> Crafty Core</span><br><span class="line"> * <span class="doctag">@sign</span> public Array .get()</span><br><span class="line"> * <span class="doctag">@returns</span> An array of entities corresponding to the active selector</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@sign</span> public Entity .get(Number index)</span><br><span class="line"> * <span class="doctag">@returns</span> an entity belonging to the current selection</span><br><span class="line"> * <span class="doctag">@param</span> index - The index of the entity to return.  If negative, counts back from the end of the array.</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@example</span></span><br><span class="line"> * Get an array containing every &quot;2D&quot; entity</span><br><span class="line"> *</span></span><br></pre></td></tr></table></figure>

     * var arr = Crafty(&quot;2D&quot;).get()
     * <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* Get <span class="operator">the</span> <span class="keyword">first</span> entity matching <span class="operator">the</span> selector</span><br><span class="line">*</span><br></pre></td></tr></table></figure>

     * // equivalent to Crafty(&quot;2D&quot;).get()[0], but doesn&apos;t create a new array
     * var e = Crafty(&quot;2D&quot;).get(0)
     * <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* Get <span class="operator">the</span> <span class="keyword">last</span> <span class="string">&quot;2D&quot;</span> entity matching <span class="operator">the</span> selector</span><br><span class="line">*</span><br></pre></td></tr></table></figure>

     * var e = Crafty(&quot;2D&quot;).get(-1)
     * <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">get: <span class="function"><span class="keyword">function</span><span class="params">(index)</span> </span>{</span><br><span class="line">    <span class="keyword">var</span> l = this.length;</span><br><span class="line">    <span class="keyword">if</span> (typeof index !== <span class="string">&quot;undefined&quot;</span>) {</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= l || index+l &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> undefined;</span><br><span class="line">        <span class="keyword">if</span> (index&gt;=<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> entities[this[index]];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> entities[this[index+l]];</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">var</span> i=<span class="number">0</span>, result = [];</span><br><span class="line">        <span class="keyword">for</span> (; i &lt; l; i++) {</span><br><span class="line">            <span class="comment">//skip if not exists</span></span><br><span class="line">            <span class="keyword">if</span> (!entities[this[i]]) <span class="keyword">continue</span>;</span><br><span class="line">            result.push( entities[this[i]] );</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #.clone</span><br><span class="line"> * <span class="doctag">@comp</span> Crafty Core</span><br><span class="line"> * <span class="doctag">@sign</span> public Entity .clone(void)</span><br><span class="line"> * <span class="doctag">@returns</span> Cloned entity of the current entity</span><br><span class="line"> *</span><br><span class="line"> * Method will create another entity with the exact same</span><br><span class="line"> * properties, components and methods as the current entity.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">clone</span>: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">var</span> comps = this.__c,</span><br><span class="line">        comp,</span><br><span class="line">        prop,</span><br><span class="line">        <span class="keyword">clone</span> = Crafty.e();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (comp in comps) {</span><br><span class="line">        <span class="keyword">clone</span>.addComponent(comp);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (prop in this) {</span><br><span class="line">        <span class="keyword">if</span> (prop != <span class="string">&quot;0&quot;</span> &amp;&amp; prop != <span class="string">&quot;_global&quot;</span> &amp;&amp; prop != <span class="string">&quot;_changed&quot;</span> &amp;&amp; typeof this[prop] != <span class="string">&quot;function&quot;</span> &amp;&amp; typeof this[prop] != <span class="string">&quot;object&quot;</span>) {</span><br><span class="line">            <span class="keyword">clone</span>[prop] = this[prop];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">clone</span>;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #.setter</span><br><span class="line"> * <span class="doctag">@comp</span> Crafty Core</span><br><span class="line"> * <span class="doctag">@sign</span> public this .setter(String property, Function callback)</span><br><span class="line"> * <span class="doctag">@param</span> property - Property to watch for modification</span><br><span class="line"> * <span class="doctag">@param</span> callback - Method to execute if the property is modified</span><br><span class="line"> *</span><br><span class="line"> * Will watch a property waiting for modification and will then invoke the</span><br><span class="line"> * given callback when attempting to modify.</span><br><span class="line"> *</span><br><span class="line"> * This feature is deprecated; use .defineField() instead.</span><br><span class="line"> * <span class="doctag">@see</span> .defineField</span><br><span class="line"> */</span></span><br><span class="line">setter: <span class="function"><span class="keyword">function</span> <span class="params">(prop, callback)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> this.defineField(prop, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{}, callback);</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #.defineField</span><br><span class="line"> * <span class="doctag">@comp</span> Crafty Core</span><br><span class="line"> * <span class="doctag">@sign</span> public this .defineField(String property, Function getCallback, Function setCallback)</span><br><span class="line"> * <span class="doctag">@param</span> property - Property name to assign getter &amp; setter to</span><br><span class="line"> * <span class="doctag">@param</span> getCallback - Method to execute if the property is accessed</span><br><span class="line"> * <span class="doctag">@param</span> setCallback - Method to execute if the property is mutated</span><br><span class="line"> *</span><br><span class="line"> * Assigns getters and setters to the property. </span><br><span class="line"> * A getter will watch a property waiting for access and will then invoke the</span><br><span class="line"> * given getCallback when attempting to retrieve.</span><br><span class="line"> * A setter will watch a property waiting for mutation and will then invoke the</span><br><span class="line"> * given setCallback when attempting to modify.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@example</span></span><br><span class="line"> *</span></span><br></pre></td></tr></table></figure>

     * var ent = Crafty.e(&quot;2D&quot;);
     * ent.defineField(&quot;customData&quot;, function() { 
     *    return this._customData; 
     * }, function(newValue) { 
     *    this._customData = newValue;
     * });
     *
     * ent.customData = &quot;2&quot; // set customData to 2
     * Crafty.log(ent.customData) // prints 2
     * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">     <span class="keyword">*</span>/</span><br><span class="line">    defineField: function (prop, getCallback, setCallback) {</span><br><span class="line">        Crafty.defineField(this, prop, getCallback, setCallback);</span><br><span class="line">        return this;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    /<span class="keyword">*</span><span class="keyword">*</span>@</span><br><span class="line">     <span class="keyword">*</span> <span class="comment">#.destroy</span></span><br><span class="line">     <span class="keyword">*</span> <span class="comment">@comp Crafty Core</span></span><br><span class="line">     <span class="keyword">*</span> <span class="comment">@sign public this .destroy(void)</span></span><br><span class="line">     <span class="keyword">*</span> Will remove all event listeners and delete all properties as well as removing from the stage</span><br><span class="line">     <span class="keyword">*</span>/</span><br><span class="line">    destroy: function () {</span><br><span class="line">        //remove all event handlers, delete from entities</span><br><span class="line">        this.each(function () {</span><br><span class="line">            var comp;</span><br><span class="line">            this.trigger(<span class="string">&quot;Remove&quot;</span>);</span><br><span class="line">            for (var compName in this.__c) {</span><br><span class="line">                comp = components[compName];</span><br><span class="line">                if (comp &amp;&amp; <span class="string">&quot;remove&quot;</span> in comp)</span><br><span class="line">                    comp.remove.call(this, true);</span><br><span class="line">            }</span><br><span class="line">            this._unbindAll();</span><br><span class="line">            delete entities[this[0]];</span><br><span class="line">        });</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">//give the init instances the Crafty prototype</span><br><span class="line">Crafty.fn.init.prototype = Crafty.fn;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span>@</span><br><span class="line"> <span class="keyword">*</span> <span class="comment">#Crafty.extend</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@category Core</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@sign public this Crafty.extend(Object obj)</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param obj - An object whose fields will be copied onto Crafty.  This is a shallow copy.</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> Used to extend the Crafty namespace by passing in an object of properties and methods to add.</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@example</span></span><br><span class="line"> <span class="keyword">*</span> ~~~ <span class="keyword">*</span> </span><br><span class="line"> <span class="keyword">*</span> Crafty.extend({</span><br><span class="line"> <span class="keyword">*</span>   isArray: function(arg){</span><br><span class="line"> <span class="keyword">*</span>     return Object.prototype.toString.call(arg) === &apos;[object Array]&apos;</span><br><span class="line"> <span class="keyword">*</span>   }</span><br><span class="line"> <span class="keyword">*</span> });</span><br><span class="line"> <span class="keyword">*</span> </span><br><span class="line"> <span class="keyword">*</span> Crafty.isArray([4, 5, 6]);  // returns true</span><br><span class="line"> <span class="keyword">*</span> Crafty.isArray(&apos;hi&apos;);       // returns false</span><br><span class="line"> <span class="keyword">*</span></span><br></pre></td></tr></table></figure>

 */
Crafty.extend = Crafty.fn.extend = function (obj) {
    var target = this,
        key;

    //don&apos;t bother with nulls
    if (!obj) return target;

    for (key in obj) {
        if (target === obj[key]) continue; //handle circular reference
        target[key] = obj[key];
    }

    return target;
};




// How Crafty handles events and callbacks
// -----------------------------------------
// Callbacks are stored in the global object `handlers`, which has properties for each event.  
// These properties point to an object which has a property for each entity listening to the event.
// These in turn are arrays containing the callbacks to be triggered.
// 
// Here is an example of what &quot;handlers&quot; can look like:
//     handlers ===
//         { Move:  {5:[fnA], 6:[fnB, fnC], global:[fnD]},
//         Change: {6:[fnE]}
//         }
// In this example, when the &apos;Move&apos; event is triggered on entity #6 (e.g.
// entity6.trigger(&apos;Move&apos;)), it causes the execution of fnB() and fnC(). When
// the Move event is triggered globally (i.e. Crafty.trigger(&apos;Move&apos;)), it
// will execute fnA, fnB, fnC, fnD.
//
// In this example, &quot;this&quot; is bound to entity #6 whenever fnB() is executed, and
// &quot;this&quot; is bound to Crafty whenever fnD() is executed.
//
// In other words, the structure of &quot;handlers&quot; is:
//
//     handlers[event][objID] === (Array of callback functions)
//
// In addition to the global object, each object participating in the event system has a `_callbacks` property 
// which lists the events that object is listening to.  It allows access to the object&apos;s callbacks like this:
//     obj._callbacks[event] === (Array of callback functions)
//
// Objects, which can listen to events (or collections of such objects) have varying logic 
// on how the events are bound/triggered/unbound.  Since the underlying operations on the callback array are the same,
// the single-object operations are implemented in the following object.  
// Calling `Crafty._addCallbackMethods(obj)` on an object will extend that object with these methods.


 
Crafty._callbackMethods = {
    // Add a function to the list of callbacks for an event
    _bindCallback: function(event, fn) {
        // Get handle to event, creating it if necessary
        var callbacks = this._callbacks[event];
        if (!callbacks) {
            callbacks = this._callbacks[event] = ( handlers[event] || ( handlers[event] = {} ) )[this[0]] = [];
            callbacks.context = this;
            callbacks.depth = 0;
        }
        // Push to callback array
        callbacks.push(fn);
    },

    // Process for running all callbacks for the given event
    _runCallbacks: function(event, data) {
        if (!this._callbacks[event]) {
            return;
        }
        var callbacks = this._callbacks[event];

        // Callback loop; deletes dead callbacks, but only when it is safe to do so
        var i, l = callbacks.length;
        // callbacks.depth tracks whether this function was invoked in the middle of a previous iteration through the same callback array
        callbacks.depth++;
        for (i = 0; i &lt; l; i++) {
            if (typeof callbacks[i] === &quot;undefined&quot;) {
                if (callbacks.depth <= 1)="" {="" callbacks.splice(i,="" 1);="" i--;="" l--;="" delete="" callbacks="" object="" if="" there="" are="" no="" remaining="" bound="" events="" (callbacks.length="==" 0)="" this._callbacks[event];="" handlers[event][this[0]];="" }="" else="" callbacks[i].call(this,="" data);="" callbacks.depth--;="" },="" unbind="" for="" the="" given="" event="" fn="" is="" specified,="" only="" it="" will="" be="" removed;="" otherwise="" all="" _unbindcallbacks:="" function(event,="" fn)="" (!this._callbacks[event])="" return;="" var="" iterate="" through="" and="" callback="" functions="" that="" match="" they="" spliced="" out="" when="" _runcallbacks="" invoked,="" not="" here="" (this="" function="" might="" called="" in="" middle="" of="" a="" callback,="" which="" complicates="" logic)="" (var="" i="0;" <="" callbacks.length;="" i++)="" (!fn="" ||="" callbacks[i]="=" callbacks[i];="" completely="" every="" event,="" such="" as="" on="" destruction="" _unbindall:="" function()="" (!this._callbacks)="" this._callbacks)="" (this._callbacks[event])="" remove="" normal="" way,="" case="" we've="" got="" nested="" loop this._unbindcallbacks(event);="" also="" registered="" from="" handlers="" };="" helper="" to="" add="" methods="" above="" an="" object,="" well="" initializing="" provies="" "low="" level"="" operations;="" bind,="" unbind,="" trigger="" still="" need="" implemented="" crafty._addcallbackmethods="function(context)" context.extend(crafty._callbackmethods);="" context._callbacks="{};" crafty._addcallbackmethods(crafty);="" crafty.extend({="" define="" crafty's="" id="" 0:="" "global",="" **@="" *="" #crafty.init="" @category="" core="" @trigger="" load="" -="" just="" after="" viewport="" initialised.="" before="" enterframe="" loops="" started="" @sign="" public="" this="" crafty.init([number="" width,="" number="" height,="" string="" stage_elem])="" htmlelement="" @param="" width="" stage="" height="" or="" stage_elem="" element="" use="" sets="" stage,="" creating="" necessary.="" by="" default div="" with="" 'cr-stage'="" used,="" but="" 'stage_elem'="" argument="" provided="" used="" instead.="" (see="" `crafty.viewport.init`)="" starts="" `enterframe`="" interval.="" call="" frame.="" can="" pass="" values="" window="" size.="" `load`="" executed.="" uses="" `requestanimationframe`="" sync="" drawing="" browser="" `setinterval`="" does="" support="" it.="" @see="" crafty.stop,="" crafty.viewport="" init:="" (w,="" h,="" stage_elem)="" necessary,="" attach="" any="" crafty="" (!this._prebinddone)="" for(var="" this._bindoninit.length;="" prebind="this._bindOnInit[i];" crafty.bind(prebind.event,="" prebind.handler);="" crafty.viewport.init(w,="" stage_elem);="" arbitrary="" attached="" onload="" this.trigger("load");="" this.timer.init();="" return="" this;="" some="" it's="" restarted,="" so="" store="" them="" switching="" internals="" new="" system="" idiom="" should="" allow="" removing="" hack="" _bindoninit:="" [],="" _prebinddone:="" false,="" _prebind:="" handler)="" this._bindoninit.push({="" event:="" handler:="" handler="" });="" #crafty.getversion="" crafty.getversion()="" @returns="" current="" version="" @example="" <figure="" class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* <span class="constant">Crafty.</span>getVersion(); <span class="regexp">//</span><span class="string">&apos;0.5.2&apos;</span></span><br><span class="line">*</span><br></pre></td></tr></table>

     */
    getVersion: function () {
        return version;
    },

    /**@
     * #Crafty.stop
     * @category Core
     * @trigger CraftyStop - when the game is stopped  - {bool clearState}
     * @sign public this Crafty.stop([bool clearState])
     * @param clearState - if true the stage and all game state is cleared.
     *
     * Stops the EnterFrame interval and removes the stage element.
     *
     * To restart, use `Crafty.init()`.
     * @see Crafty.init
     */
    stop: function (clearState) {
        Crafty.trigger(&quot;CraftyStop&quot;, clearState);

        this.timer.stop();
        if (clearState) {
            // Remove audio
            Crafty.audio.remove();

            // Remove the stage element, and re-add a div with the same id
            if (Crafty.stage &amp;&amp; Crafty.stage.elem.parentNode) {
                var newCrStage = document.createElement(&apos;div&apos;);
                newCrStage.id = Crafty.stage.elem.id;
                Crafty.stage.elem.parentNode.replaceChild(newCrStage, Crafty.stage.elem);
            }

            // Reset references to the now destroyed graphics layers
            delete Crafty.canvasLayer.context;
            delete Crafty.domLayer._div;
            delete Crafty.webgl.context;

            // reset callbacks, and indicate that prebound functions need to be bound on init again
            Crafty._unbindAll();
            Crafty._addCallbackMethods(Crafty);
            this._preBindDone = false;

            initState();
        }
        return this;
    },

    /**@
     * #Crafty.pause
     * @category Core
     * @trigger Pause - when the game is paused
     * @trigger Unpause - when the game is unpaused
     * @sign public this Crafty.pause(void)
     *
     * Pauses the game by stopping the EnterFrame event from firing. If the game is already paused it is unpaused.
     * You can pass a boolean parameter if you want to pause or unpause no matter what the current state is.
     * Modern browsers pauses the game when the page is not visible to the user. If you want the Pause event
     * to be triggered when that happens you can enable autoPause in `Crafty.settings`.
     *
     * @example
     * Have an entity pause the game when it is clicked.
     * <figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* button.<span class="keyword">bind</span>(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> {</span><br><span class="line">*     Crafty.<span class="keyword">pause</span>();</span><br><span class="line">* });</span><br><span class="line">*</span><br></pre></td></tr></table></figure>

     */
    pause: function (toggle) {
        if (arguments.length === 1 ? toggle : !this._paused) {
            this.trigger(&apos;Pause&apos;);
            this._paused = true;
            setTimeout(function () {
                Crafty.timer.stop();
            }, 0);
            Crafty.keydown = {};
        } else {
            this.trigger(&apos;Unpause&apos;);
            this._paused = false;
            setTimeout(function () {
                Crafty.timer.init();
            }, 0);
        }
        return this;
    },

    /**@
     * #Crafty.isPaused
     * @category Core
     * @sign public Boolean Crafty.isPaused()
     * @returns Whether the game is currently paused.
     *
     * @example
     * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span> Crafty.isPaused();</span><br><span class="line"><span class="keyword">*</span></span><br></pre></td></tr></table></figure>

     */
    isPaused: function () {
        return this._paused;
    },

    /**@
     * #Crafty.timer
     * @category Game Loop
     * Handles game ticks
     */
    timer: (function () {
        /*
         * `window.requestAnimationFrame` or its variants is called for animation.
         * `.requestID` keeps a record of the return value previous `window.requestAnimationFrame` call.
         * This is an internal variable. Used to stop frame.
         */
        var tick, requestID;

        // Internal variables used to control the game loop.  Use Crafty.timer.steptype() to set these.
        var mode = &quot;fixed&quot;,
            maxFramesPerStep = 5,
            maxTimestep = 40;

        // variables used by the game loop to track state
        var endTime = 0,
            timeSlip = 0,
            gameTime;

        // Controls the target rate of fixed mode loop.  Set these with the Crafty.timer.FPS function
        var FPS = 50,
            milliSecPerFrame = 1000 / FPS;




        return {
            init: function () {
                // When first called, set the  gametime one frame before now!
                if (typeof gameTime === &quot;undefined&quot;)
                    gameTime = (new Date().getTime()) - milliSecPerFrame;

                var onFrame = (typeof window !== &quot;undefined&quot;) &amp;&amp; (
                    window.requestAnimationFrame ||
                    window.webkitRequestAnimationFrame ||
                    window.mozRequestAnimationFrame ||
                    window.oRequestAnimationFrame ||
                    window.msRequestAnimationFrame ||
                    null
                );

                if (onFrame) {
                    tick = function () {
                        Crafty.timer.step();
                        if (tick !== null) {
                            requestID = onFrame(tick);
                        }
                        //Crafty.log(requestID + &apos;, &apos; + frame)
                    };

                    tick();
                } else {
                    tick = setInterval(function () {
                        Crafty.timer.step();
                    }, 1000 / FPS);
                }
            },

            stop: function () {
                Crafty.trigger(&quot;CraftyStopTimer&quot;);

                if (typeof tick !== &quot;function&quot;) clearInterval(tick);

                var onFrame = (typeof window !== &quot;undefined&quot;) &amp;&amp; (
                    window.cancelAnimationFrame ||
                    window.cancelRequestAnimationFrame ||
                    window.webkitCancelRequestAnimationFrame ||
                    window.mozCancelRequestAnimationFrame ||
                    window.oCancelRequestAnimationFrame ||
                    window.msCancelRequestAnimationFrame ||
                    null
                );

                if (onFrame) onFrame(requestID);
                tick = null;
            },


            /**@
             * #Crafty.timer.steptype
             * @comp Crafty.timer
             * @sign public void Crafty.timer.steptype(mode [, maxTimeStep])
             * Can be called to set the type of timestep the game loop uses
             * @param mode - the type of time loop.  Allowed values are &quot;fixed&quot;, &quot;semifixed&quot;, and &quot;variable&quot;.  Crafty defaults to &quot;fixed&quot;.
             * @param maxTimeStep - For &quot;fixed&quot;, sets the max number of frames per step.   For &quot;variable&quot; and &quot;semifixed&quot;, sets the maximum time step allowed.
             *
             * * In &quot;fixed&quot; mode, each frame is sent the same value of `dt`, and to achieve the target game speed, mulitiple frame events are triggered before each render.
             * * In &quot;variable&quot; mode, there is only one frame triggered per render.  This recieves a value of `dt` equal to the actual elapsed time since the last frame.
             * * In &quot;semifixed&quot; mode, multiple frames per render are processed, and the total time since the last frame is divided evenly between them.
             *
             */

            steptype: function (newmode, option) {
                if (newmode === &quot;variable&quot; || newmode === &quot;semifixed&quot;) {
                    mode = newmode;
                    if (option)
                        maxTimestep = option;

                } else if (newmode === &quot;fixed&quot;) {
                    mode = &quot;fixed&quot;;
                    if (option)
                        maxFramesPerStep = option;
                } else {
                    throw &quot;Invalid step type specified&quot;;
                }


            },

            /**@
             * #Crafty.timer.step
             * @comp Crafty.timer
             * @sign public void Crafty.timer.step()
             * @trigger EnterFrame - Triggered on each frame.  Passes the frame number, and the amount of time since the last frame.  If the time is greater than maxTimestep, that will be used instead.  (The default value of maxTimestep is 50 ms.) - { frame: Number, dt:Number }
             * @trigger ExitFrame - Triggered after each frame.  Passes the frame number, and the amount of time since the last frame.  If the time is greater than maxTimestep, that will be used instead.  (The default value of maxTimestep is 50 ms.) - { frame: Number, dt:Number }
             * @trigger PreRender - Triggered every time immediately before a scene should be rendered
             * @trigger RenderScene - Triggered every time a scene should be rendered
             * @trigger PostRender - Triggered every time immediately after a scene should be rendered
             * @trigger MeasureWaitTime - Triggered at the beginning of each step after the first.  Passes the time the game loop waited between steps. - Number
             * @trigger MeasureFrameTime - Triggered after each frame.  Passes the time it took to advance one frame. - Number
             * @trigger MeasureRenderTime - Triggered after each render. Passes the time it took to render the scene - Number
             *
             * Advances the game by performing a step. A step consists of one/multiple frames followed by a render. The amount of frames depends on the timer&apos;s steptype.
             * Specifically it triggers `EnterFrame` &amp; `ExitFrame` events for each frame and `PreRender`, `RenderScene` &amp; `PostRender` events for each render.
             *
             * @see Crafty.timer.steptype
             */
            step: function () {
                var drawTimeStart, dt, lastFrameTime, loops = 0;

                currentTime = new Date().getTime();
                if (endTime &gt; 0)
                    Crafty.trigger(&quot;MeasureWaitTime&quot;, currentTime - endTime);

                // If we&apos;re currently ahead of the current time, we need to wait until we&apos;re not!
                if (gameTime + timeSlip &gt;= currentTime) {
                    endTime = currentTime;
                    return;
                }

                var netTimeStep = currentTime - (gameTime + timeSlip);
                // We try to keep up with the target FPS by processing multiple frames per render
                // If we&apos;re hopelessly behind, stop trying to catch up.
                if (netTimeStep &gt; milliSecPerFrame * 20) {
                    //gameTime = currentTime - milliSecPerFrame;
                    timeSlip += netTimeStep - milliSecPerFrame;
                    netTimeStep = milliSecPerFrame;
                }

                // Set up how time is incremented
                if (mode === &quot;fixed&quot;) {
                    loops = Math.ceil(netTimeStep / milliSecPerFrame);
                    // maxFramesPerStep adjusts how willing we are to delay drawing in order to keep at the target FPS
                    loops = Math.min(loops, maxFramesPerStep);
                    dt = milliSecPerFrame;
                } else if (mode === &quot;variable&quot;) {
                    loops = 1;
                    dt = netTimeStep;
                    // maxTimestep is the maximum time to be processed in a frame.  (Large dt =&gt; unstable physics)
                    dt = Math.min(dt, maxTimestep);
                } else if (mode === &quot;semifixed&quot;) {
                    loops = Math.ceil(netTimeStep / maxTimestep);
                    dt = netTimeStep / loops;
                }

                // Process frames, incrementing the game clock with each frame.
                // dt is determined by the mode
                for (var i = 0; i &lt; loops; i++) {
                    lastFrameTime = currentTime;
                    
                    var frameData = {
                        frame: frame++,
                        dt: dt,
                        gameTime: gameTime
                    };
                    // Everything that changes over time hooks into this event
                    Crafty.trigger(&quot;EnterFrame&quot;, frameData);
                    // Event that happens after &quot;EnterFrame&quot;, e.g. for resolivng collisions applied through movement during &quot;EnterFrame&quot; events
                    Crafty.trigger(&quot;ExitFrame&quot;, frameData);
                    gameTime += dt;

                    currentTime = new Date().getTime();
                    Crafty.trigger(&quot;MeasureFrameTime&quot;, currentTime - lastFrameTime);
                }

                //If any frames were processed, render the results
                if (loops &gt; 0) {
                    drawTimeStart = currentTime;
                    Crafty.trigger(&quot;PreRender&quot;); // Pre-render setup opportunity
                    Crafty.trigger(&quot;RenderScene&quot;);
                    Crafty.trigger(&quot;PostRender&quot;); // Post-render cleanup opportunity
                    currentTime = new Date().getTime();
                    Crafty.trigger(&quot;MeasureRenderTime&quot;, currentTime - drawTimeStart);
                }

                endTime = currentTime;
            },
            /**@
             * #Crafty.timer.FPS
             * @comp Crafty.timer
             * @sign public void Crafty.timer.FPS()
             * Returns the target frames per second. This is not an actual frame rate.
             * @sign public void Crafty.timer.FPS(Number value)
             * @param value - the target rate
             * @trigger FPSChange - Triggered when the target FPS is changed by user - Number - new target FPS
             *
             * Sets the target frames per second. This is not an actual frame rate.
             * The default rate is 50.
             */
            FPS: function (value) {
                if (typeof value == &quot;undefined&quot;)
                    return FPS;
                else {
                    FPS = value;
                    milliSecPerFrame = 1000 / FPS;
                    Crafty.trigger(&quot;FPSChange&quot;, value);
                }
            },

            /**@
             * #Crafty.timer.simulateFrames
             * @comp Crafty.timer
             * @sign public this Crafty.timer.simulateFrames(Number frames[, Number timestep])
             * Advances the game state by a number of frames and draws the resulting stage at the end. Useful for tests and debugging.
             * @param frames - number of frames to simulate
             * @param timestep - the duration to pass each frame.  Defaults to milliSecPerFrame (20 ms) if not specified.
             */
            simulateFrames: function (frames, timestep) {
                if (typeof timestep === &quot;undefined&quot;)
                    timestep = milliSecPerFrame;
                while (frames-- &gt; 0) {
                    var frameData = {
                        frame: frame++,
                        dt: timestep
                    };
                    Crafty.trigger(&quot;EnterFrame&quot;, frameData);
                    Crafty.trigger(&quot;ExitFrame&quot;, frameData);
                }
                Crafty.trigger(&quot;PreRender&quot;);
                Crafty.trigger(&quot;RenderScene&quot;);
                Crafty.trigger(&quot;PostRender&quot;);
            }
        };
    })(),


    /**@
     * #Crafty.e
     * @category Core
     * @trigger NewEntity - When the entity is created and all components are added - { id:Number }
     * @sign public Entity Crafty.e(String componentList)
     * @param componentList - List of components to assign to new entity
     * @sign public Entity Crafty.e(String component1[, .., String componentN])
     * @param component# - Component to add
     *
     * Creates an entity. Any arguments will be applied in the same
     * way `.addComponent()` is applied as a quick way to add components.
     *
     * Any component added will augment the functionality of
     * the created entity by assigning the properties and methods from the component to the entity.
     *
     * @example
     * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span> var myEntity = Crafty.e(<span class="string">&quot;2D, DOM, Color&quot;</span>);</span><br><span class="line"><span class="keyword">*</span></span><br></pre></td></tr></table></figure>

     *
     * @see Crafty.c
     */
    e: function () {
        var id = UID();
        entities[id] = null;
        entities[id] = Crafty(id);

        if (arguments.length &gt; 0) {
            entities[id].addComponent.apply(entities[id], arguments);
        }
        entities[id].setName(&apos;Entity #&apos; + id); //set default entity human readable name
        entities[id].addComponent(&quot;obj&quot;); //every entity automatically assumes obj

        Crafty.trigger(&quot;NewEntity&quot;, {
            id: id
        });

        return entities[id];
    },

    /**@
     * #Crafty.c
     * @category Core
     * @sign public void Crafty.c(String name, Object component)
     * @param name - Name of the component
     * @param component - Object with the component&apos;s properties and methods
     *
     * Creates a component where the first argument is the ID and the second
     * is the object that will be inherited by entities.
     *
     * Specifically, each time a component is added to an entity, the component properties are copied over to the entity. 
     * * In the case of primitive datatypes (booleans, numbers, strings) the property is copied by value.
     * * In the case of complex datatypes (objects, arrays, functions) the property is copied by reference and will thus reference the components&apos; original property.
     * * (See the two examples below for further explanation)
     * Note that when a component method gets called, the `this` keyword will refer to the current entity the component was added to.
     *
     * A handful of methods or properties are treated specially. They are invoked in partiular contexts, and (in those contexts) cannot be overridden by other components.
     *
     * - `required`: A string listing required components, which will be added to the component before `init()` runs.
     * - `init`: A function to be called when the component is added to an entity
     * - `remove`: A function which will be called just before a component is removed, or before an entity is destroyed. It is passed a single boolean parameter that is `true` if the entity is being destroyed.
     * - `events`: An object whose properties represent functions bound to events equivalent to the property names.  (See the example below.)  The binding occurs directly after the call to `init`, and will be removed directly before `remove` is called.
     *
     * In addition to these hardcoded special methods, there are some conventions for writing components.
     *
     * - Properties or methods that start with an underscore are considered private.
     * - A method with the same name as the component is considered to be a constructor
     * and is generally used when you need to pass configuration data to the component on a per entity basis.
     *
     * @example
     * <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">* Crafty.c(<span class="string">&quot;Annoying&quot;</span>, {</span><br><span class="line">*     _message: <span class="string">&quot;HiHi&quot;</span>,</span><br><span class="line">*     init: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</span><br><span class="line">*         <span class="keyword">this</span>.bind(<span class="string">&quot;EnterFrame&quot;</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{ alert(<span class="keyword">this</span>.message); });</span><br><span class="line">*     },</span><br><span class="line">*     annoying: <span class="function"><span class="keyword">function</span><span class="params">(message)</span> </span>{ <span class="keyword">this</span>.message = message; }</span><br><span class="line">* });</span><br><span class="line">*</span><br><span class="line">* Crafty.e(<span class="string">&quot;Annoying&quot;</span>).annoying(<span class="string">&quot;I&apos;m an orange...&quot;</span>);</span><br><span class="line">*</span><br></pre></td></tr></table></figure>

     * To attach to the &quot;EnterFrame&quot; event using the `events` property instead:
     * <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* Crafty.c(<span class="string">&quot;Annoying&quot;</span>, {</span><br><span class="line">*     _message: <span class="string">&quot;HiHi&quot;</span>,</span><br><span class="line">*     events: {</span><br><span class="line">*         <span class="string">&quot;EnterFrame&quot;</span>: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{alert(<span class="keyword">this</span>.message);}</span><br><span class="line">*     }</span><br><span class="line">*     annoying: <span class="function"><span class="keyword">function</span><span class="params">(message)</span> </span>{ <span class="keyword">this</span>.message = message; }</span><br><span class="line">* });</span><br><span class="line">*</span><br></pre></td></tr></table></figure>

     *
     *
     * @warning In the examples above the field _message is local to the entity. 
     * That is, if you create many entities with the Annoying component, they can all have different values for _message.
     * That is because it is a simple value, and simple values are copied by value. 
     * If however the field had been an object or array, 
     * the value would have been shared by all entities with the component,
     * because complex types are copied by reference in javascript.
     * This is probably not what you want and the following example demonstrates how to work around it.
     *
     * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span> Crafty.c(<span class="string">&quot;MyComponent&quot;</span>, {</span><br><span class="line"><span class="keyword">*</span>     _iAmShared: { a: 3, b: 4 },</span><br><span class="line"><span class="keyword">*</span>     init: function() {</span><br><span class="line"><span class="keyword">*</span>         this._iAmNotShared = { a: 3, b: 4 };</span><br><span class="line"><span class="keyword">*</span>     },</span><br><span class="line"><span class="keyword">*</span> });</span><br><span class="line"><span class="keyword">*</span></span><br></pre></td></tr></table></figure>

     *
     * @see Crafty.e
     */
    c: function (compName, component) {
        components[compName] = component;
    },

    /**@
     * #Crafty.trigger
     * @category Core, Events
     * @sign public void Crafty.trigger(String eventName, * data)
     * @param eventName - Name of the event to trigger
     * @param data - Arbitrary data to pass into the callback as an argument
     *
     * This method will trigger every single callback attached to the event name. This means
     * every global event and every entity that has a callback.
     *
     * @see Crafty.bind
     */
    trigger: function (event, data) {

        //  To learn how the event system functions, see the comments for Crafty._callbackMethods
        var hdl = handlers[event] || (handlers[event] = {}),
            h, callbacks;
        //loop over every object bound
        for (h in hdl) {
            // Check whether h needs to be processed
            if (!hdl.hasOwnProperty(h)) continue;
            callbacks = hdl[h];
            if (!callbacks || callbacks.length === 0) continue;

            callbacks.context._runCallbacks(event, data);
        }
    },

    /**@
     * #Crafty.bind
     * @category Core, Events
     * @sign public Function bind(String eventName, Function callback)
     * @param eventName - Name of the event to bind to
     * @param callback - Method to execute upon event triggered
     * @returns callback function which can be used for unbind
     *
     * Binds to a global event. Method will be executed when `Crafty.trigger` is used
     * with the event name.
     *
     * @see Crafty.trigger, Crafty.unbind
     */
    bind: function (event, callback) {

        // To learn how the event system functions, see the comments for Crafty._callbackMethods
        this._bindCallback(event, callback);
        return callback;
    },


    /**@
     * #Crafty.uniqueBind
     * @category Core, Events
     * @sign public Function uniqueBind(String eventName, Function callback)
     * @param eventName - Name of the event to bind to
     * @param callback - Method to execute upon event triggered
     * @returns callback function which can be used for unbind
     *
     * Works like Crafty.bind, but prevents a callback from being bound multiple times.
     *
     * @see Crafty.bind
     */
    uniqueBind: function (event, callback) {
        this.unbind(event, callback);
        return this.bind(event, callback);
    },

    /**@
     * #Crafty.one
     * @category Core, Events
     * @sign public Function one(String eventName, Function callback)
     * @param eventName - Name of the event to bind to
     * @param callback - Method to execute upon event triggered
     * @returns callback function which can be used for unbind
     *
     * Works like Crafty.bind, but will be unbound once the event triggers.
     *
     * @see Crafty.bind
     */
    one: function (event, callback) {
        var self = this;
        var oneHandler = function (data) {
            callback.call(self, data);
            self.unbind(event, oneHandler);
        };
        return self.bind(event, oneHandler);
    },

    /**@
     * #Crafty.unbind
     * @category Core, Events
     * @sign public Boolean Crafty.unbind(String eventName, Function callback)
     * @param eventName - Name of the event to unbind
     * @param callback - Function to unbind
     * @example
     * <figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*    <span class="keyword">var</span> play_gameover_sound = function () <span class="decorator">{...}</span>;</span><br><span class="line">*    <span class="type">Crafty</span>.<span class="keyword">bind</span>(&apos;<span class="type">GameOver</span>&apos;, play_gameover_sound);</span><br><span class="line">*    ...</span><br><span class="line">*    <span class="type">Crafty</span>.unbind(&apos;<span class="type">GameOver</span>&apos;, play_gameover_sound);</span><br><span class="line">*</span><br></pre></td></tr></table></figure>

     *
     * The first line defines a callback function. The second line binds that
     * function so that `Crafty.trigger(&apos;GameOver&apos;)` causes that function to
     * run. The third line unbinds that function.
     *
     * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span>    Crafty.unbind(&apos;GameOver&apos;);</span><br><span class="line"><span class="keyword">*</span></span><br></pre></td></tr></table></figure>

     *
     * This unbinds ALL global callbacks for the event &apos;GameOver&apos;. That
     * includes all callbacks attached by `Crafty.bind(&apos;GameOver&apos;, ...)`, but
     * none of the callbacks attached by `some_entity.bind(&apos;GameOver&apos;, ...)`.
     */
    unbind: function (event, callback) {
        //  To learn how the event system functions, see the comments for Crafty._callbackMethods
        this._unbindCallbacks(event, callback);
    },

    /**@
     * #Crafty.frame
     * @category Core
     * @sign public Number Crafty.frame(void)
     * @returns the current frame number
     */
    frame: function () {
        return frame;
    },

    components: function () {
        return components;
    },

    isComp: function (comp) {
        return comp in components;
    },

    debug: function (str) {
        // access internal variables - handlers or entities
        if (str === &apos;handlers&apos;) {
            return handlers;
        }
        return entities;
    },

    /**@
     * #Crafty.settings
     * @category Core
     * Modify the inner workings of Crafty through the settings.
     */
    settings: (function () {
        var states = {},
            callbacks = {};

        return {
            /**@
             * #Crafty.settings.register
             * @comp Crafty.settings
             * @sign public void Crafty.settings.register(String settingName, Function callback)
             * @param settingName - Name of the setting
             * @param callback - Function to execute when use modifies setting
             *
             * Use this to register custom settings. Callback will be executed when `Crafty.settings.modify` is used.
             *
             * @see Crafty.settings.modify
             */
            register: function (setting, callback) {
                callbacks[setting] = callback;
            },

            /**@
             * #Crafty.settings.modify
             * @comp Crafty.settings
             * @sign public void Crafty.settings.modify(String settingName, * value)
             * @param settingName - Name of the setting
             * @param value - Value to set the setting to
             *
             * Modify settings through this method.
             *
             * @see Crafty.settings.register, Crafty.settings.get
             */
            modify: function (setting, value) {
                if (!callbacks[setting]) return;
                callbacks[setting].call(states[setting], value);
                states[setting] = value;
            },

            /**@
             * #Crafty.settings.get
             * @comp Crafty.settings
             * @sign public * Crafty.settings.get(String settingName)
             * @param settingName - Name of the setting
             * @returns Current value of the setting
             *
             * Returns the current value of the setting.
             *
             * @see Crafty.settings.register, Crafty.settings.get
             */
            get: function (setting) {
                return states[setting];
            }
        };
    })(),

    /**@
     * #Crafty.defineField
     * @category Core
     * @sign public void Crafty.defineField(Object object, String property, Function getCallback, Function setCallback)
     * @param object - Object to define property on
     * @param property - Property name to assign getter &amp; setter to
     * @param getCallback - Method to execute if the property is accessed
     * @param setCallback - Method to execute if the property is mutated
     *
     * Assigns getters and setters to the property in the given object.
     * A getter will watch a property waiting for access and will then invoke the
     * given getCallback when attempting to retrieve.
     * A setter will watch a property waiting for mutation and will then invoke the
     * given setCallback when attempting to modify.
     *
     * @example
     * <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">* <span class="keyword">var</span> ent = Crafty.e(<span class="string">&quot;2D&quot;</span>);</span><br><span class="line">* Crafty.defineField(ent, <span class="string">&quot;customData&quot;</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{ </span><br><span class="line">*    <span class="keyword">return</span> <span class="keyword">this</span>._customData; </span><br><span class="line">* }, <span class="function"><span class="keyword">function</span><span class="params">(newValue)</span> </span>{ </span><br><span class="line">*    <span class="keyword">this</span>._customData = newValue;</span><br><span class="line">* });</span><br><span class="line">*</span><br><span class="line">* ent.customData = <span class="string">&quot;2&quot;</span> <span class="comment">// set customData to 2</span></span><br><span class="line">* Crafty.log(ent.customData) <span class="comment">// prints 2</span></span><br><span class="line">*</span><br></pre></td></tr></table></figure>

     * @see Crafty Core#.defineField
     */
    defineField: function(obj, prop, getCallback, setCallback) {
        Object.defineProperty(obj, prop, {
            get: getCallback,
            set: setCallback,
            configurable: false,
            enumerable: true,
        });
    },

    clone: clone
});

/**
 * Return a unique ID
 */

function UID() {
    var id = GUID++;
    //if GUID is not unique
    if (id in entities) {
        return UID(); //recurse until it is unique
    }
    return id;
}

/**@
 * #Crafty.clone
 * @category Core
 * @sign public Object .clone(Object obj)
 * @param obj - an object
 *
 * Deep copy (a.k.a clone) of an object.
 * 
 * @example
 * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span> // Null or Primitive types</span><br><span class="line"><span class="keyword">*</span> Crafty.clone(null); // returns null</span><br><span class="line"><span class="keyword">*</span> Crafty.clone(4);    // returns 4</span><br><span class="line"><span class="keyword">*</span> </span><br><span class="line"><span class="keyword">*</span> // Objects</span><br><span class="line"><span class="keyword">*</span> var globalCount = 0;</span><br><span class="line"><span class="keyword">*</span> var obj1 = {</span><br><span class="line"><span class="keyword">*</span>   count: 0,</span><br><span class="line"><span class="keyword">*</span>   inc: function(){</span><br><span class="line"><span class="keyword">*</span>      this.count++;</span><br><span class="line"><span class="keyword">*</span>      globalCount++;</span><br><span class="line"><span class="keyword">*</span>   },</span><br><span class="line"><span class="keyword">*</span>   log: function(){</span><br><span class="line"><span class="keyword">*</span>     console.log(this.count + &apos;/&apos; + globalCount);</span><br><span class="line"><span class="keyword">*</span>   }</span><br><span class="line"><span class="keyword">*</span> };</span><br><span class="line"><span class="keyword">*</span> </span><br><span class="line"><span class="keyword">*</span> obj1.inc();</span><br><span class="line"><span class="keyword">*</span> obj1.log(); // prints <span class="string">&quot;1/1&quot;</span> to the log</span><br><span class="line"><span class="keyword">*</span> </span><br><span class="line"><span class="keyword">*</span> var obj2 = Crafty.clone(obj1);</span><br><span class="line"><span class="keyword">*</span> obj2.log(); // prints <span class="string">&quot;1/1&quot;</span> to the log</span><br><span class="line"><span class="keyword">*</span> </span><br><span class="line"><span class="keyword">*</span> obj1.inc();</span><br><span class="line"><span class="keyword">*</span> obj1.log(); // prints <span class="string">&quot;2/2&quot;</span> to the log</span><br><span class="line"><span class="keyword">*</span> obj2.log(); // prints <span class="string">&quot;1/2&quot;</span> to the log</span><br><span class="line"><span class="keyword">*</span></span><br></pre></td></tr></table></figure>

 */

function clone(obj) {
    if (obj === null || typeof (obj) != &apos;object&apos;)
        return obj;

    var temp = obj.constructor(); // changed

    for (var key in obj)
        temp[key] = clone(obj[key]);
    return temp;
}

// export Crafty
if (typeof define === &apos;function&apos;) { // AMD
    define(&apos;crafty&apos;, [], function () {
        return Crafty;
    });
}

module.exports = Crafty;

},{&quot;./version&quot;:16}],8:[function(require,module,exports){
(function (process){
var Crafty = require(&apos;./core&apos;);
var document = (typeof window !== &quot;undefined&quot;) &amp;&amp; window.document;

/**@
 * #Crafty.support
 * @category Misc, Core
 * Determines feature support for what Crafty can do.
 */
(function testSupport() {
    var support = Crafty.support = {},
        ua = (typeof navigator !== &quot;undefined&quot; &amp;&amp; navigator.userAgent.toLowerCase()) || (typeof process !== &quot;undefined&quot; &amp;&amp; process.version),
        match = /(webkit)[ \/]([\w.]+)/.exec(ua) ||
            /(o)pera(?:.*version)?[ \/]([\w.]+)/.exec(ua) ||
            /(ms)ie ([\w.]+)/.exec(ua) ||
            /(moz)illa(?:.*? rv:([\w.]+))?/.exec(ua) ||
            /(v)\d+\.(\d+)/.exec(ua) || [],
        mobile = /iPad|iPod|iPhone|Android|webOS|IEMobile/i.exec(ua);

    /**@
     * #Crafty.mobile
     * @comp Crafty.device
     *
     * Determines if Crafty is running on mobile device.
     *
     * If Crafty.mobile is equal true Crafty does some things under hood:
     * <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* - <span class="keyword">set</span> viewport <span class="function_start"><span class="keyword">on</span></span> max device width <span class="keyword">and</span> height</span><br><span class="line">* - <span class="keyword">set</span> Crafty.stage.fullscreen <span class="function_start"><span class="keyword">on</span></span> <span class="constant">true</span></span><br><span class="line">* - hide window scrollbars</span><br><span class="line">*</span><br></pre></td></tr></table></figure>

     *
     * @see Crafty.viewport
     */
    if (mobile) Crafty.mobile = mobile[0];

    /**@
     * #Crafty.support.defineProperty
     * @comp Crafty.support
     * Is `Object.defineProperty` supported?
     */
    support.defineProperty = (function () {
        if (!(&apos;defineProperty&apos; in Object)) return false;
        try {
            Object.defineProperty({}, &apos;x&apos;, {});
        } catch (e) {
            return false;
        }
        return true;
    })();

    /**@
     * #Crafty.support.audio
     * @comp Crafty.support
     * Is HTML5 `Audio` supported?
     */
    support.audio = (typeof window !== &quot;undefined&quot;) &amp;&amp; (&apos;canPlayType&apos; in document.createElement(&apos;audio&apos;));

    /**@
     * #Crafty.support.prefix
     * @comp Crafty.support
     * Returns the browser specific prefix (`Moz`, `O`, `ms`, `webkit`, `node`).
     */
    support.prefix = (match[1] || match[0]);

    //browser specific quirks
    if (support.prefix === &quot;moz&quot;) support.prefix = &quot;Moz&quot;;
    if (support.prefix === &quot;o&quot;) support.prefix = &quot;O&quot;;
    if (support.prefix === &quot;v&quot;) support.prefix = &quot;node&quot;;

    if (match[2]) {
        /**@
         * #Crafty.support.versionName
         * @comp Crafty.support
         * Version of the browser
         */
        support.versionName = match[2];

        /**@
         * #Crafty.support.version
         * @comp Crafty.support
         * Version number of the browser as an Integer (first number)
         */
        support.version = +(match[2].split(&quot;.&quot;))[0];
    }

    /**@
     * #Crafty.support.canvas
     * @comp Crafty.support
     * Is the `canvas` element supported?
     */
    support.canvas = (typeof window !== &quot;undefined&quot;) &amp;&amp; (&apos;getContext&apos; in document.createElement(&quot;canvas&quot;));

    /**@
     * #Crafty.support.webgl
     * @comp Crafty.support
     * Is WebGL supported on the canvas element?
     */
    if (support.canvas) {
        var gl;
        try {
            var c = document.createElement(&quot;canvas&quot;);
            gl = c.getContext(&quot;webgl&quot;) || c.getContext(&quot;experimental-webgl&quot;);
            gl.viewportWidth = support.canvas.width;
            gl.viewportHeight = support.canvas.height;
        } catch (e) {}
        support.webgl = !! gl;
    } else {
        support.webgl = false;
    }

    /**@
     * #Crafty.support.css3dtransform
     * @comp Crafty.support
     * Is css3Dtransform supported by browser.
     */
    support.css3dtransform = (typeof window !== &quot;undefined&quot;) &amp;&amp; ((typeof document.createElement(&quot;div&quot;).style.Perspective !== &quot;undefined&quot;) || (typeof document.createElement(&quot;div&quot;).style[support.prefix + &quot;Perspective&quot;] !== &quot;undefined&quot;));

    /**@
     * #Crafty.support.deviceorientation
     * @comp Crafty.support
     * Is deviceorientation event supported by browser.
     */
    support.deviceorientation = (typeof window !== &quot;undefined&quot;) &amp;&amp; ((typeof window.DeviceOrientationEvent !== &quot;undefined&quot;) || (typeof window.OrientationEvent !== &quot;undefined&quot;));

    /**@
     * #Crafty.support.devicemotion
     * @comp Crafty.support
     * Is devicemotion event supported by browser.
     */
    support.devicemotion = (typeof window !== &quot;undefined&quot;) &amp;&amp; (typeof window.DeviceMotionEvent !== &quot;undefined&quot;);

})();

module.exports = {
    _events: {},

    /**@
     * #Crafty.addEvent
     * @category Events, Misc
     * @sign public this Crafty.addEvent(Object ctx, HTMLElement obj, String event, Function callback)
     * @param ctx - Context of the callback or the value of `this`
     * @param obj - Element to add the DOM event to
     * @param event - Event name to bind to
     * @param callback - Method to execute when triggered
     *
     * Adds DOM level 3 events to elements. The arguments it accepts are the call
     * context (the value of `this`), the DOM element to attach the event to,
     * the event name (without `on` (`click` rather than `onclick`)) and
     * finally the callback method.
     *
     * If no element is passed, the default element will be `window.document`.
     *
     * Callbacks are passed with event data.
     *
     * @note This is related to DOM events only,  not Crafty&apos;s own event system.  
     * Of course, you can trigger Crafty events in the callback function!
     *
     * @example
     * Normally you&apos;d use Crafty&apos;s built-in mouse component, but for the sake of an example let&apos;s pretend that doesn&apos;t exist.  
     * The following code will add a stage-wide MouseDown event listener to the player, and log both which button was pressed
     * and the (x,y) coordinates in viewport/world/game space.
     * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span> var player = Crafty.e(<span class="string">&quot;2D&quot;</span>);</span><br><span class="line"><span class="keyword">*</span>     player.onMouseDown = function(e) {</span><br><span class="line"><span class="keyword">*</span>         Crafty.log(e.mouseButton, e.realX, e.realY);</span><br><span class="line"><span class="keyword">*</span>     };</span><br><span class="line"><span class="keyword">*</span> Crafty.addEvent(player, Crafty.stage.elem, <span class="string">&quot;mousedown&quot;</span>, player.onMouseDown);</span><br><span class="line"><span class="keyword">*</span></span><br></pre></td></tr></table></figure>

     * @see Crafty.removeEvent
     */
    addEvent: function (ctx, obj, type, callback) {
        if (arguments.length === 3) {
            callback = type;
            type = obj;
            obj = window.document;
        }

        //save anonymous function to be able to remove
        var afn = function (e) {
            callback.call(ctx, e);
        },
            id = ctx[0] || &quot;&quot;;

        if (!this._events[id + obj + type + callback]) 
            this._events[id + obj + type + callback] = afn;
        else  {
            return;
        }

        obj.addEventListener(type, afn, false);
        
    },

    /**@
     * #Crafty.removeEvent
     * @category Events, Misc
     * @sign public this Crafty.removeEvent(Object ctx, HTMLElement obj, String event, Function callback)
     * @param ctx - Context of the callback or the value of `this`
     * @param obj - Element the event is on
     * @param event - Name of the event
     * @param callback - Method executed when triggered
     *
     * Removes events attached by `Crafty.addEvent()`. All parameters must
     * be the same that were used to attach the event including a reference
     * to the callback method.
     *
     * @see Crafty.addEvent
     */
    removeEvent: function (ctx, obj, type, callback) {
        if (arguments.length === 3) {
            callback = type;
            type = obj;
            obj = window.document;
        }

        //retrieve anonymous function
        var id = ctx[0] || &quot;&quot;,
            afn = this._events[id + obj + type + callback];

        if (afn) {
            obj.removeEventListener(type, afn, false);
            delete this._events[id + obj + type + callback];
        }
    },

    /**@
     * #Crafty.background
     * @category Graphics, Stage
     * @sign public void Crafty.background(String style)
     * @param style - Modify the background with a color or image
     *
     * This method is a shortcut for adding a background
     * style to the stage element, i.e.
     * `Crafty.stage.elem.style.background = ...`
     * 
     * For example, if you want the background to be white,
     * with an image in the center, you might use:
     * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span> Crafty.background(&apos;<span class="comment">#FFFFFF url(landscape.png) no-repeat center center&apos;);</span></span><br><span class="line"><span class="keyword">*</span></span><br></pre></td></tr></table></figure>

     *  
     */
    background: function (style) {
        Crafty.stage.elem.style.background = style;
    }
};

}).call(this,require(&apos;_process&apos;))
},{&quot;./core&quot;:7,&quot;_process&quot;:1}],9:[function(require,module,exports){
var Crafty = require(&apos;../core/core.js&apos;);

module.exports = {
    /**@
     * #Crafty.assets
     * @category Assets
     * An object containing every asset used in the current Crafty game.
     * The key is the URL and the value is the `Audio` or `Image` object.
     *
     * If loading an asset, check that it is in this object first to avoid loading twice.
     *
     * @example
     * <figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* <span class="function_or_atom">var</span> <span class="function_or_atom">isLoaded</span> = <span class="exclamation_mark">!</span><span class="exclamation_mark">!</span><span class="variable">Crafty</span>.<span class="function_or_atom">assets</span>[<span class="string">&quot;images/sprite.png&quot;</span>];</span><br><span class="line">*</span><br></pre></td></tr></table></figure>

     * @see Crafty.load
     */
    assets: {},
    __paths: { audio: &quot;&quot;, images: &quot;&quot; },
    /**@
     * #Crafty.paths
     * @category Assets
     * @sign public void Crafty.paths([Object paths])
     * @param paths - Object containing paths for audio and images folders
     *
     * Function to define custom folder for audio and images. You should use
     * this function to avoid typing the same paths again and again when
     * loading assets with the Crafty.load() function.
     *
     * If you do not give a object you get the current paths for both audio
     * and images back.
     *
     * You do not have to define paths.
     *
     * @example
     *
     *
     * Setting folders:
     * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span> Crafty.paths({ audio: <span class="string">&quot;custom/audio/path/&quot;</span>, images: <span class="string">&quot;custom/images/path/&quot;</span> });</span><br><span class="line"><span class="keyword">*</span></span><br><span class="line"><span class="keyword">*</span> Crafty.load({</span><br><span class="line"><span class="keyword">*</span>   <span class="string">&quot;audio&quot;</span>: {</span><br><span class="line"><span class="keyword">*</span>     <span class="string">&quot;ray&quot;</span>: [&apos;ray.mp3&apos;] // This loads ray.mp3 from custom/audio/path/ray.mp3</span><br><span class="line"><span class="keyword">*</span>   }</span><br><span class="line"><span class="keyword">*</span> }, function() {</span><br><span class="line"><span class="keyword">*</span>   Crafty.log(&apos;loaded&apos;);</span><br><span class="line"><span class="keyword">*</span> });</span><br><span class="line"><span class="keyword">*</span></span><br></pre></td></tr></table></figure>

     *
     * @see Crafty.load
     */
    paths: function(p) {
        if (typeof p === &quot;undefined&quot;) {
            return this.__paths;
        } else {
            if(p.audio)
                this.__paths.audio = p.audio;
            if(p.images)
                this.__paths.images = p.images;
        }
    },

    /**@
     * #Crafty.asset
     * @category Assets
     * @trigger NewAsset - After setting new asset - Object - key and value of new added asset.
     * @sign public void Crafty.asset(String key, Object asset)
     * @param key - asset url.
     * @param asset - `Audio` or `Image` object.
     *
     * Add new asset to assets object.
     *
     * @sign public void Crafty.asset(String key)
     * @param key - asset url.
     *
     *
     * Get asset from assets object.
     *
     * @example
     * <figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* Crafty.asset(<span class="built_in">key</span>, <span class="built_in">value</span>);</span><br><span class="line">* <span class="built_in">var</span> asset = Crafty.asset(<span class="built_in">key</span>); <span class="comment">//object with key and value fields</span></span><br><span class="line">*</span><br></pre></td></tr></table></figure>

     *
     * @see Crafty.assets
     */
    asset: function (key, value) {
        if (arguments.length === 1) {
            return Crafty.assets[key];
        }

        if (!Crafty.assets[key]) {
            Crafty.assets[key] = value;
            this.trigger(&quot;NewAsset&quot;, {
                key: key,
                value: value
            });
            return value;
        }
    },
    /**@
     * #Crafty.image_whitelist
     * @category Assets
     *
     * A list of file extensions that can be loaded as images by Crafty.load
     *
     * @example
     * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span> // add tif extension to list of supported image files</span><br><span class="line"><span class="keyword">*</span> Crafty.image_whitelist.push(<span class="string">&quot;tif&quot;</span>);</span><br><span class="line"><span class="keyword">*</span></span><br><span class="line"><span class="keyword">*</span> var assets = {</span><br><span class="line"><span class="keyword">*</span>     <span class="string">&quot;sprites&quot;</span>: {</span><br><span class="line"><span class="keyword">*</span>         <span class="string">&quot;sprite.tif&quot;</span>: {   //set a tif sprite</span><br><span class="line"><span class="keyword">*</span>            <span class="string">&quot;tile&quot;</span>: 64,</span><br><span class="line"><span class="keyword">*</span>            <span class="string">&quot;tileh&quot;</span>: 32,</span><br><span class="line"><span class="keyword">*</span>            <span class="string">&quot;map&quot;</span>: { <span class="string">&quot;sprite_car&quot;</span>: [0, 0] }</span><br><span class="line"><span class="keyword">*</span>         }</span><br><span class="line"><span class="keyword">*</span>     },</span><br><span class="line"><span class="keyword">*</span>     <span class="string">&quot;audio&quot;</span>: {</span><br><span class="line"><span class="keyword">*</span>         <span class="string">&quot;jump&quot;</span>: <span class="string">&quot;jump.mp3&quot;</span>;</span><br><span class="line"><span class="keyword">*</span>     }</span><br><span class="line"><span class="keyword">*</span> };</span><br><span class="line"><span class="keyword">*</span></span><br><span class="line"><span class="keyword">*</span> Crafty.load( assets, // preload the assets</span><br><span class="line"><span class="keyword">*</span>     function() {     //when loaded</span><br><span class="line"><span class="keyword">*</span>         Crafty.audio.play(<span class="string">&quot;jump&quot;</span>); //Play the audio file</span><br><span class="line"><span class="keyword">*</span>         Crafty.e(&apos;2D, DOM, sprite_car&apos;); // create entity with sprite</span><br><span class="line"><span class="keyword">*</span>     },</span><br><span class="line"><span class="keyword">*</span></span><br><span class="line"><span class="keyword">*</span>     function(e) { //progress</span><br><span class="line"><span class="keyword">*</span>     },</span><br><span class="line"><span class="keyword">*</span></span><br><span class="line"><span class="keyword">*</span>     function(e) { //uh oh, error loading</span><br><span class="line"><span class="keyword">*</span>     }</span><br><span class="line"><span class="keyword">*</span> );</span><br><span class="line"><span class="keyword">*</span></span><br></pre></td></tr></table></figure>

     *
     * @see Crafty.asset
     * @see Crafty.load
     */
    image_whitelist: [&quot;jpg&quot;, &quot;jpeg&quot;, &quot;gif&quot;, &quot;png&quot;, &quot;svg&quot;],
    /**@
     * #Crafty.load
     * @category Assets
     * @sign public void Crafty.load(Object assets, Function onLoad[, Function onProgress[, Function onError]])
     * @param assets - Object JSON formatted (or JSON string), with assets to load (accepts sounds, images and sprites)
     * @param onLoad - Callback when the assets are loaded
     * @param onProgress - Callback when an asset is loaded. Contains information about assets loaded
     * @param onError - Callback when an asset fails to load
     *
     * Preloader for all assets. Takes a JSON formatted object (or JSON string) of files and adds them to the
     * `Crafty.assets` object, as well as setting sprites accordingly.
     *
     * Format must follow the pattern shown in the example below, but it&apos;s not required to pass all &quot;audio&quot;,
     * &quot;images&quot; and &quot;sprites&quot; properties, only those you&apos;ll need. For example, if you don&apos;t need to preload
     * sprites, you can omit that property.
     *
     * By default, Crafty will assume all files are in the current path.  For changing these,
     * use the function `Crafty.paths`.
     *
     * Files with suffixes in `image_whitelist` (case insensitive) will be loaded.
     *
     * It&apos;s possible to pass the full file path(including protocol), instead of just the filename.ext, in case
     * you want some asset to be loaded from another domain.
     *
     * If `Crafty.support.audio` is `true`, files with the following suffixes `mp3`, `wav`, `ogg` and
     * `mp4` (case insensitive) can be loaded.
     *
     * The `onProgress` function will be passed on object with information about
     * the progress including how many assets loaded, total of all the assets to
     * load and a percentage of the progress.
     * <figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* { <span class="attribute">loaded</span>: j, <span class="attribute">total</span>: total, <span class="attribute">percent</span>: (j / total * <span class="number">100</span>), <span class="attribute">src</span>:src }</span><br><span class="line">*</span><br></pre></td></tr></table></figure>

     *
     * `onError` will be passed with the asset that couldn&apos;t load.
     *
     * When `onError` is not provided, the onLoad is loaded even when some assets are not successfully loaded.
     * Otherwise, onLoad will be called no matter whether there are errors or not.
     *
     * @example
     * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span> var assetsObj = {</span><br><span class="line"><span class="keyword">*</span>     <span class="string">&quot;audio&quot;</span>: {</span><br><span class="line"><span class="keyword">*</span>         <span class="string">&quot;beep&quot;</span>: [<span class="string">&quot;beep.wav&quot;</span>, <span class="string">&quot;beep.mp3&quot;</span>, <span class="string">&quot;beep.ogg&quot;</span>],</span><br><span class="line"><span class="keyword">*</span>         <span class="string">&quot;boop&quot;</span>: <span class="string">&quot;boop.wav&quot;</span>,</span><br><span class="line"><span class="keyword">*</span>         <span class="string">&quot;slash&quot;</span>: <span class="string">&quot;slash.wav&quot;</span></span><br><span class="line"><span class="keyword">*</span>     },</span><br><span class="line"><span class="keyword">*</span>     <span class="string">&quot;images&quot;</span>: [<span class="string">&quot;badguy.bmp&quot;</span>, <span class="string">&quot;goodguy.png&quot;</span>],</span><br><span class="line"><span class="keyword">*</span>     <span class="string">&quot;sprites&quot;</span>: {</span><br><span class="line"><span class="keyword">*</span>         <span class="string">&quot;animals.png&quot;</span>: {</span><br><span class="line"><span class="keyword">*</span>             <span class="string">&quot;tile&quot;</span>: 50,</span><br><span class="line"><span class="keyword">*</span>             <span class="string">&quot;tileh&quot;</span>: 40,</span><br><span class="line"><span class="keyword">*</span>             <span class="string">&quot;map&quot;</span>: { <span class="string">&quot;ladybug&quot;</span>: [0,0], <span class="string">&quot;lazycat&quot;</span>: [0,1], <span class="string">&quot;ferociousdog&quot;</span>: [0,2] }</span><br><span class="line"><span class="keyword">*</span>             <span class="string">&quot;paddingX&quot;</span>: 5,</span><br><span class="line"><span class="keyword">*</span>             <span class="string">&quot;paddingY&quot;</span>: 5,</span><br><span class="line"><span class="keyword">*</span>             <span class="string">&quot;paddingAroundBorder&quot;</span>: 10</span><br><span class="line"><span class="keyword">*</span>         },</span><br><span class="line"><span class="keyword">*</span>         <span class="string">&quot;vehicles.png&quot;</span>: {</span><br><span class="line"><span class="keyword">*</span>             <span class="string">&quot;tile&quot;</span>: 150,</span><br><span class="line"><span class="keyword">*</span>             <span class="string">&quot;tileh&quot;</span>: 75,</span><br><span class="line"><span class="keyword">*</span>             <span class="string">&quot;map&quot;</span>: { <span class="string">&quot;car&quot;</span>: [0,0], <span class="string">&quot;truck&quot;</span>: [0,1] }</span><br><span class="line"><span class="keyword">*</span>         }</span><br><span class="line"><span class="keyword">*</span>     },</span><br><span class="line"><span class="keyword">*</span> };</span><br><span class="line"><span class="keyword">*</span></span><br><span class="line"><span class="keyword">*</span> Crafty.load(assetsObj, // preload assets</span><br><span class="line"><span class="keyword">*</span>     function() { //when loaded</span><br><span class="line"><span class="keyword">*</span>         Crafty.scene(<span class="string">&quot;main&quot;</span>); //go to main scene</span><br><span class="line"><span class="keyword">*</span>         Crafty.audio.play(<span class="string">&quot;boop&quot;</span>); //Play the audio file</span><br><span class="line"><span class="keyword">*</span>         Crafty.e(&apos;2D, DOM, lazycat&apos;); // create entity with sprite</span><br><span class="line"><span class="keyword">*</span>     },</span><br><span class="line"><span class="keyword">*</span></span><br><span class="line"><span class="keyword">*</span>     function(e) { //progress</span><br><span class="line"><span class="keyword">*</span>     },</span><br><span class="line"><span class="keyword">*</span></span><br><span class="line"><span class="keyword">*</span>     function(e) { //uh oh, error loading</span><br><span class="line"><span class="keyword">*</span>     }</span><br><span class="line"><span class="keyword">*</span> );</span><br><span class="line"><span class="keyword">*</span></span><br></pre></td></tr></table></figure>

     *
     * @see Crafty.paths
     * @see Crafty.assets
     * @see Crafty.image_whitelist
     * @see Crafty.removeAssets
     */
    load: function (data, oncomplete, onprogress, onerror) {

        if (Array.isArray(data)) {
            Crafty.log(&quot;Calling Crafty.load with an array of assets no longer works; see the docs for more details.&quot;);
        }

        data = (typeof data === &quot;string&quot; ? JSON.parse(data) : data);

        var j = 0,
            total = (data.audio ? Object.keys(data.audio).length : 0) +
              (data.images ? Object.keys(data.images).length : 0) +
              (data.sprites ? Object.keys(data.sprites).length : 0),
            current, fileUrl, obj, type, asset,
            audSupport = Crafty.support.audio,
            paths = Crafty.paths(),
            getExt = function(f) {
                return f.substr(f.lastIndexOf(&apos;.&apos;) + 1).toLowerCase();
            },
            getFilePath = function(type,f) {
                return (f.search(&quot;://&quot;) === -1 ? (type == &quot;audio&quot; ? paths.audio + f : paths.images + f) : f);
            },
            // returns null if &apos;a&apos; is not already a loaded asset, obj otherwise
            isAsset = function(a) {
                return Crafty.asset(a) || null;
            },
            isSupportedAudio = function(f) {
                return Crafty.audio.supports(getExt(f));
            },
            isValidImage = function(f) {
                return Crafty.image_whitelist.indexOf(getExt(f)) != -1;
            },
            onImgLoad = function(obj,url) {
                obj.onload = pro;
                if (Crafty.support.prefix === &apos;webkit&apos;)
                    obj.src = &quot;&quot;; // workaround for webkit bug
                obj.src = url;
            };

        //Progress function

        function pro() {
            var src = this.src;

            //Remove events cause audio trigger this event more than once(depends on browser)
            if (this.removeEventListener)
                this.removeEventListener(&apos;canplaythrough&apos;, pro, false);

            j++;
            //if progress callback, give information of assets loaded, total and percent
            if (onprogress)
                onprogress({
                    loaded: j,
                    total: total,
                    percent: (j / total * 100),
                    src: src
                });

            if (j === total &amp;&amp; oncomplete) oncomplete();
        }
        //Error function

        function err() {
            var src = this.src;
            if (onerror)
                onerror({
                    loaded: j,
                    total: total,
                    percent: (j / total * 100),
                    src: src
                });

            j++;
            if (j === total &amp;&amp; oncomplete) oncomplete();
        }

        for (type in data) {
            for(asset in data[type]) {
                if (!data[type].hasOwnProperty(asset))
                    continue; // maintain compatibility to other frameworks while iterating array

                current = data[type][asset];

                if (type === &quot;audio&quot; &amp;&amp; audSupport) {
                    if (typeof current === &quot;object&quot;) {
                        var files = [];
                        for (var i in current) {
                            fileUrl = getFilePath(type, current[i]);
                            if (!isAsset(fileUrl) &amp;&amp; isSupportedAudio(current[i]))
                                files.push(fileUrl);
                        }
                        obj = Crafty.audio.add(asset, files).obj;
                    }
                    else if (typeof current === &quot;string&quot; &amp;&amp; isSupportedAudio(current)) {
                        fileUrl = getFilePath(type, current);
                        if (!isAsset(fileUrl))
                            obj = Crafty.audio.add(asset, fileUrl).obj;
                    }

                    //addEventListener is supported on IE9 , Audio as well
                    if (obj &amp;&amp; obj.addEventListener)
                        obj.addEventListener(&apos;canplaythrough&apos;, pro, false);
                } else {
                    asset = (type === &quot;sprites&quot; ? asset : current);
                    fileUrl = getFilePath(type, asset);
                    if (isValidImage(asset)) {
                        obj = isAsset(fileUrl);
                        if (!obj) {
                            obj = new Image();
                            if (type === &quot;sprites&quot;)
                                Crafty.sprite(current.tile, current.tileh, fileUrl, current.map,
                                  current.paddingX, current.paddingY, current.paddingAroundBorder);
                            Crafty.asset(fileUrl, obj);
                        }
                        onImgLoad(obj, fileUrl);
                    }
                }
                if (obj)
                    obj.onerror = err;
                else
                    --total;
            }
        }

        // If we aren&apos;t trying to handle *any* of the files, that&apos;s as complete as it gets!
        if (total === 0)
            oncomplete();

    },
    /**@
     * #Crafty.removeAssets
     * @category Assets
     *
     * @sign public void Crafty.removeAssets(Object assets)
     * @param data - Object JSON formatted (or JSON string), with assets to remove (accepts sounds, images and sprites)
     *
     * Removes assets (audio, images, sprites - and related sprite components) in order to allow the browser
     * to free memory.
     *
     * Recieves a JSON fomatted object (or JSON string) containing &apos;audio&apos;, &apos;images&apos; and/or &apos;sprites&apos;
     * properties with assets to be deleted. Follows a similar format as Crafty.load &apos;data&apos; argument. If
     * you pass the exact same object passed to Crafty.load, that will delete everything loaded that way.
     * For sprites, if you want to keep some specific component, just don&apos;t pass that component&apos;s name in
     * the sprite &apos;map&apos;.
     *
     * Note that in order to remove the sprite components related to a given sprite, it&apos;s required to
     * pass the &apos;map&apos; property of that sprite, and although its own properties&apos;s values (the properties refer
     * to sprite components) are not used in the removing process, omitting them will cause an error (since
     * &apos;map&apos; is an object, thus it&apos;s properties can NOT omitted - however, they can be null, or undefined).
     * It will work as long as the &apos;map&apos; objects&apos; properties have any value. Or if you define &apos;map&apos; itself
     * as an array, like:
     * &quot;map&quot;: [ &quot;car&quot;, &quot;truck&quot; ] instead of &quot;map&quot;: { &quot;car&quot;: [0,0], &quot;truck&quot;: [0,1] }.
     * This is examplified below (&quot;animals.png&quot; VS. &quot;vehicles.png&quot; sprites).
     *
     * @example
     * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span> var assetsToRemoveObj = {</span><br><span class="line"><span class="keyword">*</span>     <span class="string">&quot;audio&quot;</span>: {</span><br><span class="line"><span class="keyword">*</span>         <span class="string">&quot;beep&quot;</span>: [<span class="string">&quot;beep.wav&quot;</span>, <span class="string">&quot;beep.mp3&quot;</span>, <span class="string">&quot;beep.ogg&quot;</span>],</span><br><span class="line"><span class="keyword">*</span>         <span class="string">&quot;boop&quot;</span>: <span class="string">&quot;boop.wav&quot;</span></span><br><span class="line"><span class="keyword">*</span>     },</span><br><span class="line"><span class="keyword">*</span>     <span class="string">&quot;images&quot;</span>: [<span class="string">&quot;badguy.bmp&quot;</span>, <span class="string">&quot;goodguy.png&quot;</span>],</span><br><span class="line"><span class="keyword">*</span>     <span class="string">&quot;sprites&quot;</span>: {</span><br><span class="line"><span class="keyword">*</span>         <span class="string">&quot;animals.png&quot;</span>: {</span><br><span class="line"><span class="keyword">*</span>             <span class="string">&quot;map&quot;</span>: { <span class="string">&quot;ladybug&quot;</span>: [0,0], <span class="string">&quot;lazycat&quot;</span>: [0,1] },</span><br><span class="line"><span class="keyword">*</span>         },</span><br><span class="line"><span class="keyword">*</span>         <span class="string">&quot;vehicles.png&quot;</span>: {</span><br><span class="line"><span class="keyword">*</span>             <span class="string">&quot;map&quot;</span>: [ <span class="string">&quot;car&quot;</span>, <span class="string">&quot;truck&quot;</span> ]</span><br><span class="line"><span class="keyword">*</span>         }</span><br><span class="line"><span class="keyword">*</span>     }</span><br><span class="line"><span class="keyword">*</span> }</span><br><span class="line"><span class="keyword">*</span></span><br><span class="line"><span class="keyword">*</span> Crafty.removeAssets(assetsToRemoveObj);</span><br><span class="line"><span class="keyword">*</span></span><br></pre></td></tr></table></figure>

     *
     * @see Crafty.load
     */
    removeAssets: function(data) {

        data = (typeof data === &quot;string&quot; ? JSON.parse(data) : data);

        var current, fileUrl, type, asset,
            paths = Crafty.paths(),
            getFilePath = function(type,f) {
                return (f.search(&quot;://&quot;) === -1 ? (type == &quot;audio&quot; ? paths.audio + f : paths.images + f) : f);
            };

        for (type in data) {
            for (asset in data[type]) {
                if (!data[type].hasOwnProperty(asset))
                    continue; // maintain compatibility to other frameworks while iterating array

                current = data[type][asset];

                if (type === &quot;audio&quot;) {
                    if (typeof current === &quot;object&quot;) {
                        for (var i in current) {
                            fileUrl = getFilePath(type, current[i]);
                            if (Crafty.asset(fileUrl))
                                Crafty.audio.remove(asset);
                        }
                    }
                    else if (typeof current === &quot;string&quot;) {
                        fileUrl = getFilePath(type, current);
                        if (Crafty.asset(fileUrl))
                            Crafty.audio.remove(asset);
                    }
                } else {
                    asset = (type === &quot;sprites&quot; ? asset : current);
                    fileUrl = getFilePath(type, asset);
                    if (Crafty.asset(fileUrl)) {
                        if (type === &quot;sprites&quot;)
                            for (var comp in current.map)
                                delete Crafty.components()[comp];
                        delete Crafty.assets[fileUrl];
                    }
                }
            }
        }
    }
};

},{&quot;../core/core.js&quot;:7}],10:[function(require,module,exports){
/**@
 * #Model
 * @category Model
 * Model is a component that offers new features for isolating business
 * logic in your application. It offers default values, dirty values,
 * and deep events on your data.
 *
 * All data should be accessed via the appropriate methods `.get`, `.set`,
 * and `.data` for the proper events to be triggered. It is not encouraged
 * to access them directly.
 *
 * Dirty values make it simple to inspect a model and see what values have changed.
 *
 * Deep events allow you to bind to specific fields, like `name` or even deep fields
 * like `contact.email` and get notified when those specific fields are updated.
 *
 * @trigger Change - When any data on the model has changed.
 * @trigger Change[key] - When the specific key on the model has changed.
 * @trigger Change[key.key] - The nested key value has changed.
 * @example
 * <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">* Crafty.c(<span class="string">&apos;Person&apos;</span>, {</span><br><span class="line">*   name: <span class="string">&apos;Fox&apos;</span>,</span><br><span class="line">*   init: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{ <span class="keyword">this</span>.requires(<span class="string">&apos;Model&apos;</span>); }</span><br><span class="line">* });</span><br><span class="line">* person = Crafty.e(<span class="string">&apos;Person&apos;</span>).attr({name: <span class="string">&apos;blaine&apos;</span>});</span><br><span class="line">* person.bind(<span class="string">&apos;Change[name]&apos;</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</span><br><span class="line">*   Crafty.log(<span class="string">&apos;name changed!&apos;</span>);</span><br><span class="line">* });</span><br><span class="line">* person.attr(<span class="string">&apos;name&apos;</span>, <span class="string">&apos;blainesch&apos;</span>); <span class="comment">// Triggers event</span></span><br><span class="line">* person.is_dirty(<span class="string">&apos;name&apos;</span>); <span class="comment">// true</span></span><br><span class="line">* person.changed <span class="comment">// name</span></span><br><span class="line">*</span><br></pre></td></tr></table></figure>

 */
module.exports = {
  init: function() {
    this.changed = [];
    this.bind(&apos;Change&apos;, this._changed_attributes);
    this.bind(&apos;Change&apos;, this._changed_triggers);
  },

  /**
   * Fires more specific `Change` events.
   *
   * For instance a `Change[name]` may get fired when you
   * update the name data attribute on the model.
   */
  _changed_triggers: function(data, options) {
    var key, trigger_data;
    options = Crafty.extend.call({pre: &apos;&apos;}, options);
    for (key in data) {
      this.trigger(&apos;Change[&apos; + options.pre + key + &apos;]&apos;, data[key]);
      if (data[key].constructor === Object) {
        this._changed_triggers(data[key], {
          pre: options.pre + key + &apos;.&apos;
        });
      }
    }
  },

  /**
   * Pushes all top-levle changed attribute names to the
   * changed array.
   */
  _changed_attributes: function(data) {
    var key;
    for (key in data) {
      this.changed.push(key);
    }
    return this;
  },

  /**@
   * #.is_dirty
   * @comp Model
   * Helps determine when data or the entire component is &quot;dirty&quot; or has changed attributes.
   *
   * @example
   * <figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">* person = Crafty.e(<span class="string">&apos;Person&apos;</span>).attr({name: <span class="string">&apos;Fox&apos;</span>, age: <span class="number">24</span>})</span><br><span class="line">* person.<span class="keyword">is</span><span class="number">_</span>dirty() <span class="comment">// false</span></span><br><span class="line">* person.<span class="keyword">is</span><span class="number">_</span>dirty(<span class="string">&apos;name&apos;</span>) <span class="comment">// false</span></span><br><span class="line">*</span><br><span class="line">* person.attr(<span class="string">&apos;name&apos;</span>, <span class="string">&apos;Lucky&apos;</span>);</span><br><span class="line">* person.<span class="keyword">is</span><span class="number">_</span>dirty(); <span class="comment">// true</span></span><br><span class="line">* person.<span class="keyword">is</span><span class="number">_</span>dirty(<span class="string">&apos;name&apos;</span>); <span class="comment">// true</span></span><br><span class="line">* person.<span class="keyword">is</span><span class="number">_</span>dirty(<span class="string">&apos;age&apos;</span>); <span class="comment">// false</span></span><br><span class="line">* person.changed; <span class="comment">// [&apos;name&apos;]</span></span><br><span class="line">*</span><br></pre></td></tr></table></figure>

   */
  is_dirty: function(key) {
    if (arguments.length === 0) {
      return !!this.changed.length;
    } else {
      return this.changed.indexOf(key) &gt; -1;
    }
  }
};


},{}],11:[function(require,module,exports){
var Crafty = require(&apos;../core/core.js&apos;);


module.exports = {
    _scenes: {},
    _current: null,

    /**@
     * #Crafty.scene
     * @category Scenes, Stage
     * @trigger SceneChange - just before a new scene is initialized - { oldScene:String, newScene:String }
     * @trigger SceneDestroy - just before the current scene is destroyed - { newScene:String  }
     *
     * @sign public void Crafty.scene(String sceneName, Function init[, Function uninit])
     * @param sceneName - Name of the scene to add
     * @param init - Function to execute when scene is played
     * @param uninit - Function to execute before next scene is played, after entities with `2D` are destroyed
     *
     * This is equivalent to calling `Crafty.defineScene`.
     *
     * @sign public void Crafty.scene(String sceneName[, Data])
     * @param sceneName - Name of scene to play
     * @param Data - The init function of the scene will be called with this data as its parameter.  Can be of any type other than a function.
     *
     * This is equivalent to calling `Crafty.enterScene`.
     *
     * Method to create scenes on the stage. Pass an ID and function to register a scene.
     *
     * To play a scene, just pass the ID. When a scene is played, all
     * previously-created entities with the `2D` component are destroyed. The
     * viewport is also reset.
     *
     * You can optionally specify an arugment that will be passed to the scene&apos;s init function.
     *
     * If you want some entities to persist over scenes (as in, not be destroyed)
     * simply add the component `Persist`.
     *
     * @example
     * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span> Crafty.defineScene(<span class="string">&quot;loading&quot;</span>, function() {</span><br><span class="line"><span class="keyword">*</span>     Crafty.background(<span class="string">&quot;#000&quot;</span>);</span><br><span class="line"><span class="keyword">*</span>     Crafty.e(<span class="string">&quot;2D, DOM, Text&quot;</span>)</span><br><span class="line"><span class="keyword">*</span>           .attr({ w: 100, h: 20, x: 150, y: 120 })</span><br><span class="line"><span class="keyword">*</span>           .text(<span class="string">&quot;Loading&quot;</span>)</span><br><span class="line"><span class="keyword">*</span>           .css({ <span class="string">&quot;text-align&quot;</span>: <span class="string">&quot;center&quot;</span>})</span><br><span class="line"><span class="keyword">*</span>           .textColor(<span class="string">&quot;#FFFFFF&quot;</span>);</span><br><span class="line"><span class="keyword">*</span> });</span><br><span class="line"><span class="keyword">*</span></span><br><span class="line"><span class="keyword">*</span> Crafty.defineScene(<span class="string">&quot;UFO_dance&quot;</span>,</span><br><span class="line"><span class="keyword">*</span>              function() {Crafty.background(<span class="string">&quot;#444&quot;</span>); Crafty.e(<span class="string">&quot;UFO&quot;</span>);},</span><br><span class="line"><span class="keyword">*</span>              function() {...send message to server...});</span><br><span class="line"><span class="keyword">*</span></span><br><span class="line"><span class="keyword">*</span> // An example of an init function which accepts arguments, in this case an object.</span><br><span class="line"><span class="keyword">*</span> Crafty.defineScene(<span class="string">&quot;square&quot;</span>, function(attributes) {</span><br><span class="line"><span class="keyword">*</span>     Crafty.background(<span class="string">&quot;#000&quot;</span>);</span><br><span class="line"><span class="keyword">*</span>     Crafty.e(<span class="string">&quot;2D, DOM, Color&quot;</span>)</span><br><span class="line"><span class="keyword">*</span>           .attr(attributes)</span><br><span class="line"><span class="keyword">*</span>           .color(<span class="string">&quot;red&quot;</span>);</span><br><span class="line"><span class="keyword">*</span> </span><br><span class="line"><span class="keyword">*</span> });</span><br><span class="line"><span class="keyword">*</span></span><br><span class="line"><span class="keyword">*</span></span><br></pre></td></tr></table></figure>

     * This defines (but does not play) two scenes as discussed below.
     * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span> Crafty.enterScene(<span class="string">&quot;loading&quot;</span>);</span><br><span class="line"><span class="keyword">*</span></span><br></pre></td></tr></table></figure>

     * This command will clear the stage by destroying all `2D` entities (except
     * those with the `Persist` component). Then it will set the background to
     * black and display the text &quot;Loading&quot;.
     * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span> Crafty.enterScene(<span class="string">&quot;UFO_dance&quot;</span>);</span><br><span class="line"><span class="keyword">*</span></span><br></pre></td></tr></table></figure>

     * This command will clear the stage by destroying all `2D` entities (except
     * those with the `Persist` component). Then it will set the background to
     * gray and create a UFO entity. Finally, the next time the game encounters
     * another command of the form `Crafty.scene(scene_name)` (if ever), then the
     * game will send a message to the server.
     * <figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* <span class="tag">Crafty</span><span class="class">.enterScene</span>(<span class="string">&quot;square&quot;</span>, {<span class="attribute">x</span>:<span class="number">10</span>, <span class="attribute">y</span>:<span class="number">10</span>, <span class="attribute">w</span>:<span class="number">20</span>, <span class="attribute">h</span>:<span class="number">20</span>});</span><br><span class="line">*</span><br></pre></td></tr></table></figure>

     * This will clear the stage, set the background black, and create a red square with the specified position and dimensions.
     * <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line">     */</span><br><span class="line">    scene: <span class="function"><span class="keyword">function</span> <span class="params">(name, intro, outro)</span> </span>{</span><br><span class="line">        <span class="comment">// If there&apos;s one argument, or the second argument isn&apos;t a function, play the scene</span></span><br><span class="line">        <span class="keyword">if</span> (arguments.length === <span class="number">1</span> || typeof(arguments[<span class="number">1</span>]) !== <span class="string">&quot;function&quot;</span>) {</span><br><span class="line">            Crafty.enterScene(name, arguments[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// Otherwise, this is a call to create a scene</span></span><br><span class="line">        Crafty.defineScene(name, intro, outro);</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* </span><br><span class="line">     * #Crafty.defineScene</span><br><span class="line">     * <span class="doctag">@category</span> Scenes, Stage</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@sign</span> public void Crafty.enterScene(String name[, Data])</span><br><span class="line">     * <span class="doctag">@param</span> name - Name of the scene to run.</span><br><span class="line">     * <span class="doctag">@param</span> Data - The init function of the scene will be called with this data as its parameter.  Can be of any type other than a function.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@see</span> Crafty.enterScene</span><br><span class="line">     * <span class="doctag">@see</span> Crafty.scene</span><br><span class="line">     */</span></span><br><span class="line">    defineScene: <span class="function"><span class="keyword">function</span><span class="params">(name, init, uninit)</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (typeof init !== <span class="string">&quot;function&quot;</span>)</span><br><span class="line">            <span class="keyword">throw</span>(<span class="string">&quot;Init function is the wrong type.&quot;</span>);</span><br><span class="line">        this._scenes[name] = {};</span><br><span class="line">        this._scenes[name].initialize = init;</span><br><span class="line">        <span class="keyword">if</span> (typeof uninit !== <span class="string">&apos;undefined&apos;</span>) {</span><br><span class="line">            this._scenes[name].uninitialize = uninit;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* </span><br><span class="line">     * #Crafty.enterScene</span><br><span class="line">     * <span class="doctag">@category</span> Scenes, Stage</span><br><span class="line">     * <span class="doctag">@trigger</span> SceneChange - just before a new scene is initialized - { oldScene:String, newScene:String }</span><br><span class="line">     * <span class="doctag">@trigger</span> SceneDestroy - just before the current scene is destroyed - { newScene:String  }</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@sign</span> public void Crafty.enterScene(String name[, Data])</span><br><span class="line">     * <span class="doctag">@param</span> name - Name of the scene to run.</span><br><span class="line">     * <span class="doctag">@param</span> Data - The init function of the scene will be called with this data as its parameter.  Can be of any type other than a function.</span><br><span class="line">     * </span><br><span class="line">     * <span class="doctag">@see</span> Crafty.defineScene</span><br><span class="line">     * <span class="doctag">@see</span> Crafty.scene</span><br><span class="line">     */</span></span><br><span class="line">    enterScene: <span class="function"><span class="keyword">function</span><span class="params">(name, data)</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (typeof data === <span class="string">&quot;function&quot;</span>)</span><br><span class="line">            <span class="keyword">throw</span>(<span class="string">&quot;Scene data cannot be a function&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ---FYI---</span></span><br><span class="line">        <span class="comment">// this._current is the name (ID) of the scene in progress.</span></span><br><span class="line">        <span class="comment">// this._scenes is an object like the following:</span></span><br><span class="line">        <span class="comment">// {&apos;Opening scene&apos;: {&apos;initialize&apos;: fnA, &apos;uninitialize&apos;: fnB},</span></span><br><span class="line">        <span class="comment">//  &apos;Another scene&apos;: {&apos;initialize&apos;: fnC, &apos;uninitialize&apos;: fnD}}</span></span><br><span class="line"></span><br><span class="line">        Crafty.trigger(<span class="string">&quot;SceneDestroy&quot;</span>, {</span><br><span class="line">            newScene: name</span><br><span class="line">        });</span><br><span class="line">        Crafty.viewport.reset();</span><br><span class="line"></span><br><span class="line">        Crafty(<span class="string">&quot;2D&quot;</span>).each(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">if</span> (!this.has(<span class="string">&quot;Persist&quot;</span>)) this.destroy();</span><br><span class="line">        });</span><br><span class="line">        <span class="comment">// uninitialize previous scene</span></span><br><span class="line">        <span class="keyword">if</span> (this._current !== <span class="keyword">null</span> &amp;&amp; <span class="string">&apos;uninitialize&apos;</span> in this._scenes[this._current]) {</span><br><span class="line">            this._scenes[this._current].uninitialize.call(this);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// initialize next scene</span></span><br><span class="line">        <span class="keyword">var</span> oldScene = this._current;</span><br><span class="line">        this._current = name;</span><br><span class="line">        Crafty.trigger(<span class="string">&quot;SceneChange&quot;</span>, {</span><br><span class="line">            oldScene: oldScene,</span><br><span class="line">            newScene: name</span><br><span class="line">        });</span><br><span class="line">           </span><br><span class="line">        <span class="keyword">if</span> (this._scenes.hasOwnProperty(name)) {</span><br><span class="line">            this._scenes[name].initialize.call(this, data);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            Crafty.error(<span class="string">&apos;The scene &quot;&apos;</span> + name + <span class="string">&apos;&quot; does not exist&apos;</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">},{<span class="string">&quot;../core/core.js&quot;</span>:<span class="number">7</span>}],<span class="number">12</span>:[<span class="function"><span class="keyword">function</span><span class="params">(require,module,exports)</span></span>{</span><br><span class="line"><span class="keyword">var</span> Crafty = <span class="keyword">require</span>(<span class="string">&apos;../core/core.js&apos;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">  <span class="keyword">var</span> storage = (typeof window !== <span class="string">&quot;undefined&quot;</span> &amp;&amp; window.localStorage) || (<span class="keyword">new</span> <span class="keyword">require</span>(<span class="string">&apos;node-localstorage&apos;</span>).LocalStorage(<span class="string">&apos;./localStorage&apos;</span>));</span><br><span class="line">} <span class="keyword">catch</span>(e) {</span><br><span class="line">  <span class="keyword">var</span> storage = <span class="keyword">null</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Storage</span><br><span class="line"> * <span class="doctag">@category</span> Utilities</span><br><span class="line"> * Very simple way to get and set values, which will persist when the browser is closed also.</span><br><span class="line"> * Storage wraps around HTML5 Web Storage, which is well-supported across browsers and platforms, but limited to 5MB total storage per domain.</span><br><span class="line"> * Storage is also available for node, which is permanently persisted to the `./localStorage` folder - take care of removing entries. Note that multiple Crafty instances use the same storage, so care has to be taken not to overwrite existing entries.</span><br><span class="line"> */</span></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Crafty.storage</span><br><span class="line"> * <span class="doctag">@comp</span> Storage</span><br><span class="line"> * <span class="doctag">@sign</span> Crafty.storage(String key)</span><br><span class="line"> * <span class="doctag">@param</span> key - a key you would like to get from the storage. </span><br><span class="line"> * <span class="doctag">@returns</span> The stored value, or `null` if none saved under that key exists</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@sign</span> Crafty.storage(String key, String value)</span><br><span class="line"> * <span class="doctag">@param</span> key - the key you would like to save the data under.</span><br><span class="line"> * <span class="doctag">@param</span> value - the value you would like to save.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@sign</span> Crafty.storage(String key, [Object value, Array value, Boolean value])</span><br><span class="line"> * <span class="doctag">@param</span> key - the key you would like to save the data under.</span><br><span class="line"> * <span class="doctag">@param</span> value - the value you would like to save, can be an Object or an Array.</span><br><span class="line"> *</span><br><span class="line"> * `Crafty.storage` is used synchronously to either get or set values. </span><br><span class="line"> *</span><br><span class="line"> * You can store booleans, strings, objects and arrays.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@note</span> Because the underlying method is synchronous, it can cause slowdowns if used frequently during gameplay.</span><br><span class="line"> * You should aim to load or save data at reasonable times such as on level load,</span><br><span class="line"> * or in response to specific user actions.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@note</span> If used in a cross-domain context, the localStorage might not be accessible.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@example</span></span><br><span class="line"> * Get an already stored value</span><br><span class="line"> *</span></span><br></pre></td></tr></table></figure>

 * var playername = Crafty.storage(&apos;playername&apos;);
 * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span></span><br><span class="line"><span class="keyword">*</span> <span class="comment">@example</span></span><br><span class="line"><span class="keyword">*</span> Save a value</span><br><span class="line"><span class="keyword">*</span></span><br></pre></td></tr></table></figure>

 * Crafty.storage(&apos;playername&apos;, &apos;Hero&apos;);
 * <figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*</span><br><span class="line">* <span class="annotation">@example</span></span><br><span class="line">* Test to <span class="annotation">see</span> <span class="keyword">if</span> a <span class="keyword">value</span> <span class="keyword">is</span> already there.</span><br><span class="line">*</span><br></pre></td></tr></table></figure>

 * var heroname = Crafty.storage(&apos;name&apos;);
 * if(!heroname){
 *   // Maybe ask the player what their name is here
 *   heroname = &apos;Guest&apos;;
 * }
 * // Do something with heroname
 * <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> */</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> store = <span class="function"><span class="keyword">function</span><span class="params">(key, value)</span> </span>{</span><br><span class="line">  <span class="keyword">var</span> _value = value;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(!storage) {</span><br><span class="line">    Crafty.error(<span class="string">&quot;Local storage is not accessible.  (Perhaps you are including crafty.js cross-domain?)&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(arguments.length === <span class="number">1</span>) {</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">      <span class="keyword">return</span> JSON.parse(storage.getItem(key));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">catch</span> (e) {</span><br><span class="line">      <span class="keyword">return</span> storage.getItem(key);</span><br><span class="line">    }</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="keyword">if</span>(typeof value === <span class="string">&quot;object&quot;</span>) {</span><br><span class="line">      _value = JSON.stringify(value);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    storage.setItem(key, _value);</span><br><span class="line">    </span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Crafty.storage.remove</span><br><span class="line"> * <span class="doctag">@comp</span> Storage</span><br><span class="line"> * <span class="doctag">@sign</span> Crafty.storage.remove(String key)</span><br><span class="line"> * <span class="doctag">@param</span> key - a key where you will like to delete the value of.</span><br><span class="line"> *</span><br><span class="line"> * Generally you do not need to remove values from localStorage, but if you do</span><br><span class="line"> * store large amount of text, or want to unset something you can do that with</span><br><span class="line"> * this function.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@example</span></span><br><span class="line"> * Get an already stored value</span><br><span class="line"> *</span></span><br></pre></td></tr></table></figure>

 * Crafty.storage.remove(&apos;playername&apos;);
 * <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">store.remove = <span class="function"><span class="keyword">function</span><span class="params">(key)</span> </span>{</span><br><span class="line">  <span class="keyword">if</span>(!storage){</span><br><span class="line">    Crafty.error(<span class="string">&quot;Local storage is not accessible.  (Perhaps you are including crafty.js cross-domain?)&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  }</span><br><span class="line">  storage.removeItem(key);</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">module.exports = store;</span><br><span class="line"></span><br><span class="line">},{<span class="string">&quot;../core/core.js&quot;</span>:<span class="number">7</span>}],<span class="number">13</span>:[<span class="function"><span class="keyword">function</span><span class="params">(require,module,exports)</span></span>{</span><br><span class="line"><span class="keyword">var</span> Crafty = require(<span class="string">&apos;../core/core.js&apos;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Dictionary of existing systems</span></span><br><span class="line">Crafty._systems = {};</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Crafty.s</span><br><span class="line"> * @category Core</span><br><span class="line"> *</span><br><span class="line"> * Registers a system.</span><br><span class="line"> *</span><br><span class="line"> * @trigger SystemLoaded - When the system has initialized itself - obj - system object</span><br><span class="line"> * @trigger SystemDestroyed - Right before the system is destroyed - obj - system object</span><br><span class="line"> *</span><br><span class="line"> * @sign void Crafty.s(String name, Obj template[, Boolean lazy])</span><br><span class="line"> * Register a system</span><br><span class="line"> * @param name - The name of the system</span><br><span class="line"> * @param template - an object whose methods and properties will be copied to the new system</span><br><span class="line"> * @param lazy - a flag that indicates whether the system should be initialized right away or the first time it is referenced</span><br><span class="line"> *</span><br><span class="line"> * @sign System Crafty.s(String name)</span><br><span class="line"> * Access the named system</span><br><span class="line"> * @param name - The system to return</span><br><span class="line"> * @returns The referenced system.  If the system has not been initialized, it will be before it is returned.</span><br><span class="line"> *</span><br><span class="line"> * Objects which handle entities might want to subscribe to the event system without being entities themselves.  </span><br><span class="line"> * When you declare a system with a template object, all the methods and properties of that template are copied to a new object.</span><br><span class="line"> * This new system will automatically have the following event related methods, which function like those of components: `.bind()`, `unbind()`, `trigger()`, `one()`, `uniqueBind()`, `destroy()`.</span><br><span class="line"> * Much like components, you can also provide `init()` and `remove()` methods, as well as an `events` parameter for automatically binding to events.</span><br><span class="line"> *</span><br><span class="line"> * *Note*: The `init()` method is for setting up the internal state of the system -- if you create entities in it that then reference the system, that&apos;ll create an infinite loop.</span><br><span class="line"> */</span></span><br><span class="line">Crafty.s = <span class="function"><span class="keyword">function</span><span class="params">(name, obj, lazy)</span> </span>{</span><br><span class="line">	<span class="keyword">if</span> (obj) {</span><br><span class="line">		<span class="keyword">if</span> (lazy === <span class="literal">false</span> ) {</span><br><span class="line">			Crafty._systems[name] = <span class="keyword">new</span> Crafty.CraftySystem(name, obj);</span><br><span class="line">			Crafty.trigger(<span class="string">&quot;SystemLoaded&quot;</span>, name);</span><br><span class="line">		} <span class="keyword">else</span> {</span><br><span class="line">			Crafty._registerLazySystem(name, obj);</span><br><span class="line">		}</span><br><span class="line">	} <span class="keyword">else</span> {</span><br><span class="line">		<span class="keyword">return</span> Crafty._systems[name];</span><br><span class="line">	}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Crafty._registerLazySystem = <span class="function"><span class="keyword">function</span><span class="params">(name, obj)</span> </span>{</span><br><span class="line">	<span class="comment">// This is a bit of magic to only init a system if it&apos;s requested at least once.</span></span><br><span class="line">	<span class="comment">// We define a getter for _systems[name] that will first initialize the system, </span></span><br><span class="line">	<span class="comment">// and then redefine _systems[name] to ` that getter.</span></span><br><span class="line">	Object.defineProperty(Crafty._systems, name, {</span><br><span class="line">		<span class="keyword">get</span>: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</span><br><span class="line">			Object.defineProperty(Crafty._systems, name, { </span><br><span class="line">				value: <span class="keyword">new</span> Crafty.CraftySystem(name, obj),</span><br><span class="line">				writable: <span class="literal">true</span>,</span><br><span class="line">				enumerable: <span class="literal">true</span>,</span><br><span class="line">				configurable: <span class="literal">true</span></span><br><span class="line">			});</span><br><span class="line">			Crafty.trigger(<span class="string">&quot;SystemLoaded&quot;</span>, name);</span><br><span class="line">			<span class="keyword">return</span> Crafty._systems[name];</span><br><span class="line">		},</span><br><span class="line">		configurable: <span class="literal">true</span></span><br><span class="line">	});</span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">// Each system has its properties and methods copied onto an object of this type</span></span><br><span class="line">Crafty.CraftySystem = (<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</span><br><span class="line">	systemID = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(name, template)</span> </span>{</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">if</span> (!template) <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">		<span class="keyword">this</span>._systemTemplate = template;</span><br><span class="line">		<span class="keyword">this</span>.extend(template);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Add the &quot;low leveL&quot; callback methods</span></span><br><span class="line">		Crafty._addCallbackMethods(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Give this object a global ID.  Used for event handlers.</span></span><br><span class="line">		<span class="keyword">this</span>[<span class="number">0</span>] = <span class="string">&quot;system&quot;</span> + (systemID++);</span><br><span class="line">		<span class="comment">// Run any instantiation code</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.init === <span class="string">&quot;function&quot;</span>) {</span><br><span class="line">			<span class="keyword">this</span>.init(name);</span><br><span class="line">		}</span><br><span class="line">		<span class="comment">// If an events object is provided, bind the listed event handlers</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="string">&quot;events&quot;</span> <span class="keyword">in</span> template){</span><br><span class="line">			<span class="keyword">var</span> auto = template.events;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">var</span> eventName <span class="keyword">in</span> auto){</span><br><span class="line">				<span class="keyword">var</span> fn = <span class="keyword">typeof</span> auto[eventName] === <span class="string">&quot;function&quot;</span> ? auto[eventName] : template[auto[eventName]];</span><br><span class="line">				<span class="keyword">this</span>.bind(eventName, fn);</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">	};</span><br><span class="line">})();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Crafty.CraftySystem.prototype = {</span><br><span class="line">	extend: <span class="function"><span class="keyword">function</span><span class="params">(obj)</span> </span>{</span><br><span class="line">		<span class="comment">// Copy properties and methods of obj</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) {</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>[key] === <span class="string">&quot;undefined&quot;</span>) {</span><br><span class="line">				<span class="keyword">this</span>[key] = obj[key];</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">	},</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Event methods</span></span><br><span class="line">	bind: <span class="function"><span class="keyword">function</span><span class="params">(event, callback)</span> </span>{</span><br><span class="line">		<span class="keyword">this</span>._bindCallback(event, callback);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">	},</span><br><span class="line"></span><br><span class="line">	trigger: <span class="function"><span class="keyword">function</span><span class="params">(event, data)</span> </span>{</span><br><span class="line">		<span class="keyword">this</span>._runCallbacks(event, data);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">	},</span><br><span class="line"></span><br><span class="line">	unbind: <span class="function"><span class="keyword">function</span><span class="params">(event, callback)</span> </span>{</span><br><span class="line">		<span class="keyword">this</span>._unbindCallbacks(event, callback);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">	},</span><br><span class="line"></span><br><span class="line">	one: <span class="function"><span class="keyword">function</span> <span class="params">(event, callback)</span> </span>{</span><br><span class="line">		<span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">		<span class="keyword">var</span> oneHandler = <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>{</span><br><span class="line">			callback.call(self, data);</span><br><span class="line">			self.unbind(event, oneHandler);</span><br><span class="line">		};</span><br><span class="line">		<span class="keyword">return</span> self.bind(event, oneHandler);</span><br><span class="line">	},</span><br><span class="line"></span><br><span class="line">	uniqueBind: <span class="function"><span class="keyword">function</span><span class="params">(event, callback)</span> </span>{</span><br><span class="line">		<span class="keyword">this</span>.unbind(event, callback);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.bind(event, callback);</span><br><span class="line">	},</span><br><span class="line"></span><br><span class="line">	destroy: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</span><br><span class="line">		Crafty.trigger(<span class="string">&quot;SystemDestroyed&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">		<span class="comment">// Check the template itself</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.remove === <span class="string">&quot;function&quot;</span>) {</span><br><span class="line">			<span class="keyword">this</span>.remove();</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">this</span>._unbindAll();</span><br><span class="line">		<span class="keyword">delete</span> Crafty._systems[<span class="keyword">this</span>.name];</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">};</span><br><span class="line">},{<span class="string">&quot;../core/core.js&quot;</span>:<span class="number">7</span>}],<span class="number">14</span>:[<span class="function"><span class="keyword">function</span><span class="params">(require,module,exports)</span></span>{</span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Delay</span><br><span class="line"> * @category Utilities</span><br><span class="line"> *</span><br><span class="line"> * A component for triggering functions after a given amount of time.</span><br><span class="line"> *</span><br><span class="line"> * This syncs with Crafty&apos;s internal clock, and so should generally be preferred to using methods such as `setTimeout`.</span><br><span class="line"> */</span></span><br><span class="line">module.exports = {</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>._delays = [];</span><br><span class="line">        <span class="keyword">this</span>.bind(<span class="string">&quot;EnterFrame&quot;</span>, <span class="function"><span class="keyword">function</span> <span class="params">(frameData)</span> </span>{</span><br><span class="line">            <span class="keyword">var</span> index = <span class="keyword">this</span>._delays.length;</span><br><span class="line">            <span class="keyword">while</span> (--index &gt;= <span class="number">0</span>) {</span><br><span class="line">                <span class="keyword">var</span> item = <span class="keyword">this</span>._delays[index];</span><br><span class="line">                <span class="keyword">if</span> (item === <span class="literal">false</span>) {</span><br><span class="line">                    <span class="comment">// remove canceled item from array</span></span><br><span class="line">                    <span class="keyword">this</span>._delays.splice(index, <span class="number">1</span>);</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    item.accumulator+=frameData.dt;</span><br><span class="line">                    <span class="comment">// The while loop handles the (pathological) case where dt&gt;delay</span></span><br><span class="line">                    <span class="keyword">while</span>(item.accumulator &gt;= item.delay &amp;&amp; item.repeat &gt;= <span class="number">0</span>){</span><br><span class="line">                        item.accumulator -= item.delay;</span><br><span class="line">                        item.repeat--;</span><br><span class="line">                        item.callback.call(<span class="keyword">this</span>);</span><br><span class="line">                    }</span><br><span class="line">                    <span class="comment">// remove finished item from array</span></span><br><span class="line">                    <span class="keyword">if</span> (item.repeat&lt;<span class="number">0</span>){</span><br><span class="line">                        <span class="keyword">this</span>._delays.splice(index, <span class="number">1</span>);</span><br><span class="line">                        <span class="keyword">if</span>(<span class="keyword">typeof</span> item.callbackOff === <span class="string">&quot;function&quot;</span>)</span><br><span class="line">                            item.callbackOff.call(<span class="keyword">this</span>);</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">    },</span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.delay</span><br><span class="line">     * @comp Delay</span><br><span class="line">     * @sign public this.delay(Function callback, Number delay[, Number repeat[, Function callbackOff]])</span><br><span class="line">     * @param callback - Method to execute after given amount of milliseconds. If reference of a</span><br><span class="line">     * method is passed, there&apos;s possibility to cancel the delay.</span><br><span class="line">     * @param delay - Amount of milliseconds to execute the method.</span><br><span class="line">     * @param repeat - (optional) How often to repeat the delayed function. A value of 0 triggers the delayed</span><br><span class="line">     * function exactly once. A value n &gt; 0 triggers the delayed function exactly n+1 times. A</span><br><span class="line">     * value of -1 triggers the delayed function indefinitely. Defaults to one execution.</span><br><span class="line">     * @param callbackOff - (optional) Method to execute after delay ends(after all iterations are executed). </span><br><span class="line">     * If repeat value equals -1, callbackOff will never be triggered.</span><br><span class="line">     *</span><br><span class="line">     * The delay method will execute a function after a given amount of time in milliseconds.</span><br><span class="line">     *</span><br><span class="line">     * It is not a wrapper for `setTimeout`.</span><br><span class="line">     *</span><br><span class="line">     * If Crafty is paused, the delay is interrupted with the pause and then resume when unpaused</span><br><span class="line">     *</span><br><span class="line">     * If the entity is destroyed, the delay is also destroyed and will not have effect.</span><br><span class="line">     *</span><br><span class="line">     * @example</span><br><span class="line">     *</span><br><span class="line">     * The simplest delay</span><br><span class="line">     *</span></span><br></pre></td></tr></table></figure>

     * Crafty.log(&quot;start&quot;);
     * Crafty.e(&quot;Delay&quot;).delay(function() {
     *   Crafty.log(&quot;100ms later&quot;);
     * }, 100, 0);
     * <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*</span><br><span class="line">* Delay <span class="keyword">with</span> callbackOff <span class="keyword">to</span> be executed <span class="keyword">after</span> all <span class="command">delay</span> iterations</span><br><span class="line">*</span><br></pre></td></tr></table></figure>

     * Crafty.log(&quot;start&quot;);
     * Crafty.e(&quot;Delay&quot;).delay(function() {
     *   Crafty.log(&quot;100ms later&quot;);
     * }, 100, 3, function() {
     *   Crafty.log(&quot;delay finished&quot;);
     * });
     * <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> *</span><br><span class="line"> */</span><br><span class="line"><span class="command">delay</span>: function (callback, <span class="command">delay</span>, <span class="keyword">repeat</span>, callbackOff) {</span><br><span class="line">    this._delays.push({</span><br><span class="line">        accumulator: <span class="number">0</span>,</span><br><span class="line">        callback: callback,</span><br><span class="line">        callbackOff: callbackOff,</span><br><span class="line">        <span class="command">delay</span>: <span class="command">delay</span>,</span><br><span class="line">        <span class="keyword">repeat</span>: (<span class="keyword">repeat</span> &lt; <span class="number">0</span> ? Infinity : <span class="keyword">repeat</span>) || <span class="number">0</span>,</span><br><span class="line">    });</span><br><span class="line"><span class="command">    return</span> this;</span><br><span class="line">},</span><br><span class="line">/**@</span><br><span class="line"> * <span class="comment">#.cancelDelay</span></span><br><span class="line"> * @comp Delay</span><br><span class="line"> * @sign public this.cancelDelay(Function callback)</span><br><span class="line"> * @param callback - Method <span class="keyword">reference</span> passed <span class="keyword">to</span> .<span class="command">delay</span></span><br><span class="line"> *</span><br><span class="line"> * The cancelDelay method will cancel a <span class="command">delay</span> <span class="keyword">set</span> previously.</span><br><span class="line"> *</span><br><span class="line"> * @example</span><br><span class="line"> *</span><br></pre></td></tr></table></figure>

     * var doSomething = function(){
     *   Crafty.log(&quot;doing something&quot;);
     * };
     *
     * // execute doSomething each 100 miliseconds indefinetely
     * var ent = Crafty.e(&quot;Delay&quot;).delay(doSomething, 100, -1);
     *
     * // and some time later, cancel further execution of doSomething
     * ent.cancelDelay(doSomething);
     * <figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">     */</span><br><span class="line">    cancelDelay: <span class="function"><span class="keyword">function</span> <span class="params">(callback)</span> </span>{</span><br><span class="line">        <span class="keyword">var</span> index = <span class="keyword">this</span>._delays.length;</span><br><span class="line">        <span class="keyword">while</span> (--index &gt;= <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">var</span> item = <span class="keyword">this</span>._delays[index];</span><br><span class="line">            <span class="keyword">if</span>(item &amp;&amp; item.<span class="keyword">callback</span> == <span class="keyword">callback</span>){</span><br><span class="line">                <span class="keyword">this</span>._delays[index] = <span class="literal">false</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">},{}],<span class="number">15</span>:[<span class="function"><span class="keyword">function</span><span class="params">(require,module,exports)</span></span>{</span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Tween</span><br><span class="line"> * @category Animation</span><br><span class="line"> * @trigger TweenEnd - when a tween finishes - String - property</span><br><span class="line"> *</span><br><span class="line"> * Component to animate the change in 2D properties over time.</span><br><span class="line"> */</span></span><br><span class="line">module.exports = {</span><br><span class="line"></span><br><span class="line">  init: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">this</span>.tweenGroup = {};</span><br><span class="line">    <span class="keyword">this</span>.tweenStart = {};</span><br><span class="line">    <span class="keyword">this</span>.tweens = [];</span><br><span class="line">    <span class="keyword">this</span>.uniqueBind(<span class="string">&quot;EnterFrame&quot;</span>, <span class="keyword">this</span>._tweenTick);</span><br><span class="line"></span><br><span class="line">  },</span><br><span class="line"></span><br><span class="line">  _tweenTick: <span class="function"><span class="keyword">function</span><span class="params">(frameData)</span></span>{</span><br><span class="line">    <span class="keyword">var</span> tween, v, i;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="keyword">this</span>.tweens.length-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--){</span><br><span class="line">      tween = <span class="keyword">this</span>.tweens[i];</span><br><span class="line">      tween.easing.tick(frameData.dt);</span><br><span class="line">      v  = tween.easing.value();</span><br><span class="line">      <span class="keyword">this</span>._doTween(tween.props, v);</span><br><span class="line">      <span class="keyword">if</span> (tween.easing.complete) {</span><br><span class="line">        <span class="keyword">this</span>.tweens.splice(i, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">this</span>._endTween(tween.props);</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line"></span><br><span class="line">  _doTween: <span class="function"><span class="keyword">function</span><span class="params">(props, v)</span></span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> name <span class="keyword">in</span> props)</span><br><span class="line">      <span class="keyword">this</span>[name] = (<span class="number">1</span>-v) * <span class="keyword">this</span>.tweenStart[name] + v * props[name];</span><br><span class="line"></span><br><span class="line">  },</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**@</span><br><span class="line">  * #.tween</span><br><span class="line">  * @comp Tween</span><br><span class="line">  * @sign public this .tween(Object properties, Number duration[, String|function easingFn])</span><br><span class="line">  * @param properties - Object of numeric properties and what they should animate to</span><br><span class="line">  * @param duration - Duration to animate the properties over, in milliseconds.</span><br><span class="line">  * @param easingFn - A string or custom function specifying an easing.  (Defaults to linear behavior.)  See Crafty.easing for more information.</span><br><span class="line">  *</span><br><span class="line">  * This method will animate numeric properties over the specified duration.</span><br><span class="line">  * These include `x`, `y`, `w`, `h`, `alpha` and `rotation`.</span><br><span class="line">  *</span><br><span class="line">  * The object passed should have the properties as keys and the value should be the resulting</span><br><span class="line">  * values of the properties.  The passed object might be modified if later calls to tween animate the same properties.</span><br><span class="line">  *</span><br><span class="line">  * @example</span><br><span class="line">  * Move an object to 100,100 and fade out over 200 ms.</span><br><span class="line">  *</span></span><br></pre></td></tr></table></figure>

  * Crafty.e(&quot;2D, Tween&quot;)
  *    .attr({alpha: 1.0, x: 0, y: 0})
  *    .tween({alpha: 0.0, x: 100, y: 100}, 200)
  * <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* @example</span><br><span class="line">* Rotate <span class="operator">an</span> object over <span class="number">2</span> <span class="built_in">seconds</span>, <span class="keyword">using</span> <span class="operator">the</span> <span class="string">&quot;smootherStep&quot;</span> easing <span class="function"><span class="keyword">function</span>.</span></span><br><span class="line">*</span><br></pre></td></tr></table></figure>

  * Crafty.e(&quot;2D, Tween&quot;)
  *    .attr({rotation:0})
  *    .tween({rotation:180}, 2000, &quot;smootherStep&quot;)
  * <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line">  *</span><br><span class="line">  * @see Crafty.easing</span><br><span class="line">  *</span><br><span class="line">  */</span><br><span class="line">  tween: <span class="function"><span class="keyword">function</span> <span class="params">(props, duration, easingFn)</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> tween = {</span><br><span class="line">      props: props,</span><br><span class="line">      easing: <span class="keyword">new</span> Crafty.easing(duration, easingFn)</span><br><span class="line">    };</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Tweens are grouped together by the original function call.</span></span><br><span class="line">    <span class="comment">// Individual properties must belong to only a single group</span></span><br><span class="line">    <span class="comment">// When a new tween starts, if it already belongs to a group, move it to the new one</span></span><br><span class="line">    <span class="comment">// Record the group it currently belongs to, as well as its starting coordinate.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> propname in props){</span><br><span class="line">      <span class="keyword">if</span> (typeof this.tweenGroup[propname] !== <span class="string">&quot;undefined&quot;</span>)</span><br><span class="line">        this.cancelTween(propname);</span><br><span class="line">      this.tweenStart[propname] = this[propname];</span><br><span class="line">      this.tweenGroup[propname] = props;</span><br><span class="line">    }</span><br><span class="line">    this.tweens.push(tween);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> this;</span><br><span class="line"></span><br><span class="line">  },</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**@</span><br><span class="line">  * #.cancelTween</span><br><span class="line">  * <span class="doctag">@comp</span> Tween</span><br><span class="line">  * <span class="doctag">@sign</span> public this .cancelTween(String target)</span><br><span class="line">  * <span class="doctag">@param</span> target - The property to cancel</span><br><span class="line">  *</span><br><span class="line">  * <span class="doctag">@sign</span> public this .cancelTween(Object target)</span><br><span class="line">  * <span class="doctag">@param</span> target - An object containing the properties to cancel.</span><br><span class="line">  *</span><br><span class="line">  * Stops tweening the specified property or properties.</span><br><span class="line">  * Passing the object used to start the tween might be a typical use of the second signature.</span><br><span class="line">  */</span></span><br><span class="line">  cancelTween: <span class="function"><span class="keyword">function</span><span class="params">(target)</span></span>{</span><br><span class="line">    <span class="keyword">if</span> (typeof target === <span class="string">&quot;string&quot;</span>){</span><br><span class="line">      <span class="keyword">if</span> (typeof this.tweenGroup[target] == <span class="string">&quot;object&quot;</span> )</span><br><span class="line">        delete this.tweenGroup[target][target];</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (typeof target === <span class="string">&quot;object&quot;</span>) {</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> propname in target)</span><br><span class="line">        this.cancelTween(propname);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> this;</span><br><span class="line"></span><br><span class="line">  },</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**@</span><br><span class="line">  * #.pauseTweens</span><br><span class="line">  * <span class="doctag">@comp</span> Tween</span><br><span class="line">  * <span class="doctag">@sign</span> public this .pauseTweens()</span><br><span class="line">  *</span><br><span class="line">  * Pauses all tweens associated with the entity</span><br><span class="line">  */</span></span><br><span class="line">  pauseTweens: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</span><br><span class="line">      this.tweens.map(<span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>{e.easing.pause();});</span><br><span class="line">  },</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**@</span><br><span class="line">  * #.resumeTWeens</span><br><span class="line">  * <span class="doctag">@comp</span> Tween</span><br><span class="line">  * <span class="doctag">@sign</span> public this .resumeTweens()</span><br><span class="line">  *</span><br><span class="line">  * Resumes all paused tweens associated with the entity</span><br><span class="line">  */</span></span><br><span class="line">  resumeTweens: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</span><br><span class="line">      this.tweens.map(<span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>{e.easing.resume();});</span><br><span class="line">  },</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span><br><span class="line">  * Stops tweening the specified group of properties, and fires the &quot;TweenEnd&quot; event.</span><br><span class="line">  */</span></span><br><span class="line">  _endTween: <span class="function"><span class="keyword">function</span><span class="params">(properties)</span></span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> propname in properties){</span><br><span class="line">      delete this.tweenGroup[propname];</span><br><span class="line">    }</span><br><span class="line">    this.trigger(<span class="string">&quot;TweenEnd&quot;</span>, properties);</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">},{}],<span class="number">16</span>:[<span class="function"><span class="keyword">function</span><span class="params">(require,module,exports)</span></span>{</span><br><span class="line">module.exports = <span class="string">&quot;0.7.1&quot;</span>;</span><br><span class="line">},{}],<span class="number">17</span>:[<span class="function"><span class="keyword">function</span><span class="params">(require,module,exports)</span></span>{</span><br><span class="line"><span class="keyword">var</span> Crafty = <span class="keyword">require</span>(<span class="string">&apos;./core/core&apos;</span>);</span><br><span class="line"></span><br><span class="line">Crafty.easing = <span class="keyword">require</span>(<span class="string">&apos;./core/animation&apos;</span>);</span><br><span class="line">Crafty.extend(<span class="keyword">require</span>(<span class="string">&apos;./core/extensions&apos;</span>));</span><br><span class="line">Crafty.extend(<span class="keyword">require</span>(<span class="string">&apos;./core/loader&apos;</span>));</span><br><span class="line">Crafty.c(<span class="string">&apos;Model&apos;</span>, <span class="keyword">require</span>(<span class="string">&apos;./core/model&apos;</span>));</span><br><span class="line">Crafty.extend(<span class="keyword">require</span>(<span class="string">&apos;./core/scenes&apos;</span>));</span><br><span class="line">Crafty.storage = <span class="keyword">require</span>(<span class="string">&apos;./core/storage&apos;</span>);</span><br><span class="line">Crafty.c(<span class="string">&apos;Delay&apos;</span>, <span class="keyword">require</span>(<span class="string">&apos;./core/time&apos;</span>));</span><br><span class="line">Crafty.c(<span class="string">&apos;Tween&apos;</span>, <span class="keyword">require</span>(<span class="string">&apos;./core/tween&apos;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span>(<span class="string">&apos;./core/systems&apos;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span>(<span class="string">&apos;./spatial/2d&apos;</span>);</span><br><span class="line"><span class="keyword">require</span>(<span class="string">&apos;./spatial/collision&apos;</span>);</span><br><span class="line"><span class="keyword">require</span>(<span class="string">&apos;./spatial/spatial-grid&apos;</span>);</span><br><span class="line"><span class="keyword">require</span>(<span class="string">&apos;./spatial/rect-manager&apos;</span>);</span><br><span class="line"><span class="keyword">require</span>(<span class="string">&apos;./spatial/math&apos;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span>(<span class="string">&apos;./graphics/canvas&apos;</span>);</span><br><span class="line"><span class="keyword">require</span>(<span class="string">&apos;./graphics/canvas-layer&apos;</span>);</span><br><span class="line"><span class="keyword">require</span>(<span class="string">&apos;./graphics/color&apos;</span>);</span><br><span class="line"><span class="keyword">require</span>(<span class="string">&apos;./graphics/dom&apos;</span>);</span><br><span class="line"><span class="keyword">require</span>(<span class="string">&apos;./graphics/dom-helper&apos;</span>);</span><br><span class="line"><span class="keyword">require</span>(<span class="string">&apos;./graphics/dom-layer&apos;</span>);</span><br><span class="line"><span class="keyword">require</span>(<span class="string">&apos;./graphics/drawing&apos;</span>);</span><br><span class="line"><span class="keyword">require</span>(<span class="string">&apos;./graphics/gl-textures&apos;</span>);</span><br><span class="line"><span class="keyword">require</span>(<span class="string">&apos;./graphics/html&apos;</span>);</span><br><span class="line"><span class="keyword">require</span>(<span class="string">&apos;./graphics/image&apos;</span>);</span><br><span class="line"><span class="keyword">require</span>(<span class="string">&apos;./graphics/particles&apos;</span>);</span><br><span class="line"><span class="keyword">require</span>(<span class="string">&apos;./graphics/sprite-animation&apos;</span>);</span><br><span class="line"><span class="keyword">require</span>(<span class="string">&apos;./graphics/sprite&apos;</span>);</span><br><span class="line"><span class="keyword">require</span>(<span class="string">&apos;./graphics/text&apos;</span>);</span><br><span class="line"><span class="keyword">require</span>(<span class="string">&apos;./graphics/viewport&apos;</span>);</span><br><span class="line"><span class="keyword">require</span>(<span class="string">&apos;./graphics/webgl&apos;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span>(<span class="string">&apos;./isometric/diamond-iso&apos;</span>);</span><br><span class="line"><span class="keyword">require</span>(<span class="string">&apos;./isometric/isometric&apos;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span>(<span class="string">&apos;./controls/inputs&apos;</span>);</span><br><span class="line"><span class="keyword">require</span>(<span class="string">&apos;./controls/controls&apos;</span>);</span><br><span class="line"><span class="keyword">require</span>(<span class="string">&apos;./controls/device&apos;</span>);</span><br><span class="line"><span class="keyword">require</span>(<span class="string">&apos;./controls/keycodes&apos;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span>(<span class="string">&apos;./sound/sound&apos;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span>(<span class="string">&apos;./debug/debug-layer&apos;</span>);</span><br><span class="line"><span class="keyword">require</span>(<span class="string">&apos;./debug/logging&apos;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(window) window.Crafty = Crafty;</span><br><span class="line"></span><br><span class="line">module.exports = Crafty;</span><br><span class="line"></span><br><span class="line">},{<span class="string">&quot;./controls/controls&quot;</span>:<span class="number">2</span>,<span class="string">&quot;./controls/device&quot;</span>:<span class="number">3</span>,<span class="string">&quot;./controls/inputs&quot;</span>:<span class="number">4</span>,<span class="string">&quot;./controls/keycodes&quot;</span>:<span class="number">5</span>,<span class="string">&quot;./core/animation&quot;</span>:<span class="number">6</span>,<span class="string">&quot;./core/core&quot;</span>:<span class="number">7</span>,<span class="string">&quot;./core/extensions&quot;</span>:<span class="number">8</span>,<span class="string">&quot;./core/loader&quot;</span>:<span class="number">9</span>,<span class="string">&quot;./core/model&quot;</span>:<span class="number">10</span>,<span class="string">&quot;./core/scenes&quot;</span>:<span class="number">11</span>,<span class="string">&quot;./core/storage&quot;</span>:<span class="number">12</span>,<span class="string">&quot;./core/systems&quot;</span>:<span class="number">13</span>,<span class="string">&quot;./core/time&quot;</span>:<span class="number">14</span>,<span class="string">&quot;./core/tween&quot;</span>:<span class="number">15</span>,<span class="string">&quot;./debug/debug-layer&quot;</span>:<span class="number">18</span>,<span class="string">&quot;./debug/logging&quot;</span>:<span class="number">19</span>,<span class="string">&quot;./graphics/canvas&quot;</span>:<span class="number">21</span>,<span class="string">&quot;./graphics/canvas-layer&quot;</span>:<span class="number">20</span>,<span class="string">&quot;./graphics/color&quot;</span>:<span class="number">22</span>,<span class="string">&quot;./graphics/dom&quot;</span>:<span class="number">25</span>,<span class="string">&quot;./graphics/dom-helper&quot;</span>:<span class="number">23</span>,<span class="string">&quot;./graphics/dom-layer&quot;</span>:<span class="number">24</span>,<span class="string">&quot;./graphics/drawing&quot;</span>:<span class="number">26</span>,<span class="string">&quot;./graphics/gl-textures&quot;</span>:<span class="number">27</span>,<span class="string">&quot;./graphics/html&quot;</span>:<span class="number">28</span>,<span class="string">&quot;./graphics/image&quot;</span>:<span class="number">29</span>,<span class="string">&quot;./graphics/particles&quot;</span>:<span class="number">30</span>,<span class="string">&quot;./graphics/sprite&quot;</span>:<span class="number">32</span>,<span class="string">&quot;./graphics/sprite-animation&quot;</span>:<span class="number">31</span>,<span class="string">&quot;./graphics/text&quot;</span>:<span class="number">33</span>,<span class="string">&quot;./graphics/viewport&quot;</span>:<span class="number">34</span>,<span class="string">&quot;./graphics/webgl&quot;</span>:<span class="number">35</span>,<span class="string">&quot;./isometric/diamond-iso&quot;</span>:<span class="number">36</span>,<span class="string">&quot;./isometric/isometric&quot;</span>:<span class="number">37</span>,<span class="string">&quot;./sound/sound&quot;</span>:<span class="number">38</span>,<span class="string">&quot;./spatial/2d&quot;</span>:<span class="number">39</span>,<span class="string">&quot;./spatial/collision&quot;</span>:<span class="number">40</span>,<span class="string">&quot;./spatial/math&quot;</span>:<span class="number">41</span>,<span class="string">&quot;./spatial/rect-manager&quot;</span>:<span class="number">42</span>,<span class="string">&quot;./spatial/spatial-grid&quot;</span>:<span class="number">43</span>}],<span class="number">18</span>:[<span class="function"><span class="keyword">function</span><span class="params">(require,module,exports)</span></span>{</span><br><span class="line"><span class="keyword">var</span> Crafty = <span class="keyword">require</span>(<span class="string">&apos;../core/core.js&apos;</span>),</span><br><span class="line">    document = window.document;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #DebugCanvas</span><br><span class="line"> * <span class="doctag">@category</span> Debug</span><br><span class="line"> * <span class="doctag">@trigger</span> Draw - when the entity is ready to be drawn to the stage</span><br><span class="line"> * <span class="doctag">@trigger</span> NoCanvas - if the browser does not support canvas</span><br><span class="line"> *</span><br><span class="line"> * When this component is added to an entity it will be drawn by the DebugCanvas layer.</span><br><span class="line"> *</span><br><span class="line"> * Crafty.debugCanvas.init() will be automatically called if it is not called already to initialize the canvas element.</span><br><span class="line"> *</span><br><span class="line"> * To visualise an object&apos;s MBR, use &quot;VisibleMBR&quot;.  To visualise a &quot;Collision&quot; object&apos;s hitbox, use &quot;WiredHitBox&quot; or &quot;SolidHitBox&quot;.</span><br><span class="line"> * <span class="doctag">@see</span> DebugPolygon,  DebugRectangle</span><br><span class="line"> */</span></span><br><span class="line">Crafty.c(<span class="string">&quot;DebugCanvas&quot;</span>, {</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        this.requires(<span class="string">&quot;2D&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!Crafty.DebugCanvas.context)</span><br><span class="line">            Crafty.DebugCanvas.init();</span><br><span class="line">        Crafty.DebugCanvas.add(this);</span><br><span class="line">        this._debug = {</span><br><span class="line">            alpha: <span class="number">1.0</span>,</span><br><span class="line">            lineWidth: <span class="number">1</span></span><br><span class="line">        };</span><br><span class="line">        this.bind(<span class="string">&quot;RemoveComponent&quot;</span>, this.onDebugRemove);</span><br><span class="line">        this.bind(<span class="string">&quot;Remove&quot;</span>, this.onDebugDestroy);</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">// When component is removed</span></span><br><span class="line">    onDebugRemove: <span class="function"><span class="keyword">function</span> <span class="params">(id)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (id === <span class="string">&quot;DebugCanvas&quot;</span>) {</span><br><span class="line">            Crafty.DebugCanvas.remove(this);</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">//When entity is destroyed</span></span><br><span class="line">    onDebugDestroy: <span class="function"><span class="keyword">function</span> <span class="params">(id)</span> </span>{</span><br><span class="line">        Crafty.DebugCanvas.remove(this);</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.debugAlpha</span><br><span class="line">     * <span class="doctag">@comp</span> DebugCanvas</span><br><span class="line">     * <span class="doctag">@sign</span> public  .debugAlpha(Number alpha)</span><br><span class="line">     * <span class="doctag">@param</span> alpha - The alpha level the component will be drawn with</span><br><span class="line">     */</span></span><br><span class="line">    debugAlpha: <span class="function"><span class="keyword">function</span> <span class="params">(alpha)</span> </span>{</span><br><span class="line">        this._debug.alpha = alpha;</span><br><span class="line">        <span class="keyword">return</span> this;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.debugFill</span><br><span class="line">     * <span class="doctag">@comp</span> DebugCanvas</span><br><span class="line">     * <span class="doctag">@sign</span> public  .debugFill([String fillStyle])</span><br><span class="line">     * <span class="doctag">@param</span> fillStyle - The color the component will be filled with.  Defaults to &quot;red&quot;. Pass the boolean false to turn off filling.</span><br><span class="line">     * <span class="doctag">@example</span></span><br><span class="line">     *</span></span><br></pre></td></tr></table></figure>

     * var myEntity = Crafty.e(&quot;2D, Collision, SolidHitBox &quot;).debugFill(&quot;purple&quot;)
     * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">debugFill: function (fillStyle) {</span><br><span class="line">    if (typeof fillStyle === &apos;undefined&apos;)</span><br><span class="line">        fillStyle = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">    this._debug.fillStyle = fillStyle;</span><br><span class="line">    return this;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span>@</span><br><span class="line"> <span class="keyword">*</span> <span class="comment">#.debugStroke</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@comp DebugCanvas</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@sign public  .debugStroke([String strokeStyle])</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param strokeStyle - The color the component will be outlined with.  Defaults to &quot;red&quot;.  Pass the boolean false to turn this off.</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@example</span></span><br><span class="line"> <span class="keyword">*</span></span><br></pre></td></tr></table></figure>

     * var myEntity = Crafty.e(&quot;2D, Collision, WiredHitBox &quot;).debugStroke(&quot;white&quot;)
     * <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">     */</span><br><span class="line">    debugStroke: <span class="function"><span class="keyword">function</span> <span class="params">(strokeStyle)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> strokeStyle === <span class="string">&apos;undefined&apos;</span>)</span><br><span class="line">            strokeStyle = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>._debug.strokeStyle = strokeStyle;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    debugDraw: <span class="function"><span class="keyword">function</span> <span class="params">(ctx)</span> </span>{</span><br><span class="line">        <span class="keyword">var</span> ga = ctx.globalAlpha;</span><br><span class="line">        <span class="keyword">var</span> props = <span class="keyword">this</span>._debug;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (props.alpha)</span><br><span class="line">            ctx.globalAlpha = <span class="keyword">this</span>._debug.alpha;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (props.strokeStyle)</span><br><span class="line">            ctx.strokeStyle = props.strokeStyle;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (props.lineWidth)</span><br><span class="line">            ctx.lineWidth = props.lineWidth;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (props.fillStyle)</span><br><span class="line">            ctx.fillStyle = props.fillStyle;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.trigger(<span class="string">&quot;DebugDraw&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ctx.globalAlpha = ga;</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #DebugRectangle</span><br><span class="line"> * @category Debug</span><br><span class="line"> *</span><br><span class="line"> * A component for rendering an object with a position and dimensions to the debug canvas.</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> *</span></span><br></pre></td></tr></table></figure>

 * var myEntity = Crafty.e(&quot;2D, DebugRectangle&quot;)
 *                      .attr({x: 13, y: 37, w: 42, h: 42})
 *                      .debugStroke(&quot;green&quot;);
 * myEntity.debugRectangle(myEntity)
 *<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br></pre></td><td class="code"><pre><span class="line"> * @see DebugCanvas</span><br><span class="line"> */</span><br><span class="line">Crafty.c(<span class="string">&quot;DebugRectangle&quot;</span>, {</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.requires(<span class="string">&quot;2D, DebugCanvas&quot;</span>);</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.debugRectangle</span><br><span class="line">     * @comp DebugRectangle</span><br><span class="line">     * @sign public  .debugRectangle(Object rect)</span><br><span class="line">     * @param rect - an object with _x, _y, _w, and _h to draw</span><br><span class="line">     *</span><br><span class="line">     * Sets the rectangle that this component draws to the debug canvas.</span><br><span class="line">     *</span><br><span class="line">     */</span></span><br><span class="line">    debugRectangle: <span class="function"><span class="keyword">function</span> <span class="params">(rect)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.debugRect = rect;</span><br><span class="line">        <span class="keyword">this</span>.unbind(<span class="string">&quot;DebugDraw&quot;</span>, <span class="keyword">this</span>.drawDebugRect);</span><br><span class="line">        <span class="keyword">this</span>.bind(<span class="string">&quot;DebugDraw&quot;</span>, <span class="keyword">this</span>.drawDebugRect);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    drawDebugRect: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> ctx = Crafty.DebugCanvas.context;</span><br><span class="line">        <span class="keyword">var</span> rect = <span class="keyword">this</span>.debugRect;</span><br><span class="line">        <span class="keyword">if</span> (rect === <span class="literal">null</span> || rect === <span class="literal">undefined</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (rect._h &amp;&amp; rect._w) {</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>._debug.fillStyle)</span><br><span class="line">                ctx.fillRect(rect._x, rect._y, rect._w, rect._h);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>._debug.strokeStyle)</span><br><span class="line">                ctx.strokeRect(rect._x, rect._y, rect._w, rect._h);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #VisibleMBR</span><br><span class="line"> * @category Debug</span><br><span class="line"> *</span><br><span class="line"> * Adding this component to an entity will cause it&apos;s MBR to be drawn to the debug canvas.</span><br><span class="line"> *</span><br><span class="line"> * The methods of DebugCanvas can be used to control this component&apos;s appearance.</span><br><span class="line"> * @see 2D, DebugRectangle, DebugCanvas</span><br><span class="line"> */</span></span><br><span class="line">Crafty.c(<span class="string">&quot;VisibleMBR&quot;</span>, {</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.requires(<span class="string">&quot;DebugRectangle&quot;</span>)</span><br><span class="line">            .debugFill(<span class="string">&quot;purple&quot;</span>)</span><br><span class="line">            .bind(<span class="string">&quot;EnterFrame&quot;</span>, <span class="keyword">this</span>._assignRect);</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Internal method for updating the MBR drawn.</span></span><br><span class="line">    _assignRect: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._mbr)</span><br><span class="line">            <span class="keyword">this</span>.debugRectangle(<span class="keyword">this</span>._mbr);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">this</span>.debugRectangle(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #DebugPolygon</span><br><span class="line"> * @category Debug</span><br><span class="line"> *</span><br><span class="line"> * For drawing a polygon to the debug canvas</span><br><span class="line"> *</span><br><span class="line"> * The methods of DebugCanvas can be used to control this component&apos;s appearance -- by default it is neither filled nor outlined</span><br><span class="line"> *</span><br><span class="line"> * For debugging hitboxes, use WiredHitBox or SolidHitBox.  For debugging MBR, use VisibleMBR</span><br><span class="line"> *</span><br><span class="line"> * @see DebugCanvas</span><br><span class="line"> */</span></span><br><span class="line">Crafty.c(<span class="string">&quot;DebugPolygon&quot;</span>, {</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.requires(<span class="string">&quot;2D, DebugCanvas&quot;</span>);</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.debugPolygon</span><br><span class="line">     * @comp DebugPolygon</span><br><span class="line">     * @sign public  .debugPolygon(Polygon poly)</span><br><span class="line">     * @param poly - a polygon to render</span><br><span class="line">     *</span><br><span class="line">     * Sets the polygon that this component renders to the debug canvas.</span><br><span class="line">     *</span><br><span class="line">     */</span></span><br><span class="line">    debugPolygon: <span class="function"><span class="keyword">function</span> <span class="params">(poly)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.polygon = poly;</span><br><span class="line">        <span class="keyword">this</span>.unbind(<span class="string">&quot;DebugDraw&quot;</span>, <span class="keyword">this</span>.drawDebugPolygon);</span><br><span class="line">        <span class="keyword">this</span>.bind(<span class="string">&quot;DebugDraw&quot;</span>, <span class="keyword">this</span>.drawDebugPolygon);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    drawDebugPolygon: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.polygon === <span class="string">&quot;undefined&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> ctx = Crafty.DebugCanvas.context;</span><br><span class="line">        ctx.beginPath();</span><br><span class="line">        <span class="keyword">var</span> p = <span class="keyword">this</span>.polygon.points, l = p.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;l; i+=<span class="number">2</span>){</span><br><span class="line">            ctx.lineTo(p[i], p[i+<span class="number">1</span>]);</span><br><span class="line">        }</span><br><span class="line">        ctx.closePath();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._debug.fillStyle)</span><br><span class="line">            ctx.fill();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._debug.strokeStyle)</span><br><span class="line">            ctx.stroke();</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #WiredHitBox</span><br><span class="line"> * @category Debug</span><br><span class="line"> *</span><br><span class="line"> * Adding this component to an entity with a Collision component will cause its collision polygon to be drawn to the debug canvas as an outline</span><br><span class="line"> *</span><br><span class="line"> * The methods of DebugCanvas can be used to control this component&apos;s appearance.</span><br><span class="line"> * @see DebugPolygon, DebugCanvas</span><br><span class="line"> */</span></span><br><span class="line">Crafty.c(<span class="string">&quot;WiredHitBox&quot;</span>, {</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.requires(<span class="string">&quot;DebugPolygon&quot;</span>)</span><br><span class="line">            .debugStroke(<span class="string">&quot;red&quot;</span>)</span><br><span class="line">            .matchHitBox();</span><br><span class="line">        <span class="keyword">this</span>.bind(<span class="string">&quot;NewHitbox&quot;</span>, <span class="keyword">this</span>.matchHitBox);</span><br><span class="line">    },</span><br><span class="line">    matchHitBox: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.debugPolygon(<span class="keyword">this</span>.map);</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #SolidHitBox</span><br><span class="line"> * @category Debug</span><br><span class="line"> *</span><br><span class="line"> * Adding this component to an entity with a Collision component will cause its collision polygon to be drawn to the debug canvas, with a default alpha level of 0.7.</span><br><span class="line"> *</span><br><span class="line"> * The methods of DebugCanvas can be used to control this component&apos;s appearance.</span><br><span class="line"> * @see DebugPolygon, DebugCanvas</span><br><span class="line"> */</span></span><br><span class="line">Crafty.c(<span class="string">&quot;SolidHitBox&quot;</span>, {</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.requires(<span class="string">&quot;Collision, DebugPolygon&quot;</span>)</span><br><span class="line">            .debugFill(<span class="string">&quot;orange&quot;</span>).debugAlpha(<span class="number">0.7</span>)</span><br><span class="line">            .matchHitBox();</span><br><span class="line">        <span class="keyword">this</span>.bind(<span class="string">&quot;NewHitbox&quot;</span>, <span class="keyword">this</span>.matchHitBox);</span><br><span class="line">    },</span><br><span class="line">    matchHitBox: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.debugPolygon(<span class="keyword">this</span>.map);</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #WiredAreaMap</span><br><span class="line"> * @category Debug</span><br><span class="line"> *</span><br><span class="line"> * Adding this component to an entity with an AreaMap component will cause its click polygon to be drawn to the debug canvas as an outline.</span><br><span class="line"> * Following click areas exist for an entity (in decreasing order of priority): AreaMap, Hitbox, MBR. Use the appropriate debug components to display them.</span><br><span class="line"> *</span><br><span class="line"> * The methods of DebugCanvas can be used to control this component&apos;s appearance.</span><br><span class="line"> * @see DebugPolygon, DebugCanvas</span><br><span class="line"> */</span></span><br><span class="line">Crafty.c(<span class="string">&quot;WiredAreaMap&quot;</span>, {</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.requires(<span class="string">&quot;DebugPolygon&quot;</span>)</span><br><span class="line">            .debugStroke(<span class="string">&quot;green&quot;</span>)</span><br><span class="line">            .matchAreaMap();</span><br><span class="line">        <span class="keyword">this</span>.bind(<span class="string">&quot;NewAreaMap&quot;</span>, <span class="keyword">this</span>.matchAreaMap);</span><br><span class="line">    },</span><br><span class="line">    matchAreaMap: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.debugPolygon(<span class="keyword">this</span>.mapArea);</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #SolidAreaMap</span><br><span class="line"> * @category Debug</span><br><span class="line"> *</span><br><span class="line"> * Adding this component to an entity with an AreaMap component will cause its click polygon to be drawn to the debug canvas, with a default alpha level of 0.7.</span><br><span class="line"> * Following click areas exist for an entity (in decreasing order of priority): AreaMap, Hitbox, MBR. Use the appropriate debug components to display them.</span><br><span class="line"> *</span><br><span class="line"> * The methods of DebugCanvas can be used to control this component&apos;s appearance.</span><br><span class="line"> * @see DebugPolygon, DebugCanvas</span><br><span class="line"> */</span></span><br><span class="line">Crafty.c(<span class="string">&quot;SolidAreaMap&quot;</span>, {</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.requires(<span class="string">&quot;DebugPolygon&quot;</span>)</span><br><span class="line">            .debugFill(<span class="string">&quot;lime&quot;</span>).debugAlpha(<span class="number">0.7</span>)</span><br><span class="line">            .matchAreaMap();</span><br><span class="line">        <span class="keyword">this</span>.bind(<span class="string">&quot;NewAreaMap&quot;</span>, <span class="keyword">this</span>.matchAreaMap);</span><br><span class="line">    },</span><br><span class="line">    matchAreaMap: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.debugPolygon(<span class="keyword">this</span>.mapArea);</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">Crafty.DebugCanvas = {</span><br><span class="line">    context: <span class="literal">null</span>,</span><br><span class="line">    entities: [],</span><br><span class="line">    onetimeEntities: [],</span><br><span class="line">    add: <span class="function"><span class="keyword">function</span> <span class="params">(ent)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.entities.push(ent);</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    remove: <span class="function"><span class="keyword">function</span> <span class="params">(ent)</span> </span>{</span><br><span class="line">        <span class="keyword">var</span> list = <span class="keyword">this</span>.entities;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = list.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            <span class="keyword">if</span> (list[i] == ent)</span><br><span class="line">                list.splice(i, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Mostly copied from canvas.init()</span></span><br><span class="line">    <span class="comment">// Called the first time a &quot;DebugCanvas&quot; component is added to an entity</span></span><br><span class="line">    <span class="comment">// We should consider how to abstract the idea of multiple canvases</span></span><br><span class="line">    init: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (!Crafty.DebugCanvas.context) {</span><br><span class="line">            <span class="comment">//check if canvas is supported</span></span><br><span class="line">            <span class="keyword">if</span> (!Crafty.support.canvas) {</span><br><span class="line">                Crafty.trigger(<span class="string">&quot;NoCanvas&quot;</span>);</span><br><span class="line">                Crafty.stop();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">//create an empty canvas element</span></span><br><span class="line">            <span class="keyword">var</span> c;</span><br><span class="line">            c = document.createElement(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">            c.width = Crafty.viewport.width;</span><br><span class="line">            c.height = Crafty.viewport.height;</span><br><span class="line">            c.style.position = <span class="string">&apos;absolute&apos;</span>;</span><br><span class="line">            c.style.left = <span class="string">&quot;0px&quot;</span>;</span><br><span class="line">            c.style.top = <span class="string">&quot;0px&quot;</span>;</span><br><span class="line">            c.id = <span class="string">&quot;debug-canvas&quot;</span>;</span><br><span class="line">            <span class="comment">// The debug canvas should be on the very top; the highest a regular zindex can get is ~10000</span></span><br><span class="line">            c.style.zIndex = <span class="number">100000</span>;</span><br><span class="line"></span><br><span class="line">            Crafty.stage.elem.appendChild(c);</span><br><span class="line">            Crafty.DebugCanvas.context = c.getContext(<span class="string">&apos;2d&apos;</span>);</span><br><span class="line">            Crafty.DebugCanvas._canvas = c;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//Bind rendering of canvas context (see drawing.js)</span></span><br><span class="line">        Crafty.unbind(<span class="string">&quot;RenderScene&quot;</span>, Crafty.DebugCanvas.renderScene);</span><br><span class="line">        Crafty.bind(<span class="string">&quot;RenderScene&quot;</span>, Crafty.DebugCanvas.renderScene);</span><br><span class="line"></span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// copied from drawAll()</span></span><br><span class="line">    renderScene: <span class="function"><span class="keyword">function</span> <span class="params">(rect)</span> </span>{</span><br><span class="line">        rect = rect || Crafty.viewport.rect();</span><br><span class="line">        <span class="keyword">var</span> q = Crafty.DebugCanvas.entities,</span><br><span class="line">            i = <span class="number">0</span>,</span><br><span class="line">            l = q.length,</span><br><span class="line">            ctx = Crafty.DebugCanvas.context,</span><br><span class="line">            current;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> view = Crafty.viewport;</span><br><span class="line">        ctx.setTransform(view._scale, <span class="number">0</span>, <span class="number">0</span>, view._scale, Math.round(view._x*view._scale), Math.round(view._y*view._scale));</span><br><span class="line"></span><br><span class="line">        ctx.clearRect(rect._x, rect._y, rect._w, rect._h);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//sort the objects by the global Z</span></span><br><span class="line">        <span class="comment">//q.sort(zsort);</span></span><br><span class="line">        <span class="keyword">for</span> (; i &lt; l; i++) {</span><br><span class="line">            current = q[i];</span><br><span class="line">            current.debugDraw(ctx);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">},{<span class="string">&quot;../core/core.js&quot;</span>:<span class="number">7</span>}],<span class="number">19</span>:[<span class="function"><span class="keyword">function</span><span class="params">(require,module,exports)</span></span>{</span><br><span class="line"><span class="keyword">var</span> Crafty = require(<span class="string">&apos;../core/core.js&apos;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Crafty.log</span><br><span class="line"> * @category Debug</span><br><span class="line"> *</span><br><span class="line"> * @sign Crafty.log( arguments )</span><br><span class="line"> * @param arguments - arguments which are passed to `console.log`</span><br><span class="line"> *</span><br><span class="line"> * This is a simple wrapper for `console.log`.  You can disable logging messages by setting `Crafty.loggingEnabled` to false.</span><br><span class="line"> * It is recommended to use `Crafty.log`, as `console.log` can crash on IE9.</span><br><span class="line"> */</span></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Crafty.error</span><br><span class="line"> * @category Debug</span><br><span class="line"> *</span><br><span class="line"> * @sign Crafty.error( arguments )</span><br><span class="line"> * @param arguments - arguments which are passed to `console.error`</span><br><span class="line"> *</span><br><span class="line"> * This is a simple wrapper for `console.error`.  You can disable logging messages by setting `Crafty.loggingEnabled` to false.</span><br><span class="line"> * It is recommended to use `Crafty.error`, as `console.error` can crash on IE9.</span><br><span class="line"> */</span></span><br><span class="line">Crafty.extend({</span><br><span class="line">	<span class="comment">// Allow logging to be disabled</span></span><br><span class="line">	loggingEnabled: <span class="literal">true</span>,</span><br><span class="line">	<span class="comment">// In some cases console.log doesn&apos;t exist, so provide a wrapper for it</span></span><br><span class="line">	log: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</span><br><span class="line">		<span class="keyword">if</span> (Crafty.loggingEnabled &amp;&amp; console &amp;&amp; console.log) {</span><br><span class="line">			console.log.apply(console, arguments);</span><br><span class="line">		}</span><br><span class="line">	},</span><br><span class="line">	error: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</span><br><span class="line">		<span class="keyword">if</span> (Crafty.loggingEnabled &amp;&amp; console &amp;&amp; console.error) {</span><br><span class="line">			console.error.apply(console, arguments);</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">});</span><br><span class="line">},{<span class="string">&quot;../core/core.js&quot;</span>:<span class="number">7</span>}],<span class="number">20</span>:[<span class="function"><span class="keyword">function</span><span class="params">(require,module,exports)</span></span>{</span><br><span class="line"><span class="keyword">var</span> Crafty = require(<span class="string">&apos;../core/core.js&apos;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Crafty.canvasLayer</span><br><span class="line"> * @category Graphics</span><br><span class="line"> *</span><br><span class="line"> * Collection of mostly private methods to draw entities on a canvas element.</span><br><span class="line"> */</span></span><br><span class="line">Crafty.extend({</span><br><span class="line">    canvasLayer: {</span><br><span class="line">        _dirtyRects: [],</span><br><span class="line">        _changedObjs: [],</span><br><span class="line">        layerCount: <span class="number">0</span>,</span><br><span class="line">        _dirtyViewport: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Sort function for rendering in the correct order</span></span><br><span class="line">        _sort: <span class="function"><span class="keyword">function</span><span class="params">(a, b)</span> </span>{</span><br><span class="line">            <span class="keyword">return</span> a._globalZ - b._globalZ;</span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**@</span><br><span class="line">         * #Crafty.canvasLayer.add</span><br><span class="line">         * @comp Crafty.canvasLayer</span><br><span class="line">         * @sign public Crafty.canvasLayer.add(ent)</span><br><span class="line">         * @param ent - The entity to add</span><br><span class="line">         *</span><br><span class="line">         * Add an entity to the list of Canvas objects to draw</span><br><span class="line">         */</span></span><br><span class="line">        add: <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(ent)</span> </span>{</span><br><span class="line">            <span class="keyword">this</span>._changedObjs.push(ent);</span><br><span class="line">        },</span><br><span class="line">        <span class="comment">/**@</span><br><span class="line">         * #Crafty.canvasLayer.context</span><br><span class="line">         * @comp Crafty.canvasLayer</span><br><span class="line">         *</span><br><span class="line">         * This will return the 2D context of the main canvas element.</span><br><span class="line">         * The value returned from `Crafty.canvasLayer._canvas.getContext(&apos;2d&apos;)`.</span><br><span class="line">         */</span></span><br><span class="line">        context: <span class="literal">null</span>,</span><br><span class="line">        <span class="comment">/**@</span><br><span class="line">         * #Crafty.canvasLayer._canvas</span><br><span class="line">         * @comp Crafty.canvasLayer</span><br><span class="line">         *</span><br><span class="line">         * Main Canvas element</span><br><span class="line">         */</span></span><br><span class="line">         _canvas: <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**@</span><br><span class="line">         * #Crafty.canvasLayer.init</span><br><span class="line">         * @comp Crafty.canvasLayer</span><br><span class="line">         * @sign public void Crafty.canvasLayer.init(void)</span><br><span class="line">         * @trigger NoCanvas - triggered if `Crafty.support.canvas` is false</span><br><span class="line">         *</span><br><span class="line">         * Creates a `canvas` element inside `Crafty.stage.elem`. Must be called</span><br><span class="line">         * before any entities with the Canvas component can be drawn.</span><br><span class="line">         *</span><br><span class="line">         * This method will automatically be called if no `Crafty.canvasLayer.context` is</span><br><span class="line">         * found.</span><br><span class="line">         */</span></span><br><span class="line">        init: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">            <span class="comment">//check if canvas is supported</span></span><br><span class="line">            <span class="keyword">if</span> (!Crafty.support.canvas) {</span><br><span class="line">                Crafty.trigger(<span class="string">&quot;NoCanvas&quot;</span>);</span><br><span class="line">                Crafty.stop();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">// set properties to initial values -- necessary on a restart</span></span><br><span class="line">            <span class="keyword">this</span>._dirtyRects = [];</span><br><span class="line">            <span class="keyword">this</span>._changedObjs = [];</span><br><span class="line">            <span class="keyword">this</span>.layerCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//create an empty canvas element</span></span><br><span class="line">            <span class="keyword">var</span> c;</span><br><span class="line">            c = document.createElement(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">            c.width = Crafty.viewport.width;</span><br><span class="line">            c.height = Crafty.viewport.height;</span><br><span class="line">            c.style.position = <span class="string">&apos;absolute&apos;</span>;</span><br><span class="line">            c.style.left = <span class="string">&quot;0px&quot;</span>;</span><br><span class="line">            c.style.top = <span class="string">&quot;0px&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> canvas = Crafty.canvasLayer;</span><br><span class="line"></span><br><span class="line">            Crafty.stage.elem.appendChild(c);</span><br><span class="line">            <span class="keyword">this</span>.context = c.getContext(<span class="string">&apos;2d&apos;</span>);</span><br><span class="line">            <span class="keyword">this</span>._canvas = c;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//Set any existing transformations</span></span><br><span class="line">            <span class="keyword">var</span> zoom = Crafty.viewport._scale;</span><br><span class="line">            <span class="keyword">if</span> (zoom != <span class="number">1</span>)</span><br><span class="line">                c.scale(zoom, zoom);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Set pixelart to current status, and listen for changes</span></span><br><span class="line">            <span class="keyword">this</span>._setPixelart(Crafty._pixelartEnabled);</span><br><span class="line">            Crafty.uniqueBind(<span class="string">&quot;PixelartSet&quot;</span>, <span class="keyword">this</span>._setPixelart);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//Bind rendering of canvas context (see drawing.js)</span></span><br><span class="line">            Crafty.uniqueBind(<span class="string">&quot;RenderScene&quot;</span>, <span class="keyword">this</span>._render);</span><br><span class="line">            </span><br><span class="line">            Crafty.uniqueBind(<span class="string">&quot;ViewportResize&quot;</span>, <span class="keyword">this</span>._resize);</span><br><span class="line"></span><br><span class="line">            Crafty.bind(<span class="string">&quot;InvalidateViewport&quot;</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">                Crafty.canvasLayer._dirtyViewport = <span class="literal">true</span>;</span><br><span class="line">            });</span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        _render: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">var</span> layer = Crafty.canvasLayer,</span><br><span class="line">                dirtyViewport = layer._dirtyViewport,</span><br><span class="line">                l = layer._changedObjs.length,</span><br><span class="line">                ctx = layer.context;</span><br><span class="line">            <span class="keyword">if</span> (!l &amp;&amp; !dirtyViewport) {</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (dirtyViewport) {</span><br><span class="line">                <span class="keyword">var</span> view = Crafty.viewport;</span><br><span class="line">                ctx.setTransform(view._scale, <span class="number">0</span>, <span class="number">0</span>, view._scale, Math.round(view._x*view._scale), Math.round(view._y*view._scale) );</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">//if the amount of changed objects is over 60% of the total objects</span></span><br><span class="line">            <span class="comment">//do the naive method redrawing</span></span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> I&apos;m not sure this condition really makes that much sense!</span></span><br><span class="line">            <span class="keyword">if</span> (l / layer.layerCount &gt; <span class="number">0.6</span> || dirtyViewport) {</span><br><span class="line">                layer._drawAll();</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                layer._drawDirty();</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//Clean up lists etc</span></span><br><span class="line">            layer._clean();</span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**@</span><br><span class="line">         * #Crafty.canvasLayer.drawDirty</span><br><span class="line">         * @comp Crafty.canvasLayer</span><br><span class="line">         * @sign public Crafty.canvasLayer.drawDirty()</span><br><span class="line">         *</span><br><span class="line">         * - Triggered by the &quot;RenderScene&quot; event</span><br><span class="line">         * - If the number of rects is over 60% of the total number of objects</span><br><span class="line">         *  do the naive method redrawing `Crafty.canvasLayer.drawAll` instead</span><br><span class="line">         * - Otherwise, clear the dirty regions, and redraw entities overlapping the dirty regions.</span><br><span class="line">         *</span><br><span class="line">         * @see Canvas#.draw</span><br><span class="line">         */</span></span><br><span class="line">        _drawDirty: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> i, j, q, rect,len, obj, ent,</span><br><span class="line">                changed = <span class="keyword">this</span>._changedObjs,</span><br><span class="line">                l = changed.length,</span><br><span class="line">                dirty = <span class="keyword">this</span>._dirtyRects,</span><br><span class="line">                rectManager = Crafty.rectManager,</span><br><span class="line">                overlap = rectManager.overlap,</span><br><span class="line">                ctx = <span class="keyword">this</span>.context,</span><br><span class="line">                dupes = [],</span><br><span class="line">                objs = [];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Calculate _dirtyRects from all changed objects, then merge some overlapping regions together</span></span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; l; i++) {</span><br><span class="line">                <span class="keyword">this</span>._createDirty(changed[i]);</span><br><span class="line">            }</span><br><span class="line">            rectManager.mergeSet(dirty);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            l = dirty.length;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// For each dirty rectangle, find entities near it, and draw the overlapping ones</span></span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; l; ++i) { <span class="comment">//loop over every dirty rect</span></span><br><span class="line">                rect = dirty[i];</span><br><span class="line">                dupes.length = <span class="number">0</span>;</span><br><span class="line">                objs.length = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (!rect) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Find the smallest rectangle with integer coordinates that encloses rect</span></span><br><span class="line">                rect._w = rect._x + rect._w;</span><br><span class="line">                rect._h = rect._y + rect._h;</span><br><span class="line">                rect._x = (rect._x &gt; <span class="number">0</span>) ? (rect._x|<span class="number">0</span>) : (rect._x|<span class="number">0</span>) - <span class="number">1</span>;</span><br><span class="line">                rect._y = (rect._y &gt; <span class="number">0</span>) ? (rect._y|<span class="number">0</span>) : (rect._y|<span class="number">0</span>) - <span class="number">1</span>;</span><br><span class="line">                rect._w -= rect._x;</span><br><span class="line">                rect._h -= rect._y;</span><br><span class="line">                rect._w = (rect._w === (rect._w|<span class="number">0</span>)) ? rect._w : (rect._w|<span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">                rect._h = (rect._h === (rect._h|<span class="number">0</span>)) ? rect._h : (rect._h|<span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//search for ents under dirty rect</span></span><br><span class="line">                q = Crafty.map.search(rect, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//clear the rect from the main canvas</span></span><br><span class="line">                ctx.clearRect(rect._x, rect._y, rect._w, rect._h);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//Then clip drawing region to dirty rectangle</span></span><br><span class="line">                ctx.save();</span><br><span class="line">                ctx.beginPath();</span><br><span class="line">                ctx.rect(rect._x, rect._y, rect._w, rect._h);</span><br><span class="line">                ctx.clip();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Loop over found objects removing dupes and adding visible canvas objects to array</span></span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>, len = q.length; j &lt; len; ++j) {</span><br><span class="line">                    obj = q[j];</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (dupes[obj[<span class="number">0</span>]] || !obj._visible || !obj.__c.Canvas)</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    dupes[obj[<span class="number">0</span>]] = <span class="literal">true</span>;</span><br><span class="line">                    objs.push(obj);</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Sort objects by z level</span></span><br><span class="line">                objs.sort(<span class="keyword">this</span>._sort);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Then draw each object in that order</span></span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>, len = objs.length; j &lt; len; ++j) {</span><br><span class="line">                    obj = objs[j];</span><br><span class="line">                    <span class="keyword">var</span> area = obj._mbr || obj;</span><br><span class="line">                    <span class="keyword">if</span> (overlap(area, rect))</span><br><span class="line">                        obj.draw();</span><br><span class="line">                    obj._changed = <span class="literal">false</span>;</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Close rectangle clipping</span></span><br><span class="line">                ctx.closePath();</span><br><span class="line">                ctx.restore();</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Draw dirty rectangles for debugging, if that flag is set</span></span><br><span class="line">            <span class="keyword">if</span> (Crafty.canvasLayer.debugDirty === <span class="literal">true</span>) {</span><br><span class="line">                ctx.strokeStyle = <span class="string">&apos;red&apos;</span>;</span><br><span class="line">                <span class="keyword">for</span> (i = <span class="number">0</span>, l = dirty.length; i &lt; l; ++i) {</span><br><span class="line">                    rect = dirty[i];</span><br><span class="line">                    ctx.strokeRect(rect._x, rect._y, rect._w, rect._h);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**@</span><br><span class="line">         * #Crafty.canvasLayer.drawAll</span><br><span class="line">         * @comp Crafty.canvasLayer</span><br><span class="line">         * @sign public Crafty.canvasLayer.drawAll([Object rect])</span><br><span class="line">         * @param rect - a rectangular region {_x: x_val, _y: y_val, _w: w_val, _h: h_val}</span><br><span class="line">         *</span><br><span class="line">         * - If rect is omitted, redraw within the viewport</span><br><span class="line">         * - If rect is provided, redraw within the rect</span><br><span class="line">         */</span></span><br><span class="line">        _drawAll: <span class="function"><span class="keyword">function</span> <span class="params">(rect)</span> </span>{</span><br><span class="line">            rect = rect || Crafty.viewport.rect();</span><br><span class="line">            <span class="keyword">var</span> q = Crafty.map.search(rect),</span><br><span class="line">                i = <span class="number">0</span>,</span><br><span class="line">                l = q.length,</span><br><span class="line">                ctx = <span class="keyword">this</span>.context,</span><br><span class="line">                current;</span><br><span class="line"></span><br><span class="line">            ctx.clearRect(rect._x, rect._y, rect._w, rect._h);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//sort the objects by the global Z</span></span><br><span class="line">            q.sort(<span class="keyword">this</span>._sort);</span><br><span class="line">            <span class="keyword">for</span> (; i &lt; l; i++) {</span><br><span class="line">                current = q[i];</span><br><span class="line">                <span class="keyword">if</span> (current._visible &amp;&amp; current.__c.Canvas) {</span><br><span class="line">                    current.draw();</span><br><span class="line">                    current._changed = <span class="literal">false</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line">        debug: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</span><br><span class="line">            Crafty.log(<span class="keyword">this</span>._changedObjs);</span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** cleans up current dirty state, stores stale state for future passes */</span></span><br><span class="line">        _clean: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">var</span> rect, obj, i, l,</span><br><span class="line">                changed = <span class="keyword">this</span>._changedObjs;</span><br><span class="line">             <span class="keyword">for</span> (i = <span class="number">0</span>, l = changed.length; i &lt; l; i++) {</span><br><span class="line">                 obj = changed[i];</span><br><span class="line">                 rect = obj._mbr || obj;</span><br><span class="line">                 <span class="keyword">if</span> (<span class="keyword">typeof</span> obj.staleRect === <span class="string">&apos;undefined&apos;</span>)</span><br><span class="line">                     obj.staleRect = {};</span><br><span class="line">                 obj.staleRect._x = rect._x;</span><br><span class="line">                 obj.staleRect._y = rect._y;</span><br><span class="line">                 obj.staleRect._w = rect._w;</span><br><span class="line">                 obj.staleRect._h = rect._h;</span><br><span class="line"></span><br><span class="line">                 obj._changed = <span class="literal">false</span>;</span><br><span class="line">             }</span><br><span class="line">             changed.length = <span class="number">0</span>;</span><br><span class="line">             <span class="keyword">this</span>._dirtyRects.length = <span class="number">0</span>;</span><br><span class="line">             <span class="keyword">this</span>._dirtyViewport = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line">         <span class="comment">/** Takes the current and previous position of an object, and pushes the dirty regions onto the stack</span><br><span class="line">          *  If the entity has only moved/changed a little bit, the regions are squashed together */</span></span><br><span class="line">        _createDirty: <span class="function"><span class="keyword">function</span> <span class="params">(obj)</span> </span>{</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> rect = obj._mbr || obj,</span><br><span class="line">                dirty = <span class="keyword">this</span>._dirtyRects,</span><br><span class="line">                rectManager = Crafty.rectManager;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (obj.staleRect) {</span><br><span class="line">                <span class="comment">//If overlap, merge stale and current position together, then return</span></span><br><span class="line">                <span class="comment">//Otherwise just push stale rectangle</span></span><br><span class="line">                <span class="keyword">if</span> (rectManager.overlap(obj.staleRect, rect)) {</span><br><span class="line">                    rectManager.merge(obj.staleRect, rect, obj.staleRect);</span><br><span class="line">                    dirty.push(obj.staleRect);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                  dirty.push(obj.staleRect);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">// We use the intermediate &quot;currentRect&quot; so it can be modified without messing with obj</span></span><br><span class="line">            obj.currentRect._x = rect._x;</span><br><span class="line">            obj.currentRect._y = rect._y;</span><br><span class="line">            obj.currentRect._w = rect._w;</span><br><span class="line">            obj.currentRect._h = rect._h;</span><br><span class="line">            dirty.push(obj.currentRect);</span><br><span class="line"></span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Resize the canvas element to the current viewport</span></span><br><span class="line">        _resize: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">var</span> c = Crafty.canvasLayer._canvas;</span><br><span class="line">            c.width = Crafty.viewport.width;</span><br><span class="line">            c.height = Crafty.viewport.height;</span><br><span class="line"></span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line">        _setPixelart: <span class="function"><span class="keyword">function</span><span class="params">(enabled)</span> </span>{</span><br><span class="line">            <span class="keyword">var</span> context = Crafty.canvasLayer.context;</span><br><span class="line">            context.imageSmoothingEnabled = !enabled;</span><br><span class="line">            context.mozImageSmoothingEnabled = !enabled;</span><br><span class="line">            context.webkitImageSmoothingEnabled = !enabled;</span><br><span class="line">            context.oImageSmoothingEnabled = !enabled;</span><br><span class="line">            context.msImageSmoothingEnabled = !enabled;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line">},{<span class="string">&quot;../core/core.js&quot;</span>:<span class="number">7</span>}],<span class="number">21</span>:[<span class="function"><span class="keyword">function</span><span class="params">(require,module,exports)</span></span>{</span><br><span class="line"><span class="keyword">var</span> Crafty = require(<span class="string">&apos;../core/core.js&apos;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Canvas</span><br><span class="line"> * @category Graphics</span><br><span class="line"> * @trigger Draw - when the entity is ready to be drawn to the stage - {type: &quot;canvas&quot;, pos, co, ctx}</span><br><span class="line"> * @trigger NoCanvas - if the browser does not support canvas</span><br><span class="line"> *</span><br><span class="line"> * When this component is added to an entity it will be drawn to the global canvas element. The canvas element (and hence all Canvas entities) is always rendered below any DOM entities.</span><br><span class="line"> *</span><br><span class="line"> * Crafty.canvasLayer.init() will be automatically called if it is not called already to initialize the canvas element.</span><br><span class="line"> *</span><br><span class="line"> * Create a canvas entity like this</span><br><span class="line"> *</span></span><br></pre></td></tr></table></figure>

 * var myEntity = Crafty.e(&quot;2D, Canvas, Color&quot;)
 *      .color(&quot;green&quot;)
 *      .attr({x: 13, y: 37, w: 42, h: 42});
 *<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br></pre></td><td class="code"><pre><span class="line"> */</span><br><span class="line">Crafty.c(<span class="string">&quot;Canvas&quot;</span>, {</span><br><span class="line"></span><br><span class="line">    init: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">var</span> canvasLayer = Crafty.canvasLayer;</span><br><span class="line">        <span class="keyword">if</span> (!canvasLayer.context) {</span><br><span class="line">            canvasLayer.init();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">this</span>._drawLayer = canvasLayer;</span><br><span class="line">        <span class="keyword">this</span>._drawContext = canvasLayer.context;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//increment the amount of canvas objs</span></span><br><span class="line">        canvasLayer.layerCount++;</span><br><span class="line">        <span class="comment">//Allocate an object to hold this components current region</span></span><br><span class="line">        <span class="keyword">this</span>.currentRect = {};</span><br><span class="line">        <span class="keyword">this</span>._changed = <span class="literal">true</span>;</span><br><span class="line">        canvasLayer.add(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.bind(<span class="string">&quot;Invalidate&quot;</span>, <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>{</span><br><span class="line">            <span class="comment">//flag if changed</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>._changed === <span class="literal">false</span>) {</span><br><span class="line">                <span class="keyword">this</span>._changed = <span class="literal">true</span>;</span><br><span class="line">                canvasLayer.add(<span class="keyword">this</span>);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.bind(<span class="string">&quot;Remove&quot;</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">this</span>._drawLayer.layerCount--;</span><br><span class="line">            <span class="keyword">this</span>._changed = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">this</span>._drawLayer.add(<span class="keyword">this</span>);</span><br><span class="line">        });</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.draw</span><br><span class="line">     * @comp Canvas</span><br><span class="line">     * @sign public this .draw([[Context ctx, ]Number x, Number y, Number w, Number h])</span><br><span class="line">     * @param ctx - Canvas 2D context if drawing on another canvas is required</span><br><span class="line">     * @param x - X offset for drawing a segment</span><br><span class="line">     * @param y - Y offset for drawing a segment</span><br><span class="line">     * @param w - Width of the segment to draw</span><br><span class="line">     * @param h - Height of the segment to draw</span><br><span class="line">     *</span><br><span class="line">     * Method to draw the entity on the canvas element. Can pass rect values for redrawing a segment of the entity.</span><br><span class="line">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Cache the various objects and arrays used in draw:</span></span><br><span class="line">    drawVars: {</span><br><span class="line">        type: <span class="string">&quot;canvas&quot;</span>,</span><br><span class="line">        pos: {},</span><br><span class="line">        ctx: <span class="literal">null</span>,</span><br><span class="line">        coord: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        co: {</span><br><span class="line">            x: <span class="number">0</span>,</span><br><span class="line">            y: <span class="number">0</span>,</span><br><span class="line">            w: <span class="number">0</span>,</span><br><span class="line">            h: <span class="number">0</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    draw: <span class="function"><span class="keyword">function</span> <span class="params">(ctx, x, y, w, h)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.ready) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (arguments.length === <span class="number">4</span>) {</span><br><span class="line">            h = w;</span><br><span class="line">            w = y;</span><br><span class="line">            y = x;</span><br><span class="line">            x = ctx;</span><br><span class="line">            ctx = <span class="keyword">this</span>._drawContext;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> pos = <span class="keyword">this</span>.drawVars.pos;</span><br><span class="line">        pos._x = (<span class="keyword">this</span>._x + (x || <span class="number">0</span>));</span><br><span class="line">        pos._y = (<span class="keyword">this</span>._y + (y || <span class="number">0</span>));</span><br><span class="line">        pos._w = (w || <span class="keyword">this</span>._w);</span><br><span class="line">        pos._h = (h || <span class="keyword">this</span>._h);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        context = ctx || <span class="keyword">this</span>._drawContext;</span><br><span class="line">        coord = <span class="keyword">this</span>.__coord || [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>];</span><br><span class="line">        <span class="keyword">var</span> co = <span class="keyword">this</span>.drawVars.co;</span><br><span class="line">        co.x = coord[<span class="number">0</span>] + (x || <span class="number">0</span>);</span><br><span class="line">        co.y = coord[<span class="number">1</span>] + (y || <span class="number">0</span>);</span><br><span class="line">        co.w = w || coord[<span class="number">2</span>];</span><br><span class="line">        co.h = h || coord[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If we are going to perform any entity-specific changes to the current context, save the current state</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._flipX || (<span class="keyword">this</span>._flipY || <span class="keyword">this</span>._rotation)) {</span><br><span class="line">            context.save();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// rotate the context about this entity&apos;s origin</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._rotation !== <span class="number">0</span>) {</span><br><span class="line">            context.translate(<span class="keyword">this</span>._origin.x + <span class="keyword">this</span>._x, <span class="keyword">this</span>._origin.y + <span class="keyword">this</span>._y);</span><br><span class="line">            pos._x = -<span class="keyword">this</span>._origin.x;</span><br><span class="line">            pos._y = -<span class="keyword">this</span>._origin.y;</span><br><span class="line">            context.rotate((<span class="keyword">this</span>._rotation % <span class="number">360</span>) * (Math.PI / <span class="number">180</span>));</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// We realize a flipped entity by scaling the context in the opposite direction, then adjusting the position coordinates to match</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._flipX || <span class="keyword">this</span>._flipY) {</span><br><span class="line">            context.scale((<span class="keyword">this</span>._flipX ? -<span class="number">1</span> : <span class="number">1</span>), (<span class="keyword">this</span>._flipY ? -<span class="number">1</span> : <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>._flipX) {</span><br><span class="line">                pos._x = -(pos._x + pos._w);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>._flipY) {</span><br><span class="line">                pos._y = -(pos._y + pos._h);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> globalpha;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//draw with alpha</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._alpha &lt; <span class="number">1.0</span>) {</span><br><span class="line">            globalpha = context.globalAlpha;</span><br><span class="line">            context.globalAlpha = <span class="keyword">this</span>._alpha;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.drawVars.ctx = context;</span><br><span class="line">        <span class="keyword">this</span>.trigger(<span class="string">&quot;Draw&quot;</span>, <span class="keyword">this</span>.drawVars);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If necessary, restore context</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._rotation !== <span class="number">0</span> || (<span class="keyword">this</span>._flipX || <span class="keyword">this</span>._flipY)) {</span><br><span class="line">            context.restore();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (globalpha) {</span><br><span class="line">            context.globalAlpha = globalpha;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">},{<span class="string">&quot;../core/core.js&quot;</span>:<span class="number">7</span>}],<span class="number">22</span>:[<span class="function"><span class="keyword">function</span><span class="params">(require,module,exports)</span></span>{</span><br><span class="line"><span class="keyword">var</span> Crafty = require(<span class="string">&apos;../core/core.js&apos;</span>),</span><br><span class="line">    document = window.document;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Crafty.assignColor</span><br><span class="line"> * @category Graphics</span><br><span class="line"> * @sign Crafty.assignColor(color[, assignee])</span><br><span class="line"> * @param color - a string represenation of the color to assign, in any valid HTML format</span><br><span class="line"> * @param assignee - an object to use instead of creating one from scratch</span><br><span class="line"> * @returns  An object with `_red`, `_green`, and `_blue` properties assigned.</span><br><span class="line"> *           Potentially with `_strength` representing the alpha channel.</span><br><span class="line"> *           If the assignee parameter is passed, that object will be assigned those values and returned.</span><br><span class="line"> */</span></span><br><span class="line">Crafty.extend({</span><br><span class="line">    assignColor: (<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Create phantom element to assess color</span></span><br><span class="line">        <span class="keyword">var</span> element = document.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">        element.style.display = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">        <span class="comment">// Can&apos;t attach it til later on, so we need a flag!</span></span><br><span class="line">        <span class="keyword">var</span> element_attached = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">var</span> dictionary = {</span><br><span class="line">            <span class="string">&quot;aqua&quot;</span>:     <span class="string">&quot;#00ffff&quot;</span>,</span><br><span class="line">            <span class="string">&quot;black&quot;</span>:    <span class="string">&quot;#000000&quot;</span>,</span><br><span class="line">            <span class="string">&quot;blue&quot;</span>:     <span class="string">&quot;#0000ff&quot;</span>,</span><br><span class="line">            <span class="string">&quot;fuchsia&quot;</span>:  <span class="string">&quot;#ff00ff&quot;</span>,</span><br><span class="line">            <span class="string">&quot;gray&quot;</span>:     <span class="string">&quot;#808080&quot;</span>,</span><br><span class="line">            <span class="string">&quot;green&quot;</span>:    <span class="string">&quot;#00ff00&quot;</span>,</span><br><span class="line">            <span class="string">&quot;lime&quot;</span>:     <span class="string">&quot;#00ff00&quot;</span>,</span><br><span class="line">            <span class="string">&quot;maroon&quot;</span>:   <span class="string">&quot;#800000&quot;</span>,</span><br><span class="line">            <span class="string">&quot;navy&quot;</span>:     <span class="string">&quot;#000080&quot;</span>,</span><br><span class="line">            <span class="string">&quot;olive&quot;</span>:    <span class="string">&quot;#808000&quot;</span>,</span><br><span class="line">            <span class="string">&quot;orange&quot;</span>:   <span class="string">&quot;#ffa500&quot;</span>,</span><br><span class="line">            <span class="string">&quot;purple&quot;</span>:   <span class="string">&quot;#800080&quot;</span>,</span><br><span class="line">            <span class="string">&quot;red&quot;</span>:      <span class="string">&quot;#ff0000&quot;</span>,</span><br><span class="line">            <span class="string">&quot;silver&quot;</span>:   <span class="string">&quot;#c0c0c0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;teal&quot;</span>:     <span class="string">&quot;#008080&quot;</span>,</span><br><span class="line">            <span class="string">&quot;white&quot;</span>:    <span class="string">&quot;#ffffff&quot;</span>,</span><br><span class="line">            <span class="string">&quot;yellow&quot;</span>:   <span class="string">&quot;#ffff00&quot;</span></span><br><span class="line">        };</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">default_value</span><span class="params">(c)</span></span>{</span><br><span class="line">            c._red = c._blue = c._green = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">hexComponent</span><span class="params">(component)</span> </span>{</span><br><span class="line">            <span class="keyword">var</span> hex = component.toString(<span class="number">16</span>);</span><br><span class="line">            <span class="keyword">if</span> (hex.length==<span class="number">1</span>)</span><br><span class="line">                hex = <span class="string">&quot;0&quot;</span> + hex;</span><br><span class="line">            <span class="keyword">return</span> hex;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">rgbToHex</span><span class="params">(r, g, b)</span></span>{</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;#&quot;</span> + hexComponent(r) + hexComponent(g) + hexComponent(b);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">parseHexString</span><span class="params">(hex, c)</span> </span>{</span><br><span class="line">            <span class="keyword">var</span> l;</span><br><span class="line">            <span class="keyword">if</span> (hex.length === <span class="number">7</span>){</span><br><span class="line">                l=<span class="number">2</span>;</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (hex.length === <span class="number">4</span>){</span><br><span class="line">                l=<span class="number">1</span>;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">return</span> default_value(c);</span><br><span class="line">            }</span><br><span class="line">            c._red = parseInt(hex.substr(<span class="number">1</span>, l), <span class="number">16</span>);</span><br><span class="line">            c._green = parseInt(hex.substr(<span class="number">1</span>+l, l), <span class="number">16</span>);</span><br><span class="line">            c._blue = parseInt(hex.substr(<span class="number">1</span>+<span class="number">2</span>*l, l), <span class="number">16</span>);</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> rgb_regex = /rgba?\s*\(\s*([<span class="number">0</span>-<span class="number">9</span>]{<span class="number">1</span>,<span class="number">3</span>})\s*,\s*([<span class="number">0</span>-<span class="number">9</span>]{<span class="number">1</span>,<span class="number">3</span>})\s*,\s*([<span class="number">0</span>-<span class="number">9</span>]{<span class="number">1</span>,<span class="number">3</span>})\s*,?\s*([<span class="number">0</span>-<span class="number">9.</span>]+)?\)/;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">parseRgbString</span><span class="params">(rgb, c)</span> </span>{</span><br><span class="line">            <span class="keyword">var</span> values = rgb_regex.exec(rgb);</span><br><span class="line">            <span class="keyword">if</span>( values===<span class="literal">null</span> || (values.length != <span class="number">4</span> &amp;&amp; values.length != <span class="number">5</span>)) {</span><br><span class="line">                <span class="keyword">return</span> default_value(c); <span class="comment">// return bad result?         </span></span><br><span class="line">            }</span><br><span class="line">            c._red = Math.round(parseFloat(values[<span class="number">1</span>]));</span><br><span class="line">            c._green = Math.round(parseFloat(values[<span class="number">2</span>]));</span><br><span class="line">            c._blue = Math.round(parseFloat(values[<span class="number">3</span>]));</span><br><span class="line">            <span class="keyword">if</span> (values[<span class="number">4</span>]) {</span><br><span class="line">                c._strength = parseFloat(values[<span class="number">4</span>]);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">parseColorName</span><span class="params">(key, c)</span></span>{</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> dictionary[key] === <span class="string">&quot;undefined&quot;</span>){</span><br><span class="line">                <span class="keyword">if</span> (element_attached === <span class="literal">false</span>){</span><br><span class="line">                    window.document.body.appendChild(element);</span><br><span class="line">                    element_attached = <span class="literal">true</span>;</span><br><span class="line">                }</span><br><span class="line">                element.style.color = key;</span><br><span class="line">                <span class="keyword">var</span> rgb = window.getComputedStyle(element).color;</span><br><span class="line">                parseRgbString(rgb, c);</span><br><span class="line">                dictionary[key] = rgbToHex(c._red, c._green, c._blue);</span><br><span class="line">                <span class="comment">//window.document.body.removeChild(element);</span></span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                parseHexString(dictionary[key], c);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">rgbaString</span><span class="params">(c)</span></span>{</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;rgba(&quot;</span> + c._red + <span class="string">&quot;, &quot;</span> + c._green + <span class="string">&quot;, &quot;</span> + c._blue + <span class="string">&quot;, &quot;</span> + c._strength + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The actual assignColor function</span></span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(color, c)</span></span>{</span><br><span class="line">            c = c || {};</span><br><span class="line">            color = color.trim().toLowerCase();</span><br><span class="line">            <span class="keyword">var</span> ret = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (color[<span class="number">0</span>] === <span class="string">&apos;#&apos;</span>){</span><br><span class="line">                ret = parseHexString(color, c);</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (color[<span class="number">0</span>] === <span class="string">&apos;r&apos;</span> &amp;&amp; color[<span class="number">1</span>] === <span class="string">&apos;g&apos;</span> &amp;&amp; color[<span class="number">2</span>] === <span class="string">&apos;b&apos;</span>){</span><br><span class="line">                ret = parseRgbString(color, c);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                ret = parseColorName(color, c);</span><br><span class="line">            }</span><br><span class="line">            c._strength = c._strength || <span class="number">1.0</span>;</span><br><span class="line">            c._color = rgbaString(c);</span><br><span class="line">        };</span><br><span class="line"></span><br><span class="line">    })()</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Define some variables required for webgl</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> COLOR_VERTEX_SHADER = <span class="string">&quot;attribute vec2 aPosition;\nattribute vec3 aOrientation;\nattribute vec2 aLayer;\nattribute vec4 aColor;\n\nvarying lowp vec4 vColor;\n\nuniform  vec4 uViewport;\n\nmat4 viewportScale = mat4(2.0 / uViewport.z, 0, 0, 0,    0, -2.0 / uViewport.w, 0,0,    0, 0,1,0,    -1,+1,0,1);\nvec4 viewportTranslation = vec4(uViewport.xy, 0, 0);\n\nvoid main() {\n  vec2 pos = aPosition;\n  vec2 entityOrigin = aOrientation.xy;\n  mat2 entityRotationMatrix = mat2(cos(aOrientation.z), sin(aOrientation.z), -sin(aOrientation.z), cos(aOrientation.z));\n\n  pos = entityRotationMatrix * (pos - entityOrigin) + entityOrigin;\n  gl_Position = viewportScale * (viewportTranslation + vec4(pos, 1.0/(1.0+exp(aLayer.x) ), 1) );\n  vColor = vec4(aColor.rgb*aColor.a*aLayer.y, aColor.a*aLayer.y);\n}&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> COLOR_FRAGMENT_SHADER = <span class="string">&quot;precision mediump float;\nvarying lowp vec4 vColor;\nvoid main(void) {\n\tgl_FragColor = vColor;\n}&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> COLOR_ATTRIBUTE_LIST = [</span><br><span class="line">    {name:<span class="string">&quot;aPosition&quot;</span>, width: <span class="number">2</span>},</span><br><span class="line">    {name:<span class="string">&quot;aOrientation&quot;</span>, width: <span class="number">3</span>},</span><br><span class="line">    {name:<span class="string">&quot;aLayer&quot;</span>, width:<span class="number">2</span>},</span><br><span class="line">    {name:<span class="string">&quot;aColor&quot;</span>,  width: <span class="number">4</span>}</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Color</span><br><span class="line"> * @category Graphics</span><br><span class="line"> * Draw a colored rectangle.</span><br><span class="line"> */</span></span><br><span class="line">Crafty.c(<span class="string">&quot;Color&quot;</span>, {</span><br><span class="line">    _red: <span class="number">0</span>,</span><br><span class="line">    _green: <span class="number">0</span>,</span><br><span class="line">    _blue: <span class="number">0</span>,</span><br><span class="line">    _strength: <span class="number">1.0</span>,</span><br><span class="line">    _color: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    ready: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    init: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.bind(<span class="string">&quot;Draw&quot;</span>, <span class="keyword">this</span>._drawColor);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.has(<span class="string">&quot;WebGL&quot;</span>)){</span><br><span class="line">            <span class="keyword">this</span>._establishShader(<span class="string">&quot;Color&quot;</span>, COLOR_FRAGMENT_SHADER, COLOR_VERTEX_SHADER, COLOR_ATTRIBUTE_LIST);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">this</span>.trigger(<span class="string">&quot;Invalidate&quot;</span>);</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    remove: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.unbind(<span class="string">&quot;Draw&quot;</span>, <span class="keyword">this</span>._drawColor);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.has(<span class="string">&quot;DOM&quot;</span>)){</span><br><span class="line">            <span class="keyword">this</span>._element.style.backgroundColor = <span class="string">&quot;transparent&quot;</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">this</span>.trigger(<span class="string">&quot;Invalidate&quot;</span>);</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">// draw function for &quot;Color&quot;</span></span><br><span class="line">    _drawColor: <span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>._color) { <span class="keyword">return</span>; }</span><br><span class="line">        <span class="keyword">if</span> (e.type === <span class="string">&quot;DOM&quot;</span>) {</span><br><span class="line">            e.style.backgroundColor = <span class="keyword">this</span>._color;</span><br><span class="line">            e.style.lineHeight = <span class="number">0</span>;</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (e.type === <span class="string">&quot;canvas&quot;</span>) {</span><br><span class="line">            e.ctx.fillStyle = <span class="keyword">this</span>._color;</span><br><span class="line">            e.ctx.fillRect(e.pos._x, e.pos._y, e.pos._w, e.pos._h);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (e.type === <span class="string">&quot;webgl&quot;</span>){</span><br><span class="line">            e.program.writeVector(<span class="string">&quot;aColor&quot;</span>,</span><br><span class="line">                <span class="keyword">this</span>._red/<span class="number">255</span>,</span><br><span class="line">                <span class="keyword">this</span>._green/<span class="number">255</span>,</span><br><span class="line">                <span class="keyword">this</span>._blue/<span class="number">255</span>,</span><br><span class="line">                <span class="keyword">this</span>._strength</span><br><span class="line">            );</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.color</span><br><span class="line">     * @comp Color</span><br><span class="line">     * @trigger Invalidate - when the color changes</span><br><span class="line">     *</span><br><span class="line">     * Will assign the color and opacity, either through a string shorthand, or through explicit rgb values.</span><br><span class="line">     * @sign public this .color(String color[, Float strength])</span><br><span class="line">     * @param color - Color of the rectangle</span><br><span class="line">     * @param strength - the opacity of the rectangle</span><br><span class="line">     *</span><br><span class="line">     * @sign public this .color(r, g, b[, strength])</span><br><span class="line">     * @param r - value for the red channel</span><br><span class="line">     * @param g - value for the green channel</span><br><span class="line">     * @param b - value for the blue channel</span><br><span class="line">     * @param strength - the opacity of the rectangle </span><br><span class="line">     *</span><br><span class="line">     * @sign public String .color()</span><br><span class="line">     * @return A string representing the current color as a CSS property.</span><br><span class="line">     *</span><br><span class="line">     * @example</span><br><span class="line">     * ```</span><br><span class="line">     * var c = Crafty.e(&quot;2D, DOM, Color&quot;);</span><br><span class="line">     * c.color(&quot;#FF0000&quot;);</span><br><span class="line">     * c.color(&quot;red&quot;);</span><br><span class="line">     * c.color(255, 0, 0);</span><br><span class="line">     * c.color(&quot;rgb(255, 0, 0&quot;)</span><br><span class="line">     * ```</span><br><span class="line">     * Three different ways of assign the color red.</span><br><span class="line">     * ```</span><br><span class="line">     * var c = Crafty.e(&quot;2D, DOM, Color&quot;);</span><br><span class="line">     * c.color(&quot;#00FF00&quot;, 0.5);</span><br><span class="line">     * c.color(&quot;rgba(0, 255, 0, 0.5)&quot;);</span><br><span class="line">     * ```</span><br><span class="line">     * Two ways of assigning a transparent green color.</span><br><span class="line">     */</span></span><br><span class="line">    color: <span class="function"><span class="keyword">function</span> <span class="params">(color)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (arguments.length === <span class="number">0</span> ){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>._color;</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (arguments.length&gt;=<span class="number">3</span>){</span><br><span class="line">            <span class="keyword">this</span>._red = arguments[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">this</span>._green = arguments[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">this</span>._blue = arguments[<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> arguments[<span class="number">3</span>] === <span class="string">&quot;number&quot;</span>)</span><br><span class="line">                <span class="keyword">this</span>._strength = arguments[<span class="number">3</span>];</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="comment">// First argument is color name</span></span><br><span class="line">            Crafty.assignColor(color, <span class="keyword">this</span>);</span><br><span class="line">            <span class="comment">// Second argument, if present, is strength of color</span></span><br><span class="line">            <span class="comment">// Note that assignColor will give a default strength of 1.0 if none exists.</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> arguments[<span class="number">1</span>] == <span class="string">&quot;number&quot;</span>)</span><br><span class="line">                <span class="keyword">this</span>._strength = arguments[<span class="number">1</span>];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">this</span>._color = <span class="string">&quot;rgba(&quot;</span> + <span class="keyword">this</span>._red + <span class="string">&quot;, &quot;</span> + <span class="keyword">this</span>._green + <span class="string">&quot;, &quot;</span> + <span class="keyword">this</span>._blue + <span class="string">&quot;, &quot;</span> + <span class="keyword">this</span>._strength + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>.trigger(<span class="string">&quot;Invalidate&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">},{<span class="string">&quot;../core/core.js&quot;</span>:<span class="number">7</span>}],<span class="number">23</span>:[<span class="function"><span class="keyword">function</span><span class="params">(require,module,exports)</span></span>{</span><br><span class="line"><span class="keyword">var</span> Crafty = require(<span class="string">&apos;../core/core.js&apos;</span>),</span><br><span class="line">    document = window.document;</span><br><span class="line"></span><br><span class="line">Crafty.extend({</span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #Crafty.domHelper</span><br><span class="line">     * @category Graphics</span><br><span class="line">     *</span><br><span class="line">     * Collection of utilities for using the DOM.</span><br><span class="line">     */</span></span><br><span class="line">    domHelper: {</span><br><span class="line">        <span class="comment">/**@</span><br><span class="line">         * #Crafty.domHelper.innerPosition</span><br><span class="line">         * @comp Crafty.domHelper</span><br><span class="line">         * @sign public Object Crafty.domHelper.innerPosition(HTMLElement obj)</span><br><span class="line">         * @param obj - HTML element to calculate the position</span><br><span class="line">         * @returns Object with `x` key being the `x` position, `y` being the `y` position</span><br><span class="line">         *</span><br><span class="line">         * Find a DOM elements position including</span><br><span class="line">         * padding and border.</span><br><span class="line">         */</span></span><br><span class="line">        innerPosition: <span class="function"><span class="keyword">function</span> <span class="params">(obj)</span> </span>{</span><br><span class="line">            <span class="keyword">var</span> rect = obj.getBoundingClientRect(),</span><br><span class="line">                x = rect.left + (window.pageXOffset ? window.pageXOffset : document.body.scrollLeft),</span><br><span class="line">                y = rect.top + (window.pageYOffset ? window.pageYOffset : document.body.scrollTop),</span><br><span class="line"></span><br><span class="line">                <span class="comment">//border left</span></span><br><span class="line">                borderX = parseInt(<span class="keyword">this</span>.getStyle(obj, <span class="string">&apos;border-left-width&apos;</span>) || <span class="number">0</span>, <span class="number">10</span>) || parseInt(<span class="keyword">this</span>.getStyle(obj, <span class="string">&apos;borderLeftWidth&apos;</span>) || <span class="number">0</span>, <span class="number">10</span>) || <span class="number">0</span>,</span><br><span class="line">                borderY = parseInt(<span class="keyword">this</span>.getStyle(obj, <span class="string">&apos;border-top-width&apos;</span>) || <span class="number">0</span>, <span class="number">10</span>) || parseInt(<span class="keyword">this</span>.getStyle(obj, <span class="string">&apos;borderTopWidth&apos;</span>) || <span class="number">0</span>, <span class="number">10</span>) || <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            x += borderX;</span><br><span class="line">            y += borderY;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> {</span><br><span class="line">                x: x,</span><br><span class="line">                y: y</span><br><span class="line">            };</span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**@</span><br><span class="line">         * #Crafty.domHelper.getStyle</span><br><span class="line">         * @comp Crafty.domHelper</span><br><span class="line">         * @sign public Object Crafty.domHelper.getStyle(HTMLElement obj, String property)</span><br><span class="line">         * @param obj - HTML element to find the style</span><br><span class="line">         * @param property - Style to return</span><br><span class="line">         *</span><br><span class="line">         * Determine the value of a style on an HTML element. Notation can be</span><br><span class="line">         * in either CSS or JS.</span><br><span class="line">         */</span></span><br><span class="line">        getStyle: <span class="function"><span class="keyword">function</span> <span class="params">(obj, prop)</span> </span>{</span><br><span class="line">            <span class="keyword">var</span> result;</span><br><span class="line">            <span class="keyword">if</span> (obj.currentStyle)</span><br><span class="line">                result = obj.currentStyle[<span class="keyword">this</span>.camelize(prop)];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (window.getComputedStyle)</span><br><span class="line">                result = document.defaultView.getComputedStyle(obj, <span class="literal">null</span>).getPropertyValue(<span class="keyword">this</span>.csselize(prop));</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span><br><span class="line">         * Used in the Zepto framework</span><br><span class="line">         *</span><br><span class="line">         * Converts CSS notation to JS notation</span><br><span class="line">         */</span></span><br><span class="line">        camelize: <span class="function"><span class="keyword">function</span> <span class="params">(str)</span> </span>{</span><br><span class="line">            <span class="keyword">return</span> str.replace(/-+(.)?/g, <span class="function"><span class="keyword">function</span> <span class="params">(match, chr)</span> </span>{</span><br><span class="line">                <span class="keyword">return</span> chr ? chr.toUpperCase() : <span class="string">&apos;&apos;</span>;</span><br><span class="line">            });</span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span><br><span class="line">         * Converts JS notation to CSS notation</span><br><span class="line">         */</span></span><br><span class="line">        csselize: <span class="function"><span class="keyword">function</span> <span class="params">(str)</span> </span>{</span><br><span class="line">            <span class="keyword">return</span> str.replace(/[A-Z]/g, <span class="function"><span class="keyword">function</span> <span class="params">(chr)</span> </span>{</span><br><span class="line">                <span class="keyword">return</span> chr ? <span class="string">&apos;-&apos;</span> + chr.toLowerCase() : <span class="string">&apos;&apos;</span>;</span><br><span class="line">            });</span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**@</span><br><span class="line">         * #Crafty.domHelper.translate</span><br><span class="line">         * @comp Crafty.domHelper</span><br><span class="line">         * @sign public Object Crafty.domHelper.translate(Number clientX, Number clientY)</span><br><span class="line">         * @param clientX - clientX position in the browser screen</span><br><span class="line">         * @param clientY - clientY position in the browser screen</span><br><span class="line">         * @return Object `{x: ..., y: ...}` with Crafty coordinates.</span><br><span class="line">         * </span><br><span class="line">         * The parameters clientX and clientY are pixel coordinates within the visible</span><br><span class="line">         * browser window. This function translates those to Crafty coordinates (i.e.,</span><br><span class="line">         * the coordinates that you might apply to an entity), by taking into account</span><br><span class="line">         * where the stage is within the screen, what the current viewport is, etc.</span><br><span class="line">         */</span></span><br><span class="line">        translate: <span class="function"><span class="keyword">function</span> <span class="params">(clientX, clientY)</span> </span>{</span><br><span class="line">            <span class="keyword">var</span> doc = document.documentElement;</span><br><span class="line">            <span class="keyword">var</span> body = document.body;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> {</span><br><span class="line">                x: (clientX - Crafty.stage.x + ( doc &amp;&amp; doc.scrollLeft || body &amp;&amp; body.scrollLeft || <span class="number">0</span> )) / Crafty.viewport._scale - Crafty.viewport._x,</span><br><span class="line">                y: (clientY - Crafty.stage.y + ( doc &amp;&amp; doc.scrollTop  || body &amp;&amp; body.scrollTop  || <span class="number">0</span> )) / Crafty.viewport._scale - Crafty.viewport._y</span><br><span class="line">            };</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line">},{<span class="string">&quot;../core/core.js&quot;</span>:<span class="number">7</span>}],<span class="number">24</span>:[<span class="function"><span class="keyword">function</span><span class="params">(require,module,exports)</span></span>{</span><br><span class="line"><span class="keyword">var</span> Crafty = require(<span class="string">&apos;../core/core.js&apos;</span>),</span><br><span class="line">    document = window.document;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Crafty.domLayer</span><br><span class="line"> * @category Graphics</span><br><span class="line"> *</span><br><span class="line"> * Collection of mostly private methods to represent entities using the DOM.</span><br><span class="line"> */</span></span><br><span class="line">Crafty.extend({</span><br><span class="line">    domLayer: {</span><br><span class="line">        _changedObjs: [],</span><br><span class="line">        _dirtyViewport: <span class="literal">false</span>,</span><br><span class="line">        _div: <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">        init: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">            <span class="comment">// Set properties to initial values -- necessary on a restart</span></span><br><span class="line">            <span class="keyword">this</span>._changedObjs = [];</span><br><span class="line">            <span class="keyword">this</span>._dirtyViewport = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Create the div that will contain DOM elements</span></span><br><span class="line">            <span class="keyword">var</span> div = <span class="keyword">this</span>._div = document.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"></span><br><span class="line">            Crafty.stage.elem.appendChild(div);</span><br><span class="line">            div.style.position = <span class="string">&quot;absolute&quot;</span>;</span><br><span class="line">            div.style.zIndex = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">            div.style.transformStyle = <span class="string">&quot;preserve-3d&quot;</span>; <span class="comment">// Seems necessary for Firefox to preserve zIndexes?</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Bind scene rendering (see drawing.js)</span></span><br><span class="line">            Crafty.uniqueBind(<span class="string">&quot;RenderScene&quot;</span>, <span class="keyword">this</span>._render);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Layers should generally listen for resize events, but the DOM layers automatically inherit the stage&apos;s dimensions</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Listen for changes in pixel art settings</span></span><br><span class="line">            <span class="comment">// Since window is inited before stage, can&apos;t set right away, but shouldn&apos;t need to!</span></span><br><span class="line">            Crafty.uniqueBind(<span class="string">&quot;PixelartSet&quot;</span>, <span class="keyword">this</span>._setPixelArt);</span><br><span class="line"></span><br><span class="line">            Crafty.uniqueBind(<span class="string">&quot;InvalidateViewport&quot;</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</span><br><span class="line">                Crafty.domLayer._dirtyViewport = <span class="literal">true</span>;</span><br><span class="line">            });</span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handle whether images should be smoothed or not</span></span><br><span class="line">        _setPixelArt: <span class="function"><span class="keyword">function</span><span class="params">(enabled)</span> </span>{</span><br><span class="line">            <span class="keyword">var</span> style = Crafty.domLayer._div.style;</span><br><span class="line">            <span class="keyword">var</span> camelize = Crafty.domHelper.camelize;</span><br><span class="line">            <span class="keyword">if</span> (enabled) {</span><br><span class="line">                style[camelize(<span class="string">&quot;image-rendering&quot;</span>)] = <span class="string">&quot;optimizeSpeed&quot;</span>;   <span class="comment">/* legacy */</span></span><br><span class="line">                style[camelize(<span class="string">&quot;image-rendering&quot;</span>)] = <span class="string">&quot;-moz-crisp-edges&quot;</span>;    <span class="comment">/* Firefox */</span></span><br><span class="line">                style[camelize(<span class="string">&quot;image-rendering&quot;</span>)] = <span class="string">&quot;-o-crisp-edges&quot;</span>;  <span class="comment">/* Opera */</span></span><br><span class="line">                style[camelize(<span class="string">&quot;image-rendering&quot;</span>)] = <span class="string">&quot;-webkit-optimize-contrast&quot;</span>;   <span class="comment">/* Webkit (Chrome &amp; Safari) */</span></span><br><span class="line">                style[camelize(<span class="string">&quot;-ms-interpolation-mode&quot;</span>)] = <span class="string">&quot;nearest-neighbor&quot;</span>;  <span class="comment">/* IE */</span></span><br><span class="line">                style[camelize(<span class="string">&quot;image-rendering&quot;</span>)] = <span class="string">&quot;optimize-contrast&quot;</span>;   <span class="comment">/* CSS3 proposed */</span></span><br><span class="line">                style[camelize(<span class="string">&quot;image-rendering&quot;</span>)] = <span class="string">&quot;pixelated&quot;</span>;   <span class="comment">/* CSS4 proposed */</span></span><br><span class="line">                style[camelize(<span class="string">&quot;image-rendering&quot;</span>)] = <span class="string">&quot;crisp-edges&quot;</span>; <span class="comment">/* CSS4 proposed */</span></span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                style[camelize(<span class="string">&quot;image-rendering&quot;</span>)] = <span class="string">&quot;optimizeQuality&quot;</span>;   <span class="comment">/* legacy */</span></span><br><span class="line">                style[camelize(<span class="string">&quot;-ms-interpolation-mode&quot;</span>)] = <span class="string">&quot;bicubic&quot;</span>;   <span class="comment">/* IE */</span></span><br><span class="line">                style[camelize(<span class="string">&quot;image-rendering&quot;</span>)] = <span class="string">&quot;auto&quot;</span>;   <span class="comment">/* CSS3 */</span></span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**@</span><br><span class="line">         * #Crafty.domLayer.debug</span><br><span class="line">         * @comp Crafty.domLayer</span><br><span class="line">         * @sign public Crafty.domLayer.debug()</span><br><span class="line">         */</span></span><br><span class="line">        debug: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">            Crafty.log(<span class="keyword">this</span>._changedObjs);</span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**@</span><br><span class="line">         * #Crafty.domLayer._render</span><br><span class="line">         * @comp Crafty.domLayer</span><br><span class="line">         * @sign public Crafty.domLayer.render()</span><br><span class="line">         *</span><br><span class="line">         * When &quot;RenderScene&quot; is triggered, draws all DOM entities that have been flagged</span><br><span class="line">         *</span><br><span class="line">         * @see DOM#.draw</span><br><span class="line">         */</span></span><br><span class="line">        _render: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">var</span> layer = Crafty.domLayer;</span><br><span class="line">            <span class="keyword">var</span> changed = layer._changedObjs;</span><br><span class="line">            <span class="comment">// Adjust the viewport</span></span><br><span class="line">            <span class="keyword">if</span> (layer._dirtyViewport) {</span><br><span class="line">               layer._setViewport();</span><br><span class="line">               layer._dirtyViewport = <span class="literal">false</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">//if no objects have been changed, stop</span></span><br><span class="line">            <span class="keyword">if</span> (!changed.length) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> i = <span class="number">0</span>,</span><br><span class="line">                k = changed.length;</span><br><span class="line">            <span class="comment">//loop over all DOM elements needing updating</span></span><br><span class="line">            <span class="keyword">for</span> (; i &lt; k; ++i) {</span><br><span class="line">                changed[i].draw()._changed = <span class="literal">false</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">//reset DOM array</span></span><br><span class="line">            changed.length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**@</span><br><span class="line">         * #Crafty.domLayer.add</span><br><span class="line">         * @comp Crafty.domLayer</span><br><span class="line">         * @sign public Crafty.domLayer.add(ent)</span><br><span class="line">         * @param ent - The entity to add</span><br><span class="line">         *</span><br><span class="line">         * Add an entity to the list of DOM object to draw</span><br><span class="line">         */</span></span><br><span class="line">        add: <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(ent)</span> </span>{</span><br><span class="line">            <span class="keyword">this</span>._changedObjs.push(ent);</span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Sets the viewport position and scale</span></span><br><span class="line">        <span class="comment">// Called by render when the dirtyViewport flag is set</span></span><br><span class="line">        _setViewport: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">var</span> style = Crafty.domLayer._div.style,</span><br><span class="line">                view = Crafty.viewport;</span><br><span class="line"></span><br><span class="line">            style.transform = style[Crafty.support.prefix + <span class="string">&quot;Transform&quot;</span>] = <span class="string">&quot;scale(&quot;</span> + view._scale + <span class="string">&quot;, &quot;</span> + view._scale + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">            style.left = Math.round(view._x * view._scale) + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">            style.top = Math.round(view._y * view._scale) + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">            style.zIndex = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line">},{<span class="string">&quot;../core/core.js&quot;</span>:<span class="number">7</span>}],<span class="number">25</span>:[<span class="function"><span class="keyword">function</span><span class="params">(require,module,exports)</span></span>{</span><br><span class="line"><span class="keyword">var</span> Crafty = require(<span class="string">&apos;../core/core.js&apos;</span>),</span><br><span class="line">    document = window.document;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #DOM</span><br><span class="line"> * @category Graphics</span><br><span class="line"> *</span><br><span class="line"> * A component which renders entities as DOM nodes, specifically `&lt;div&gt;`s.</span><br><span class="line"> */</span></span><br><span class="line">Crafty.c(<span class="string">&quot;DOM&quot;</span>, {</span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #._element</span><br><span class="line">     * @comp DOM</span><br><span class="line">     * The DOM element used to represent the entity.</span><br><span class="line">     */</span></span><br><span class="line">    _element: <span class="literal">null</span>,</span><br><span class="line">    <span class="comment">//holds current styles, so we can check if there are changes to be written to the DOM</span></span><br><span class="line">    _cssStyles: <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.avoidCss3dTransforms</span><br><span class="line">     * @comp DOM</span><br><span class="line">     * Avoids using of CSS 3D Transform for positioning when true. Default value is false.</span><br><span class="line">     */</span></span><br><span class="line">    avoidCss3dTransforms: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    init: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">var</span> domLayer = Crafty.domLayer;</span><br><span class="line">        <span class="keyword">if</span> (!domLayer._div) {</span><br><span class="line">            domLayer.init();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">this</span>._drawLayer = domLayer;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>._cssStyles = {</span><br><span class="line">            visibility: <span class="string">&apos;&apos;</span>,</span><br><span class="line">            left: <span class="string">&apos;&apos;</span>,</span><br><span class="line">            top: <span class="string">&apos;&apos;</span>,</span><br><span class="line">            width: <span class="string">&apos;&apos;</span>,</span><br><span class="line">            height: <span class="string">&apos;&apos;</span>,</span><br><span class="line">            zIndex: <span class="string">&apos;&apos;</span>,</span><br><span class="line">            opacity: <span class="string">&apos;&apos;</span>,</span><br><span class="line">            transformOrigin: <span class="string">&apos;&apos;</span>,</span><br><span class="line">            transform: <span class="string">&apos;&apos;</span></span><br><span class="line">        };</span><br><span class="line">        <span class="keyword">this</span>._element = document.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">        domLayer._div.appendChild(<span class="keyword">this</span>._element);</span><br><span class="line">        <span class="keyword">this</span>._element.style.position = <span class="string">&quot;absolute&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>._element.id = <span class="string">&quot;ent&quot;</span> + <span class="keyword">this</span>[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.bind(<span class="string">&quot;Invalidate&quot;</span>, <span class="keyword">this</span>._invalidateDOM);</span><br><span class="line">        <span class="keyword">this</span>.bind(<span class="string">&quot;NewComponent&quot;</span>, <span class="keyword">this</span>._updateClass);</span><br><span class="line">        <span class="keyword">this</span>.bind(<span class="string">&quot;RemoveComponent&quot;</span>, <span class="keyword">this</span>._removeClass);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>._invalidateDOM();</span><br><span class="line"></span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    remove: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.undraw();</span><br><span class="line">        <span class="keyword">this</span>.unbind(<span class="string">&quot;NewComponent&quot;</span>, <span class="keyword">this</span>._updateClass);</span><br><span class="line">        <span class="keyword">this</span>.unbind(<span class="string">&quot;RemoveComponent&quot;</span>, <span class="keyword">this</span>._removeClass);</span><br><span class="line">        <span class="keyword">this</span>.unbind(<span class="string">&quot;Invalidate&quot;</span>, <span class="keyword">this</span>._invalidateDOM);</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.getDomId</span><br><span class="line">     * @comp DOM</span><br><span class="line">     * @sign public this .getId()</span><br><span class="line">     *</span><br><span class="line">     * Get the Id of the DOM element used to represent the entity.</span><br><span class="line">     */</span></span><br><span class="line">    getDomId: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._element.id;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">// removes a component on RemoveComponent events</span></span><br><span class="line">    _removeClass: <span class="function"><span class="keyword">function</span><span class="params">(removedComponent)</span> </span>{</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>,</span><br><span class="line">            c = <span class="keyword">this</span>.__c,</span><br><span class="line">            str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> c) {</span><br><span class="line">          <span class="keyword">if</span>(i != removedComponent) {</span><br><span class="line">            str += <span class="string">&apos; &apos;</span> + i;</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">        str = str.substr(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">this</span>._element.className = str;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">// adds a class on NewComponent events</span></span><br><span class="line">    _updateClass: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>,</span><br><span class="line">            c = <span class="keyword">this</span>.__c,</span><br><span class="line">            str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> c) {</span><br><span class="line">            str += <span class="string">&apos; &apos;</span> + i;</span><br><span class="line">        }</span><br><span class="line">        str = str.substr(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">this</span>._element.className = str;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    _invalidateDOM: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>._changed) {</span><br><span class="line">                <span class="keyword">this</span>._changed = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">this</span>._drawLayer.add(<span class="keyword">this</span>);</span><br><span class="line">            }</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.DOM</span><br><span class="line">     * @comp DOM</span><br><span class="line">     * @trigger Draw - when the entity is ready to be drawn to the stage - { style:String, type:&quot;DOM&quot;, co}</span><br><span class="line">     * @sign public this .DOM(HTMLElement elem)</span><br><span class="line">     * @param elem - HTML element that will replace the dynamically created one</span><br><span class="line">     *</span><br><span class="line">     * Pass a DOM element to use rather than one created. Will set `._element` to this value. Removes the old element.</span><br><span class="line">     */</span></span><br><span class="line">    DOM: <span class="function"><span class="keyword">function</span> <span class="params">(elem)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (elem &amp;&amp; elem.nodeType) {</span><br><span class="line">            <span class="keyword">this</span>.undraw();</span><br><span class="line">            <span class="keyword">this</span>._element = elem;</span><br><span class="line">            <span class="keyword">this</span>._element.style.position = <span class="string">&apos;absolute&apos;</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.draw</span><br><span class="line">     * @comp DOM</span><br><span class="line">     * @sign public this .draw(void)</span><br><span class="line">     *</span><br><span class="line">     * Updates the CSS properties of the node to draw on the stage.</span><br><span class="line">     */</span></span><br><span class="line">    draw: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">var</span> style = <span class="keyword">this</span>._element.style,</span><br><span class="line">            coord = <span class="keyword">this</span>.__coord || [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">            co = {</span><br><span class="line">                x: coord[<span class="number">0</span>],</span><br><span class="line">                y: coord[<span class="number">1</span>],</span><br><span class="line">                w: coord[<span class="number">2</span>],</span><br><span class="line">                h: coord[<span class="number">3</span>]</span><br><span class="line">            },</span><br><span class="line">            prefix = Crafty.support.prefix,</span><br><span class="line">            trans = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._cssStyles.visibility !== <span class="keyword">this</span>._visible) {</span><br><span class="line">            <span class="keyword">this</span>._cssStyles.visibility = <span class="keyword">this</span>._visible;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>._visible) {</span><br><span class="line">                style.visibility = <span class="string">&quot;hidden&quot;</span>;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                style.visibility = <span class="string">&quot;visible&quot;</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//utilize CSS3 if supported</span></span><br><span class="line">        <span class="keyword">if</span> (Crafty.support.css3dtransform &amp;&amp; !<span class="keyword">this</span>.avoidCss3dTransforms) {</span><br><span class="line">            trans.push(<span class="string">&quot;translate3d(&quot;</span> + (~~<span class="keyword">this</span>._x) + <span class="string">&quot;px,&quot;</span> + (~~<span class="keyword">this</span>._y) + <span class="string">&quot;px,0)&quot;</span>);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>._cssStyles.left !== <span class="keyword">this</span>._x) {</span><br><span class="line">                <span class="keyword">this</span>._cssStyles.left = <span class="keyword">this</span>._x;</span><br><span class="line">                style.left = ~~ (<span class="keyword">this</span>._x) + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>._cssStyles.top !== <span class="keyword">this</span>._y) {</span><br><span class="line">                <span class="keyword">this</span>._cssStyles.top = <span class="keyword">this</span>._y;</span><br><span class="line">                style.top = ~~ (<span class="keyword">this</span>._y) + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._cssStyles.width !== <span class="keyword">this</span>._w) {</span><br><span class="line">            <span class="keyword">this</span>._cssStyles.width = <span class="keyword">this</span>._w;</span><br><span class="line">            style.width = ~~ (<span class="keyword">this</span>._w) + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._cssStyles.height !== <span class="keyword">this</span>._h) {</span><br><span class="line">            <span class="keyword">this</span>._cssStyles.height = <span class="keyword">this</span>._h;</span><br><span class="line">            style.height = ~~ (<span class="keyword">this</span>._h) + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._cssStyles.zIndex !== <span class="keyword">this</span>._z) {</span><br><span class="line">            <span class="keyword">this</span>._cssStyles.zIndex = <span class="keyword">this</span>._z;</span><br><span class="line">            style.zIndex = <span class="keyword">this</span>._z;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._cssStyles.opacity !== <span class="keyword">this</span>._alpha) {</span><br><span class="line">            <span class="keyword">this</span>._cssStyles.opacity = <span class="keyword">this</span>._alpha;</span><br><span class="line">            style.opacity = <span class="keyword">this</span>._alpha;</span><br><span class="line">            style[prefix + <span class="string">&quot;Opacity&quot;</span>] = <span class="keyword">this</span>._alpha;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._mbr) {</span><br><span class="line">            <span class="keyword">var</span> origin = <span class="keyword">this</span>._origin.x + <span class="string">&quot;px &quot;</span> + <span class="keyword">this</span>._origin.y + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">            style.transformOrigin = origin;</span><br><span class="line">            style[prefix + <span class="string">&quot;TransformOrigin&quot;</span>] = origin;</span><br><span class="line">            <span class="keyword">if</span> (Crafty.support.css3dtransform) trans.push(<span class="string">&quot;rotateZ(&quot;</span> + <span class="keyword">this</span>._rotation + <span class="string">&quot;deg)&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> trans.push(<span class="string">&quot;rotate(&quot;</span> + <span class="keyword">this</span>._rotation + <span class="string">&quot;deg)&quot;</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._flipX) {</span><br><span class="line">            trans.push(<span class="string">&quot;scaleX(-1)&quot;</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._flipY) {</span><br><span class="line">            trans.push(<span class="string">&quot;scaleY(-1)&quot;</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._cssStyles.transform != trans.join(<span class="string">&quot; &quot;</span>)) {</span><br><span class="line">            <span class="keyword">this</span>._cssStyles.transform = trans.join(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            style.transform = <span class="keyword">this</span>._cssStyles.transform;</span><br><span class="line">            style[prefix + <span class="string">&quot;Transform&quot;</span>] = <span class="keyword">this</span>._cssStyles.transform;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.trigger(<span class="string">&quot;Draw&quot;</span>, {</span><br><span class="line">            style: style,</span><br><span class="line">            type: <span class="string">&quot;DOM&quot;</span>,</span><br><span class="line">            co: co</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.undraw</span><br><span class="line">     * @comp DOM</span><br><span class="line">     * @sign public this .undraw(void)</span><br><span class="line">     *</span><br><span class="line">     * Removes the element from the stage.</span><br><span class="line">     */</span></span><br><span class="line">    undraw: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">var</span> el = <span class="keyword">this</span>._element;</span><br><span class="line">        <span class="keyword">if</span> (el &amp;&amp; el.parentNode !== <span class="literal">null</span>) {</span><br><span class="line">            el.parentNode.removeChild(el);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.css</span><br><span class="line">     * @comp DOM</span><br><span class="line">     * @sign public css(String property, String value)</span><br><span class="line">     * @param property - CSS property to modify</span><br><span class="line">     * @param value - Value to give the CSS property</span><br><span class="line">     *</span><br><span class="line">     * @sign public  css(Object map)</span><br><span class="line">     * @param map - Object where the key is the CSS property and the value is CSS value</span><br><span class="line">     *</span><br><span class="line">     * Apply CSS styles to the element.</span><br><span class="line">     *</span><br><span class="line">     * Can pass an object where the key is the style property and the value is style value.</span><br><span class="line">     *</span><br><span class="line">     * For setting one style, simply pass the style as the first argument and the value as the second.</span><br><span class="line">     *</span><br><span class="line">     * The notation can be CSS or JS (e.g. `text-align` or `textAlign`).</span><br><span class="line">     *</span><br><span class="line">     * To return a value, pass the property.</span><br><span class="line">     *</span><br><span class="line">     * Note: For entities with &quot;Text&quot; component, some css properties are controlled by separate functions</span><br><span class="line">     * `.textFont()` and `.textColor()`, and ignore `.css()` settings. See Text component for details.</span><br><span class="line">     *</span><br><span class="line">     * @example</span><br><span class="line">     *</span></span><br></pre></td></tr></table></figure>

     * this.css({&apos;text-align&apos;: &apos;center&apos;, &apos;text-decoration&apos;: &apos;line-through&apos;});
     * this.css(&quot;textAlign&quot;, &quot;center&quot;);
     * this.css(&quot;text-align&quot;); //returns center
     * <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">     */</span><br><span class="line">    css: function (obj, value) {</span><br><span class="line">        <span class="keyword">var</span> key,</span><br><span class="line">            elem = <span class="keyword">this</span>._element,</span><br><span class="line">            val,</span><br><span class="line">            style = elem.style;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//if an object passed</span></span><br><span class="line">        <span class="keyword">if</span> (typeof obj === <span class="string">&quot;object&quot;</span>) {</span><br><span class="line">            <span class="keyword">for</span> (key <span class="keyword">in</span> obj) {</span><br><span class="line">                <span class="keyword">if</span> (!obj.hasOwnProperty(key)) <span class="keyword">continue</span>;</span><br><span class="line">                val = obj[key];</span><br><span class="line">                <span class="keyword">if</span> (typeof val === <span class="string">&quot;number&quot;</span>) val += <span class="string">&apos;px&apos;</span>;</span><br><span class="line"></span><br><span class="line">                style[Crafty.domHelper.camelize(key)] = val;</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="comment">//if a value is passed, set the property</span></span><br><span class="line">            <span class="keyword">if</span> (value) {</span><br><span class="line">                <span class="keyword">if</span> (typeof value === <span class="string">&quot;number&quot;</span>) value += <span class="string">&apos;px&apos;</span>;</span><br><span class="line">                style[Crafty.domHelper.camelize(obj)] = value;</span><br><span class="line">            } <span class="keyword">else</span> { <span class="comment">//otherwise return the computed property</span></span><br><span class="line">                <span class="keyword">return</span> Crafty.domHelper.getStyle(elem, obj);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.trigger(<span class="string">&quot;Invalidate&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">},{<span class="string">&quot;../core/core.js&quot;</span>:<span class="number">7</span>}],<span class="number">26</span>:[function(require,module,exports){</span><br><span class="line"><span class="keyword">var</span> Crafty = require(<span class="string">&apos;../core/core.js&apos;</span>);</span><br><span class="line"></span><br><span class="line">Crafty.extend({</span><br><span class="line">    <span class="comment"><span class="markdown">/**@</span><br><span class="line"><span class="code">     * #Crafty.pixelart</span></span><br><span class="line"><span class="code">     * @category Graphics</span></span><br><span class="line"><span class="code">     * @sign public void Crafty.pixelart(Boolean enabled)</span></span><br><span class="line"><span class="code">     * @param enabled - whether to preserve sharp edges when rendering images</span></span><br><span class="line"><span class="code">     *</span></span><br><span class="line"><span class="code">     * Sets </span></span>the<span class="markdown"> image smoothing for drawing images (for all layer types).</span><br><span class="line"><span class="code">     *</span></span><br><span class="line"><span class="code">     * Setting this to true disables smoothing for images, which is </span></span>the<span class="markdown"> preferred</span><br><span class="line"><span class="code">     * way for drawing pixel art. Defaults to false.</span></span><br><span class="line"><span class="code">     *</span></span><br><span class="line"><span class="code">     * This feature is experimental and </span></span>you<span class="markdown"> </span>should<span class="markdown"> be careful with cross-browser compatibility. </span><br><span class="line"><span class="code">     * The best way to disable image smoothing is to use </span></span>the<span class="markdown"> Canvas render method and </span>the<span class="markdown"> Sprite component for drawing </span>your<span class="markdown"> entities.</span><br><span class="line"><span class="code">     *</span></span><br><span class="line"><span class="code">     * If </span></span>you<span class="markdown"> want to switch modes in </span>the<span class="markdown"> middle of </span>a<span class="markdown"> scene, </span><br><span class="line"><span class="code">     * be aware that canvas entities </span></span>won&apos;t<span class="markdown"> be drawn in </span>the<span class="markdown"> new style until something else invalidates them. </span><br><span class="line"><span class="code">     * (You can manually invalidate all canvas entities with `Crafty(&quot;Canvas&quot;).trigger(&quot;Invalidate&quot;);`)</span></span><br><span class="line"><span class="code">     *</span></span><br><span class="line"><span class="code">     * @note Firefox_26 currently has </span></span>a<span class="markdown"> [<span class="link_label">bug</span>](<span class="link_url">https://bugzilla.mozilla.org/show_bug.cgi?id=696630</span>) </span><br><span class="line"><span class="code">     * which prevents disabling image smoothing for Canvas entities that use </span></span>the<span class="markdown"> Image component. Use </span>the<span class="markdown"> Sprite</span><br><span class="line"><span class="code">     * component instead.</span></span><br><span class="line"><span class="code">     *</span></span><br><span class="line"><span class="code">     * @note Webkit (Chrome &amp; Safari) currently has </span></span>a<span class="markdown"> bug [<span class="link_label">link1</span>](<span class="link_url">http://code.google.com/p/chromium/issues/detail?id=134040</span>) </span><br><span class="line"><span class="code">     * [link2](http://code.google.com/p/chromium/issues/detail?id=106662) that prevents disabling image smoothing</span></span><br><span class="line"><span class="code">     * for DOM entities.</span></span><br><span class="line"><span class="code">     *</span></span><br><span class="line"><span class="code">     * @example</span></span><br><span class="line"><span class="code">     * This is </span></span>the<span class="markdown"> preferred way to draw pixel art with </span>the<span class="markdown"> best cross-browser compatibility.</span><br><span class="line"><span class="code">     *</span></span></span></span><br></pre></td></tr></table></figure>

     * Crafty.canvasLayer.init();
     * Crafty.pixelart(true);
     * 
     * Crafty.sprite(imgWidth, imgHeight, &quot;spriteMap.png&quot;, {sprite1:[0,0]});
     * Crafty.e(&quot;2D, Canvas, sprite1&quot;);
     * <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line">     */</span><br><span class="line">    _pixelartEnabled: <span class="literal">false</span>,</span><br><span class="line">    pixelart: <span class="function"><span class="keyword">function</span><span class="params">(enabled)</span> </span>{</span><br><span class="line">        Crafty._pixelartEnabled = enabled;</span><br><span class="line">        Crafty.trigger(<span class="string">&quot;PixelartSet&quot;</span>, enabled);</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">},{<span class="string">&quot;../core/core.js&quot;</span>:<span class="number">7</span>}],<span class="number">27</span>:[<span class="function"><span class="keyword">function</span><span class="params">(require,module,exports)</span></span>{</span><br><span class="line"><span class="keyword">var</span> Crafty = require(<span class="string">&apos;../core/core.js&apos;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// An object for wrangling textures</span></span><br><span class="line"><span class="comment">// An assumption here is that doing anything with textures is fairly expensive, so the code should be expressive rather than performant</span></span><br><span class="line"><span class="keyword">var</span> TextureManager = Crafty.TextureManager = <span class="function"><span class="keyword">function</span><span class="params">(gl, webgl)</span> </span>{</span><br><span class="line">	<span class="keyword">this</span>.gl = gl;</span><br><span class="line">	<span class="keyword">this</span>.webgl = webgl;</span><br><span class="line">	<span class="comment">// The maximum number of units the environment says it supports </span></span><br><span class="line">	<span class="keyword">this</span>.max_units =  gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);</span><br><span class="line">	<span class="comment">// An array of textures bound to a texture unit; position corresponds to the unit in question</span></span><br><span class="line">	<span class="keyword">this</span>.bound_textures = [];</span><br><span class="line">	<span class="comment">// A dictionary of registered textures, so that multiple copies of the same texture aren&apos;t generated</span></span><br><span class="line">	<span class="keyword">this</span>.registered_textures = {};</span><br><span class="line">	<span class="comment">// Try to track which texture is active</span></span><br><span class="line">	<span class="keyword">this</span>.active = <span class="literal">null</span>;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">TextureManager.prototype = {</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Clear out the bound textures and other existing state</span></span><br><span class="line">	reset: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</span><br><span class="line">		<span class="keyword">var</span> t;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.bound_textures.length; i++){</span><br><span class="line">			t = <span class="keyword">this</span>.bound_textures[i];</span><br><span class="line">			t.unbind();</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">this</span>.bound_textures = [];</span><br><span class="line">		<span class="keyword">this</span>.active = <span class="literal">null</span>;</span><br><span class="line">	},</span><br><span class="line"></span><br><span class="line">	<span class="comment">// creates a texture out of the given image and repeating state</span></span><br><span class="line">	<span class="comment">// The url is just used to generate a unique id for the texture</span></span><br><span class="line">	makeTexture: <span class="function"><span class="keyword">function</span><span class="params">(url, image, repeating)</span> </span>{</span><br><span class="line">		<span class="comment">// gl is the context, webgl the Crafty object containing prefs/etc</span></span><br><span class="line">        <span class="keyword">var</span> gl = <span class="keyword">this</span>.gl, webgl = <span class="keyword">this</span>.webgl;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check whether a texture that matches the one requested already exists</span></span><br><span class="line">        <span class="keyword">var</span> id =  <span class="string">&quot;texture-(r:&quot;</span> + repeating + <span class="string">&quot;)-&quot;</span> + url;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.registered_textures[id] !== <span class="string">&apos;undefined&apos;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.registered_textures[id];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a texture, bind it to the next available unit</span></span><br><span class="line">        <span class="keyword">var</span> t = <span class="keyword">new</span> TextureWrapper(<span class="keyword">this</span>, id);</span><br><span class="line">        <span class="keyword">this</span>.registered_textures[id] = t;</span><br><span class="line">        <span class="keyword">this</span>.bindTexture(t);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set the properties of the texture </span></span><br><span class="line">        t.setImage(image);</span><br><span class="line">        t.setFilter(webgl.texture_filter);</span><br><span class="line">        t.setRepeat(repeating);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Returns the bound texture of smallest size</span></span><br><span class="line">    <span class="comment">// If we have more textures than available units, we should preferentially leave the larger textures bound?</span></span><br><span class="line">	smallest: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</span><br><span class="line">		<span class="keyword">var</span> min_size = Infinity;</span><br><span class="line">		<span class="keyword">var</span> index = <span class="literal">null</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="keyword">this</span>.bound_textures.length; i++) {</span><br><span class="line">			<span class="keyword">var</span> t = <span class="keyword">this</span>.bound_textures[i];</span><br><span class="line">			<span class="keyword">if</span> (t.size &lt; min_size) {</span><br><span class="line">				min_size = t.size;</span><br><span class="line">				index = i;</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">return</span> index;</span><br><span class="line">	},</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Returns either the first empty unit, or the unit of the smallest bound texture</span></span><br><span class="line">	getAvailableUnit: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.bound_textures.length &lt; <span class="keyword">this</span>.max_units) {</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.bound_textures.length;</span><br><span class="line">		} <span class="keyword">else</span> {</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.smallest();</span><br><span class="line">		}</span><br><span class="line">	},</span><br><span class="line"></span><br><span class="line">	<span class="comment">// takes a texture object and, if it isn&apos;t associated with a unit, binds it to one</span></span><br><span class="line">	bindTexture: <span class="function"><span class="keyword">function</span><span class="params">(t)</span> </span>{</span><br><span class="line">		<span class="comment">// return if the texture is already bound</span></span><br><span class="line">		<span class="keyword">if</span> (t.unit !== <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">var</span> i = <span class="keyword">this</span>.getAvailableUnit();</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.bound_textures[i]){</span><br><span class="line">			<span class="keyword">this</span>.unbindTexture(<span class="keyword">this</span>.bound_textures[i]);</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">this</span>.bound_textures[i] = t;</span><br><span class="line">		t.bind(i);</span><br><span class="line"></span><br><span class="line">	},</span><br><span class="line"></span><br><span class="line">	<span class="comment">// We don&apos;t actually &quot;unbind&quot; the texture -- we just set it&apos;s bound state to null</span></span><br><span class="line">	<span class="comment">// This is called before another texture is bound</span></span><br><span class="line">	unbindTexture: <span class="function"><span class="keyword">function</span><span class="params">(t)</span> </span>{</span><br><span class="line">		t.unbind();</span><br><span class="line">	},</span><br><span class="line"></span><br><span class="line">	setActiveTexture: <span class="function"><span class="keyword">function</span><span class="params">(t)</span> </span>{</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.active === t.id) <span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">this</span>.gl.activeTexture(<span class="keyword">this</span>.gl[t.name]);</span><br><span class="line">		<span class="keyword">this</span>.active = t.unit;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">// An object for abstracting out the gl calls associated with textures</span></span><br><span class="line"><span class="keyword">var</span> TextureWrapper = Crafty.TextureWrapper = <span class="function"><span class="keyword">function</span><span class="params">(manager, id)</span></span>{</span><br><span class="line">	<span class="keyword">this</span>.manager = manager;</span><br><span class="line">	<span class="keyword">this</span>.gl = manager.gl;</span><br><span class="line">	<span class="keyword">this</span>.glTexture = <span class="keyword">this</span>.gl.createTexture();</span><br><span class="line">	<span class="keyword">this</span>.id = id;</span><br><span class="line">	<span class="keyword">this</span>.active = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">this</span>.unit = <span class="literal">null</span>;</span><br><span class="line">	<span class="keyword">this</span>.powerOfTwo = <span class="literal">false</span>;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">TextureWrapper.prototype = {</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Given a number, binds to the corresponding texture unit</span></span><br><span class="line">	bind: <span class="function"><span class="keyword">function</span><span class="params">(unit)</span> </span>{</span><br><span class="line">		<span class="keyword">var</span> gl = <span class="keyword">this</span>.gl;</span><br><span class="line">		<span class="keyword">this</span>.unit = unit;</span><br><span class="line">		<span class="keyword">this</span>.name = <span class="string">&quot;TEXTURE&quot;</span> + unit;</span><br><span class="line">		<span class="keyword">this</span>.manager.setActiveTexture(<span class="keyword">this</span>);</span><br><span class="line">		gl.bindTexture(gl.TEXTURE_2D, <span class="keyword">this</span>.glTexture);</span><br><span class="line">	},</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Check whether this texture is active (important for setting properties)</span></span><br><span class="line">	isActive: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</span><br><span class="line">		<span class="keyword">return</span> (<span class="keyword">this</span>.manager.active === <span class="keyword">this</span>.unit);</span><br><span class="line">	},</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Since gl doesn&apos;t require unbinding, just clears the metadata</span></span><br><span class="line">	unbind: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</span><br><span class="line">		<span class="keyword">this</span>.unit = <span class="literal">null</span>;</span><br><span class="line">		<span class="keyword">this</span>.name = <span class="literal">null</span>;</span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">this</span>.isActive())</span><br><span class="line">			<span class="keyword">this</span>.manager.active = <span class="literal">null</span>;</span><br><span class="line">	},</span><br><span class="line"></span><br><span class="line">	<span class="comment">// actually loads an image into the texture object; sets the appropriate metadata</span></span><br><span class="line">	setImage: <span class="function"><span class="keyword">function</span><span class="params">(image)</span> </span>{</span><br><span class="line">		<span class="keyword">if</span>(!<span class="keyword">this</span>.isActive()) <span class="keyword">throw</span>(<span class="string">&quot;Trying to set image of texture that isn&apos;t active&quot;</span>);</span><br><span class="line">		<span class="keyword">this</span>.width = image.width;</span><br><span class="line">		<span class="keyword">this</span>.height = image.height;</span><br><span class="line">		<span class="keyword">this</span>.size = image.width * image.height;</span><br><span class="line">		<span class="keyword">this</span>.powerOfTwo = !((Math.log(image.width)/Math.LN2 != Math.floor(Math.log(image.width)/Math.LN2)) || (Math.log(image.height)/Math.LN2 != Math.floor(Math.log(image.height)/Math.LN2)));</span><br><span class="line">		<span class="keyword">var</span> gl = <span class="keyword">this</span>.gl;</span><br><span class="line">		gl.texImage2D(gl.TEXTURE_2D, <span class="number">0</span>, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);</span><br><span class="line">	},</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Sets the min/mag filters</span></span><br><span class="line">	setFilter: <span class="function"><span class="keyword">function</span><span class="params">(filter)</span> </span>{</span><br><span class="line">		<span class="keyword">if</span>(!<span class="keyword">this</span>.isActive()) <span class="keyword">throw</span>(<span class="string">&quot;Trying to set filter of texture that isn&apos;t active&quot;</span>);</span><br><span class="line">		<span class="keyword">var</span> gl = <span class="keyword">this</span>.gl;</span><br><span class="line">		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, filter);</span><br><span class="line">        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, filter);</span><br><span class="line">	},</span><br><span class="line"></span><br><span class="line">	<span class="comment">// set image wrapping</span></span><br><span class="line">	setRepeat: <span class="function"><span class="keyword">function</span><span class="params">(repeat)</span> </span>{</span><br><span class="line">		<span class="keyword">if</span>(!<span class="keyword">this</span>.isActive()) <span class="keyword">throw</span>(<span class="string">&quot;Trying to set repeat property of texture that isn&apos;t active&quot;</span>);</span><br><span class="line">		<span class="keyword">if</span>(repeat &amp;&amp; !<span class="keyword">this</span>.powerOfTwo){</span><br><span class="line">			<span class="keyword">throw</span>(<span class="string">&quot;Can&apos;t create a repeating image whose dimensions aren&apos;t a power of 2 in WebGL contexts&quot;</span>);</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">var</span> gl = <span class="keyword">this</span>.gl;</span><br><span class="line">		<span class="keyword">this</span>.repeatMode = repeat ? gl.REPEAT : gl.CLAMP_TO_EDGE;</span><br><span class="line">        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, <span class="keyword">this</span>.repeatMode);</span><br><span class="line">        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, <span class="keyword">this</span>.repeatMode);</span><br><span class="line">	},</span><br><span class="line"></span><br><span class="line">	<span class="comment">// given a shader and pair of uniform names, sets the sampler and dimensions to be used by this texture</span></span><br><span class="line">	setToProgram: <span class="function"><span class="keyword">function</span><span class="params">(shader, sampler_name, dimension_name)</span> </span>{</span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">this</span>.unit === <span class="literal">null</span>) <span class="keyword">throw</span>(<span class="string">&quot;Trying to use texture not set to a texture unit.&quot;</span>);</span><br><span class="line">		<span class="keyword">var</span> gl = <span class="keyword">this</span>.gl;</span><br><span class="line">		gl.useProgram(shader);</span><br><span class="line">        <span class="comment">// Set the texture buffer to use</span></span><br><span class="line">        gl.uniform1i(gl.getUniformLocation(shader, sampler_name), <span class="keyword">this</span>.unit);</span><br><span class="line">        <span class="comment">// Set the image dimensions</span></span><br><span class="line">        gl.uniform2f(gl.getUniformLocation(shader, dimension_name), <span class="keyword">this</span>.width, <span class="keyword">this</span>.height);</span><br><span class="line">	}</span><br><span class="line">};</span><br><span class="line">},{<span class="string">&quot;../core/core.js&quot;</span>:<span class="number">7</span>}],<span class="number">28</span>:[<span class="function"><span class="keyword">function</span><span class="params">(require,module,exports)</span></span>{</span><br><span class="line"><span class="keyword">var</span> Crafty = require(<span class="string">&apos;../core/core.js&apos;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #HTML</span><br><span class="line"> * @category Graphics</span><br><span class="line"> *</span><br><span class="line"> * A component which allows for the insertion of arbitrary HTML into a DOM entity.  </span><br><span class="line"> *</span><br><span class="line"> * Adding this to an entity will automatically add the `DOM` component.</span><br><span class="line"> */</span></span><br><span class="line">Crafty.c(<span class="string">&quot;HTML&quot;</span>, {</span><br><span class="line">    inner: <span class="string">&apos;&apos;</span>,</span><br><span class="line"></span><br><span class="line">    init: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.requires(<span class="string">&apos;2D, DOM&apos;</span>);</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.replace</span><br><span class="line">     * @comp HTML</span><br><span class="line">     * @sign public this .replace(String html)</span><br><span class="line">     * @param html - arbitrary html</span><br><span class="line">     *</span><br><span class="line">     * This method will replace the content of this entity with the supplied html</span><br><span class="line">     *</span><br><span class="line">     * @example</span><br><span class="line">     * Create a link</span><br><span class="line">     *</span></span><br></pre></td></tr></table></figure>

     * Crafty.e(&quot;HTML&quot;)
     *    .attr({x:20, y:20, w:100, h:100})
     *    .replace(&quot;<a href="index.html">Index</a>&quot;);
     * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">replace: function (new_html) {</span><br><span class="line">    this.inner = new_html;</span><br><span class="line">    this._element.innerHTML = new_html;</span><br><span class="line">    return this;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span>@</span><br><span class="line"> <span class="keyword">*</span> <span class="comment">#.append</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@comp HTML</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@sign public this .append(String html)</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param html - arbitrary html</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> This method will add the supplied html in the end of the entity</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@example</span></span><br><span class="line"> <span class="keyword">*</span> Create a link</span><br><span class="line"> <span class="keyword">*</span></span><br></pre></td></tr></table></figure>

     * Crafty.e(&quot;HTML&quot;)
     *    .attr({x:20, y:20, w:100, h:100})
     *    .append(&quot;<a href="index.html">Index</a>&quot;);
     * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">append: function (new_html) {</span><br><span class="line">    this.inner += new_html;</span><br><span class="line">    this._element.innerHTML += new_html;</span><br><span class="line">    return this;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span>@</span><br><span class="line"> <span class="keyword">*</span> <span class="comment">#.prepend</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@comp HTML</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@sign public this .prepend(String html)</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param html - arbitrary html</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> This method will add the supplied html in the beginning of the entity</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@example</span></span><br><span class="line"> <span class="keyword">*</span> Create a link</span><br><span class="line"> <span class="keyword">*</span></span><br></pre></td></tr></table></figure>

     * Crafty.e(&quot;HTML&quot;)
     *    .attr({x:20, y:20, w:100, h:100})
     *    .prepend(&quot;<a href="index.html">Index</a>&quot;);
     * <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">     */</span><br><span class="line">    prepend: <span class="function"><span class="keyword">function</span> <span class="params">(new_html)</span> </span>{</span><br><span class="line">        this.inner = new_html + this.inner;</span><br><span class="line">        this._element.innerHTML = new_html + this.inner;</span><br><span class="line">        <span class="keyword">return</span> this;</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line">},{<span class="string">&quot;../core/core.js&quot;</span>:<span class="number">7</span>}],<span class="number">29</span>:[<span class="function"><span class="keyword">function</span><span class="params">(require,module,exports)</span></span>{</span><br><span class="line"><span class="keyword">var</span> Crafty = <span class="keyword">require</span>(<span class="string">&apos;../core/core.js&apos;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Define some variables required for webgl</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> IMAGE_VERTEX_SHADER = <span class="string">&quot;attribute vec2 aPosition;\nattribute vec3 aOrientation;\nattribute vec2 aLayer;\nattribute vec2 aTextureCoord;\n\nvarying mediump vec3 vTextureCoord;\n\nuniform vec4 uViewport;\nuniform mediump vec2 uTextureDimensions;\n\nmat4 viewportScale = mat4(2.0 / uViewport.z, 0, 0, 0,    0, -2.0 / uViewport.w, 0,0,    0, 0,1,0,    -1,+1,0,1);\nvec4 viewportTranslation = vec4(uViewport.xy, 0, 0);\n\nvoid main() {\n  vec2 pos = aPosition;\n  vec2 entityOrigin = aOrientation.xy;\n  mat2 entityRotationMatrix = mat2(cos(aOrientation.z), sin(aOrientation.z), -sin(aOrientation.z), cos(aOrientation.z));\n  \n  pos = entityRotationMatrix * (pos - entityOrigin) + entityOrigin ;\n  gl_Position = viewportScale * (viewportTranslation + vec4(pos, 1.0/(1.0+exp(aLayer.x) ), 1) );\n  vTextureCoord = vec3(aTextureCoord, aLayer.y);\n}&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> IMAGE_FRAGMENT_SHADER = <span class="string">&quot;varying mediump vec3 vTextureCoord;\n  \nuniform sampler2D uSampler;\nuniform mediump vec2 uTextureDimensions;\n\nvoid main(void) {\n  highp vec2 coord =   vTextureCoord.xy / uTextureDimensions;\n  mediump vec4 base_color = texture2D(uSampler, coord);\n  gl_FragColor = vec4(base_color.rgb*base_color.a*vTextureCoord.z, base_color.a*vTextureCoord.z);\n}&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> IMAGE_ATTRIBUTE_LIST = [</span><br><span class="line">    {name:<span class="string">&quot;aPosition&quot;</span>, width: <span class="number">2</span>},</span><br><span class="line">    {name:<span class="string">&quot;aOrientation&quot;</span>, width: <span class="number">3</span>},</span><br><span class="line">    {name:<span class="string">&quot;aLayer&quot;</span>, width:<span class="number">2</span>},</span><br><span class="line">    {name:<span class="string">&quot;aTextureCoord&quot;</span>,  width: <span class="number">2</span>}</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Image</span><br><span class="line"> * <span class="doctag">@category</span> Graphics</span><br><span class="line"> * Draw an image with or without repeating (tiling).</span><br><span class="line"> */</span></span><br><span class="line">Crafty.c(<span class="string">&quot;Image&quot;</span>, {</span><br><span class="line">    _repeat: <span class="string">&quot;repeat&quot;</span>,</span><br><span class="line">    ready: <span class="keyword">false</span>,</span><br><span class="line"></span><br><span class="line">    init: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        this.bind(<span class="string">&quot;Draw&quot;</span>, this._drawImage);</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    remove: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</span><br><span class="line">        this.unbind(<span class="string">&quot;Draw&quot;</span>, this._drawImage);</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.image</span><br><span class="line">     * <span class="doctag">@comp</span> Image</span><br><span class="line">     * <span class="doctag">@trigger</span> Invalidate - when the image is loaded</span><br><span class="line">     * <span class="doctag">@sign</span> public this .image(String url[, String repeat])</span><br><span class="line">     * <span class="doctag">@param</span> url - URL of the image</span><br><span class="line">     * <span class="doctag">@param</span> repeat - If the image should be repeated to fill the entity.  This follows CSS syntax: (`&quot;no-repeat&quot;, &quot;repeat&quot;, &quot;repeat-x&quot;, &quot;repeat-y&quot;`), but defaults to `no-repeat`.</span><br><span class="line">     *</span><br><span class="line">     * Draw the specified image.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@note</span> The default value of repeat is `no-repeat`, which is different than the standard CSS default</span><br><span class="line">     *</span><br><span class="line">     * If the width and height are `0` and repeat is set to `no-repeat` the width and</span><br><span class="line">     * height will automatically assume that of the image. This is an</span><br><span class="line">     * easy way to create an image without needing sprites.</span><br><span class="line">     *</span><br><span class="line">     * If set to `no-repeat` and given dimensions larger than that of the image,</span><br><span class="line">     * the exact appearance will depend on what renderer (WebGL, DOM, or Canvas) is used.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@example</span></span><br><span class="line">     * Will default to no-repeat. Entity width and height will be set to the images width and height</span><br><span class="line">     *</span></span><br></pre></td></tr></table></figure>

     * var ent = Crafty.e(&quot;2D, DOM, Image&quot;).image(&quot;myimage.png&quot;);
     * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span> Create a repeating background.</span><br><span class="line"><span class="keyword">*</span></span><br></pre></td></tr></table></figure>

     * var bg = Crafty.e(&quot;2D, DOM, Image&quot;)
     *              .attr({w: Crafty.viewport.width, h: Crafty.viewport.height})
     *              .image(&quot;bg.png&quot;, &quot;repeat&quot;);
     * <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">     *</span><br><span class="line">     * @see Crafty.sprite</span><br><span class="line">     */</span><br><span class="line">    image: <span class="function"><span class="keyword">function</span> <span class="params">(url, repeat)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.__image = url;</span><br><span class="line">        <span class="keyword">this</span>._repeat = repeat || <span class="string">&quot;no-repeat&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.img = Crafty.asset(url);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.img) {</span><br><span class="line">            <span class="keyword">this</span>.img = <span class="keyword">new</span> Image();</span><br><span class="line">            Crafty.asset(url, <span class="keyword">this</span>.img);</span><br><span class="line">            <span class="keyword">this</span>.img.src = url;</span><br><span class="line">            <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.img.onload = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">                self._onImageLoad();</span><br><span class="line">            };</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">this</span>._onImageLoad();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.trigger(<span class="string">&quot;Invalidate&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    _onImageLoad: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.has(<span class="string">&quot;Canvas&quot;</span>)) {</span><br><span class="line">            <span class="keyword">this</span>._pattern = <span class="keyword">this</span>._drawContext.createPattern(<span class="keyword">this</span>.img, <span class="keyword">this</span>._repeat);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.has(<span class="string">&quot;WebGL&quot;</span>)) {</span><br><span class="line">            <span class="keyword">this</span>._establishShader(<span class="string">&quot;image:&quot;</span> + <span class="keyword">this</span>.__image, IMAGE_FRAGMENT_SHADER, IMAGE_VERTEX_SHADER, IMAGE_ATTRIBUTE_LIST);</span><br><span class="line">            <span class="keyword">this</span>.program.setTexture( <span class="keyword">this</span>.webgl.makeTexture(<span class="keyword">this</span>.__image, <span class="keyword">this</span>.img, (<span class="keyword">this</span>._repeat!==<span class="string">&quot;no-repeat&quot;</span>)));</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._repeat === <span class="string">&quot;no-repeat&quot;</span>) {</span><br><span class="line">            <span class="keyword">this</span>.w = <span class="keyword">this</span>.w || <span class="keyword">this</span>.img.width;</span><br><span class="line">            <span class="keyword">this</span>.h = <span class="keyword">this</span>.h || <span class="keyword">this</span>.img.height;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.ready = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.trigger(<span class="string">&quot;Invalidate&quot;</span>);</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    _drawImage: <span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (e.type === <span class="string">&quot;canvas&quot;</span>) {</span><br><span class="line">            <span class="comment">//skip if no image</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.ready || !<span class="keyword">this</span>._pattern) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> context = e.ctx;</span><br><span class="line"></span><br><span class="line">            context.fillStyle = <span class="keyword">this</span>._pattern;</span><br><span class="line"></span><br><span class="line">            context.save();</span><br><span class="line">            context.translate(e.pos._x, e.pos._y);</span><br><span class="line">            context.fillRect(<span class="number">0</span>, <span class="number">0</span>, e.pos._w, e.pos._h);</span><br><span class="line">            context.restore();</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (e.type === <span class="string">&quot;DOM&quot;</span>) {</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.__image) {</span><br><span class="line">              e.style.backgroundImage = <span class="string">&quot;url(&quot;</span> + <span class="keyword">this</span>.__image + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">              e.style.backgroundRepeat = <span class="keyword">this</span>._repeat;</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (e.type === <span class="string">&quot;webgl&quot;</span>) {</span><br><span class="line">            <span class="keyword">var</span> pos = e.pos;</span><br><span class="line">            <span class="comment">// Write texture coordinates</span></span><br><span class="line">            e.program.writeVector(<span class="string">&quot;aTextureCoord&quot;</span>,</span><br><span class="line">                <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">                <span class="number">0</span>, pos._h,</span><br><span class="line">                pos._w, <span class="number">0</span>,</span><br><span class="line">                pos._w, pos._h</span><br><span class="line">            );</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">},{<span class="string">&quot;../core/core.js&quot;</span>:<span class="number">7</span>}],<span class="number">30</span>:[<span class="function"><span class="keyword">function</span><span class="params">(require,module,exports)</span></span>{</span><br><span class="line"><span class="keyword">var</span> Crafty = require(<span class="string">&apos;../core/core.js&apos;</span>),    </span><br><span class="line">    document = window.document;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Particles</span><br><span class="line"> * @category Graphics</span><br><span class="line"> * @trigger ParticleEnd - when the particle animation has finished</span><br><span class="line"> *</span><br><span class="line"> * Based on Parcycle by Mr. Speaker, licensed under the MIT, Ported by Leo Koppelkamm</span><br><span class="line"> *</span><br><span class="line"> * @note This requires the canvas element, and won&apos;t do anything if the browser doesn&apos;t support it!</span><br><span class="line"> *</span><br><span class="line"> * For implementation details, check out the source code.</span><br><span class="line"> */</span></span><br><span class="line">Crafty.c(<span class="string">&quot;Particles&quot;</span>, {</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">//We need to clone it</span></span><br><span class="line">        <span class="keyword">this</span>._Particles = Crafty.clone(<span class="keyword">this</span>._Particles);</span><br><span class="line">        <span class="keyword">this</span>._Particles.parentEntity = <span class="keyword">this</span>;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.particles</span><br><span class="line">     * @comp Particles</span><br><span class="line">     * @sign public this .particles(Object options)</span><br><span class="line">     * @param options - Map of options that specify the behavior and look of the particles.</span><br><span class="line">     *</span><br><span class="line">     * @example</span><br><span class="line">     *</span></span><br></pre></td></tr></table></figure>

     * var options = {
     *   maxParticles: 150,
     *   size: 18,
     *   sizeRandom: 4,
     *   speed: 1,
     *   speedRandom: 1.2,
     *   // Lifespan in frames
     *   lifeSpan: 29,
     *   lifeSpanRandom: 7,
     *   // Angle is calculated clockwise: 12pm is 0deg, 3pm is 90deg etc.
     *   angle: 65,
     *   angleRandom: 34,
     *   startColour: [255, 131, 0, 1],
     *   startColourRandom: [48, 50, 45, 0],
     *   endColour: [245, 35, 0, 0],
     *   endColourRandom: [60, 60, 60, 0],
     *   // Only applies when fastMode is off, specifies how sharp the gradients are drawn
     *   sharpness: 20,
     *   sharpnessRandom: 10,
     *   // Random spread from origin
     *   spread: 10,
     *   // How many frames should this last
     *   duration: -1,
     *   // Will draw squares instead of circle gradients
     *   fastMode: false,
     *   gravity: { x: 0, y: 0.1 },
     *   // sensible values are 0-3
     *   jitter: 0,
     *   // Offset for the origin of the particles
     *   originOffset: {x: 0, y: 0}
     * };
     *
     * Crafty.e(&quot;2D,Canvas,Particles&quot;).particles(options);
     * <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br></pre></td><td class="code"><pre><span class="line">     */</span><br><span class="line">    particles: <span class="function"><span class="keyword">function</span> <span class="params">(options)</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!Crafty.support.canvas || Crafty.deactivateParticles) <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//If we drew on the main canvas, we&apos;d have to redraw</span></span><br><span class="line">        <span class="comment">//potentially huge sections of the screen every frame</span></span><br><span class="line">        <span class="comment">//So we create a separate canvas, where we only have to redraw</span></span><br><span class="line">        <span class="comment">//the changed particles.</span></span><br><span class="line">        <span class="keyword">var</span> c, ctx, relativeX, relativeY, bounding;</span><br><span class="line"></span><br><span class="line">        c = document.createElement(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">        c.width = Crafty.viewport.width;</span><br><span class="line">        c.height = Crafty.viewport.height;</span><br><span class="line">        c.style.position = <span class="string">&apos;absolute&apos;</span>;</span><br><span class="line">        c.style.left = <span class="string">&quot;0px&quot;</span>;</span><br><span class="line">        c.style.top = <span class="string">&quot;0px&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Crafty.stage.elem.appendChild(c);</span><br><span class="line"></span><br><span class="line">        ctx = c.getContext(<span class="string">&apos;2d&apos;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>._Particles.init(options);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Clean up the DOM when this component is removed</span></span><br><span class="line">        <span class="keyword">this</span>.bind(<span class="string">&apos;Remove&apos;</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">            Crafty.stage.elem.removeChild(c);</span><br><span class="line">        }).bind(<span class="string">&quot;RemoveComponent&quot;</span>, <span class="function"><span class="keyword">function</span> <span class="params">(id)</span> </span>{</span><br><span class="line">            <span class="keyword">if</span> (id === <span class="string">&quot;particles&quot;</span>)</span><br><span class="line">                Crafty.stage.elem.removeChild(c);</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        relativeX = <span class="keyword">this</span>.x + Crafty.viewport.x;</span><br><span class="line">        relativeY = <span class="keyword">this</span>.y + Crafty.viewport.y;</span><br><span class="line">        <span class="keyword">this</span>._Particles.position = <span class="keyword">this</span>._Particles.vectorHelpers.create(relativeX, relativeY);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> oldViewport = {</span><br><span class="line">            x: Crafty.viewport.x,</span><br><span class="line">            y: Crafty.viewport.y</span><br><span class="line">        };</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.bind(<span class="string">&apos;EnterFrame&apos;</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">            relativeX = <span class="keyword">this</span>.x + Crafty.viewport.x;</span><br><span class="line">            relativeY = <span class="keyword">this</span>.y + Crafty.viewport.y;</span><br><span class="line">            <span class="keyword">this</span>._Particles.viewportDelta = {</span><br><span class="line">                x: Crafty.viewport.x - oldViewport.x,</span><br><span class="line">                y: Crafty.viewport.y - oldViewport.y</span><br><span class="line">            };</span><br><span class="line"></span><br><span class="line">            oldViewport = {</span><br><span class="line">                x: Crafty.viewport.x,</span><br><span class="line">                y: Crafty.viewport.y</span><br><span class="line">            };</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>._Particles.position = <span class="keyword">this</span>._Particles.vectorHelpers.create(relativeX, relativeY);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//Selective clearing</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> Crafty.rectManager.boundingRect == <span class="string">&apos;function&apos;</span>) {</span><br><span class="line">                bounding = Crafty.rectManager.boundingRect(<span class="keyword">this</span>._Particles.register);</span><br><span class="line">                <span class="keyword">if</span> (bounding) ctx.clearRect(bounding._x, bounding._y, bounding._w, bounding._h);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, Crafty.viewport.width, Crafty.viewport.height);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">//This updates all particle colors &amp; positions</span></span><br><span class="line">            <span class="keyword">this</span>._Particles.update();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//This renders the updated particles</span></span><br><span class="line">            <span class="keyword">this</span>._Particles.render(ctx);</span><br><span class="line">        });</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    },</span><br><span class="line">    _Particles: {</span><br><span class="line">        presets: {</span><br><span class="line">            maxParticles: <span class="number">150</span>,</span><br><span class="line">            size: <span class="number">18</span>,</span><br><span class="line">            sizeRandom: <span class="number">4</span>,</span><br><span class="line">            speed: <span class="number">1</span>,</span><br><span class="line">            speedRandom: <span class="number">1.2</span>,</span><br><span class="line">            <span class="comment">// Lifespan in frames</span></span><br><span class="line">            lifeSpan: <span class="number">29</span>,</span><br><span class="line">            lifeSpanRandom: <span class="number">7</span>,</span><br><span class="line">            <span class="comment">// Angle is calculated clockwise: 12pm is 0deg, 3pm is 90deg etc.</span></span><br><span class="line">            angle: <span class="number">65</span>,</span><br><span class="line">            angleRandom: <span class="number">34</span>,</span><br><span class="line">            startColour: [<span class="number">255</span>, <span class="number">131</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">            startColourRandom: [<span class="number">48</span>, <span class="number">50</span>, <span class="number">45</span>, <span class="number">0</span>],</span><br><span class="line">            endColour: [<span class="number">245</span>, <span class="number">35</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">            endColourRandom: [<span class="number">60</span>, <span class="number">60</span>, <span class="number">60</span>, <span class="number">0</span>],</span><br><span class="line">            <span class="comment">// Only applies when fastMode is off, specifies how sharp the gradients are drawn</span></span><br><span class="line">            sharpness: <span class="number">20</span>,</span><br><span class="line">            sharpnessRandom: <span class="number">10</span>,</span><br><span class="line">            <span class="comment">// Random spread from origin</span></span><br><span class="line">            spread: <span class="number">10</span>,</span><br><span class="line">            <span class="comment">// How many frames should this last</span></span><br><span class="line">            duration: -<span class="number">1</span>,</span><br><span class="line">            <span class="comment">// Will draw squares instead of circle gradients</span></span><br><span class="line">            fastMode: <span class="literal">false</span>,</span><br><span class="line">            gravity: {</span><br><span class="line">                x: <span class="number">0</span>,</span><br><span class="line">                y: <span class="number">0.1</span></span><br><span class="line">            },</span><br><span class="line">            <span class="comment">// sensible values are 0-3</span></span><br><span class="line">            jitter: <span class="number">0</span>,</span><br><span class="line">            <span class="comment">// offset of particles from origin</span></span><br><span class="line">            originOffset: {x: <span class="number">0</span>, y: <span class="number">0</span>},</span><br><span class="line"></span><br><span class="line">            <span class="comment">//Don&apos;t modify the following</span></span><br><span class="line">            particles: [],</span><br><span class="line">            active: <span class="literal">true</span>,</span><br><span class="line">            particleCount: <span class="number">0</span>,</span><br><span class="line">            elapsedFrames: <span class="number">0</span>,</span><br><span class="line">            emissionRate: <span class="number">0</span>,</span><br><span class="line">            emitCounter: <span class="number">0</span>,</span><br><span class="line">            particleIndex: <span class="number">0</span></span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        init: <span class="function"><span class="keyword">function</span> <span class="params">(options)</span> </span>{</span><br><span class="line">            <span class="keyword">this</span>.position = <span class="keyword">this</span>.vectorHelpers.create(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> options == <span class="string">&apos;undefined&apos;</span>) options = {};</span><br><span class="line"></span><br><span class="line">            <span class="comment">//Create current config by merging given options and presets.</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> <span class="keyword">this</span>.presets) {</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> options[key] != <span class="string">&apos;undefined&apos;</span>) <span class="keyword">this</span>[key] = options[key];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">this</span>[key] = <span class="keyword">this</span>.presets[key];</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.emissionRate = <span class="keyword">this</span>.maxParticles / <span class="keyword">this</span>.lifeSpan;</span><br><span class="line">            <span class="keyword">this</span>.positionRandom = <span class="keyword">this</span>.vectorHelpers.create(<span class="keyword">this</span>.spread, <span class="keyword">this</span>.spread);</span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line">        addParticle: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.particleCount == <span class="keyword">this</span>.maxParticles) {</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Take the next particle out of the particle pool we have created and initialize it</span></span><br><span class="line">            <span class="keyword">var</span> particle = <span class="keyword">new</span> <span class="keyword">this</span>.particle(<span class="keyword">this</span>.vectorHelpers);</span><br><span class="line">            <span class="keyword">this</span>.initParticle(particle);</span><br><span class="line">            <span class="keyword">this</span>.particles[<span class="keyword">this</span>.particleCount] = particle;</span><br><span class="line">            <span class="comment">// Increment the particle count</span></span><br><span class="line">            <span class="keyword">this</span>.particleCount++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        },</span><br><span class="line">        RANDM1TO1: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">return</span> Math.random() * <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">        },</span><br><span class="line">        initParticle: <span class="function"><span class="keyword">function</span> <span class="params">(particle)</span> </span>{</span><br><span class="line">            particle.position.x = Crafty.viewport._scale * (<span class="keyword">this</span>.position.x + <span class="keyword">this</span>.originOffset.x + <span class="keyword">this</span>.positionRandom.x * <span class="keyword">this</span>.RANDM1TO1());</span><br><span class="line">            particle.position.y = Crafty.viewport._scale * (<span class="keyword">this</span>.position.y + <span class="keyword">this</span>.originOffset.y + <span class="keyword">this</span>.positionRandom.y * <span class="keyword">this</span>.RANDM1TO1());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> newAngle = (<span class="keyword">this</span>.angle + <span class="keyword">this</span>.angleRandom * <span class="keyword">this</span>.RANDM1TO1()) * (Math.PI / <span class="number">180</span>); <span class="comment">// convert to radians</span></span><br><span class="line">            <span class="keyword">var</span> vector = <span class="keyword">this</span>.vectorHelpers.create(Math.sin(newAngle), -Math.cos(newAngle)); <span class="comment">// Could move to lookup for speed</span></span><br><span class="line">            <span class="keyword">var</span> vectorSpeed = <span class="keyword">this</span>.speed + <span class="keyword">this</span>.speedRandom * <span class="keyword">this</span>.RANDM1TO1();</span><br><span class="line">            particle.direction = <span class="keyword">this</span>.vectorHelpers.multiply(vector, vectorSpeed);</span><br><span class="line"></span><br><span class="line">            particle.size = Crafty.viewport._scale * (<span class="keyword">this</span>.size + <span class="keyword">this</span>.sizeRandom * <span class="keyword">this</span>.RANDM1TO1());</span><br><span class="line">            particle.size = particle.size &lt; <span class="number">0</span> ? <span class="number">0</span> : ~~particle.size;</span><br><span class="line">            particle.timeToLive = <span class="keyword">this</span>.lifeSpan + <span class="keyword">this</span>.lifeSpanRandom * <span class="keyword">this</span>.RANDM1TO1();</span><br><span class="line"></span><br><span class="line">            particle.sharpness = <span class="keyword">this</span>.sharpness + <span class="keyword">this</span>.sharpnessRandom * <span class="keyword">this</span>.RANDM1TO1();</span><br><span class="line">            particle.sharpness = particle.sharpness &gt; <span class="number">100</span> ? <span class="number">100</span> : particle.sharpness &lt; <span class="number">0</span> ? <span class="number">0</span> : particle.sharpness;</span><br><span class="line">            <span class="comment">// internal circle gradient size - affects the sharpness of the radial gradient</span></span><br><span class="line">            particle.sizeSmall = ~~ ((particle.size / <span class="number">200</span>) * particle.sharpness); <span class="comment">//(size/2/100)</span></span><br><span class="line">            <span class="keyword">var</span> start = [</span><br><span class="line">                <span class="keyword">this</span>.startColour[<span class="number">0</span>] + <span class="keyword">this</span>.startColourRandom[<span class="number">0</span>] * <span class="keyword">this</span>.RANDM1TO1(),</span><br><span class="line">                <span class="keyword">this</span>.startColour[<span class="number">1</span>] + <span class="keyword">this</span>.startColourRandom[<span class="number">1</span>] * <span class="keyword">this</span>.RANDM1TO1(),</span><br><span class="line">                <span class="keyword">this</span>.startColour[<span class="number">2</span>] + <span class="keyword">this</span>.startColourRandom[<span class="number">2</span>] * <span class="keyword">this</span>.RANDM1TO1(),</span><br><span class="line">                <span class="keyword">this</span>.startColour[<span class="number">3</span>] + <span class="keyword">this</span>.startColourRandom[<span class="number">3</span>] * <span class="keyword">this</span>.RANDM1TO1()</span><br><span class="line">            ];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> end = [</span><br><span class="line">                <span class="keyword">this</span>.endColour[<span class="number">0</span>] + <span class="keyword">this</span>.endColourRandom[<span class="number">0</span>] * <span class="keyword">this</span>.RANDM1TO1(),</span><br><span class="line">                <span class="keyword">this</span>.endColour[<span class="number">1</span>] + <span class="keyword">this</span>.endColourRandom[<span class="number">1</span>] * <span class="keyword">this</span>.RANDM1TO1(),</span><br><span class="line">                <span class="keyword">this</span>.endColour[<span class="number">2</span>] + <span class="keyword">this</span>.endColourRandom[<span class="number">2</span>] * <span class="keyword">this</span>.RANDM1TO1(),</span><br><span class="line">                <span class="keyword">this</span>.endColour[<span class="number">3</span>] + <span class="keyword">this</span>.endColourRandom[<span class="number">3</span>] * <span class="keyword">this</span>.RANDM1TO1()</span><br><span class="line">            ];</span><br><span class="line"></span><br><span class="line">            particle.colour = start;</span><br><span class="line">            particle.deltaColour[<span class="number">0</span>] = (end[<span class="number">0</span>] - start[<span class="number">0</span>]) / particle.timeToLive;</span><br><span class="line">            particle.deltaColour[<span class="number">1</span>] = (end[<span class="number">1</span>] - start[<span class="number">1</span>]) / particle.timeToLive;</span><br><span class="line">            particle.deltaColour[<span class="number">2</span>] = (end[<span class="number">2</span>] - start[<span class="number">2</span>]) / particle.timeToLive;</span><br><span class="line">            particle.deltaColour[<span class="number">3</span>] = (end[<span class="number">3</span>] - start[<span class="number">3</span>]) / particle.timeToLive;</span><br><span class="line">        },</span><br><span class="line">        update: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.active &amp;&amp; <span class="keyword">this</span>.emissionRate &gt; <span class="number">0</span>) {</span><br><span class="line">                <span class="keyword">var</span> rate = <span class="number">1</span> / <span class="keyword">this</span>.emissionRate;</span><br><span class="line">                <span class="keyword">this</span>.emitCounter++;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">this</span>.particleCount &lt; <span class="keyword">this</span>.maxParticles &amp;&amp; <span class="keyword">this</span>.emitCounter &gt; rate) {</span><br><span class="line">                    <span class="keyword">this</span>.addParticle();</span><br><span class="line">                    <span class="keyword">this</span>.emitCounter -= rate;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">this</span>.elapsedFrames++;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.duration != -<span class="number">1</span> &amp;&amp; <span class="keyword">this</span>.duration &lt; <span class="keyword">this</span>.elapsedFrames) {</span><br><span class="line">                    <span class="keyword">this</span>.stop();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.particleIndex = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>.register = [];</span><br><span class="line">            <span class="keyword">var</span> draw;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">this</span>.particleIndex &lt; <span class="keyword">this</span>.particleCount) {</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> currentParticle = <span class="keyword">this</span>.particles[<span class="keyword">this</span>.particleIndex];</span><br><span class="line"></span><br><span class="line">                <span class="comment">// If the current particle is alive then update it</span></span><br><span class="line">                <span class="keyword">if</span> (currentParticle.timeToLive &gt; <span class="number">0</span>) {</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Calculate the new direction based on gravity</span></span><br><span class="line">                    currentParticle.direction = <span class="keyword">this</span>.vectorHelpers.add(currentParticle.direction, <span class="keyword">this</span>.gravity);</span><br><span class="line">                    currentParticle.position = <span class="keyword">this</span>.vectorHelpers.add(currentParticle.position, currentParticle.direction);</span><br><span class="line">                    currentParticle.position = <span class="keyword">this</span>.vectorHelpers.add(currentParticle.position, <span class="keyword">this</span>.viewportDelta);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>.jitter) {</span><br><span class="line">                        currentParticle.position.x += <span class="keyword">this</span>.jitter * <span class="keyword">this</span>.RANDM1TO1();</span><br><span class="line">                        currentParticle.position.y += <span class="keyword">this</span>.jitter * <span class="keyword">this</span>.RANDM1TO1();</span><br><span class="line">                    }</span><br><span class="line">                    currentParticle.timeToLive--;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Update colours</span></span><br><span class="line">                    <span class="keyword">var</span> r = currentParticle.colour[<span class="number">0</span>] += currentParticle.deltaColour[<span class="number">0</span>];</span><br><span class="line">                    <span class="keyword">var</span> g = currentParticle.colour[<span class="number">1</span>] += currentParticle.deltaColour[<span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">var</span> b = currentParticle.colour[<span class="number">2</span>] += currentParticle.deltaColour[<span class="number">2</span>];</span><br><span class="line">                    <span class="keyword">var</span> a = currentParticle.colour[<span class="number">3</span>] += currentParticle.deltaColour[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Calculate the rgba string to draw.</span></span><br><span class="line">                    draw = [];</span><br><span class="line">                    draw.push(<span class="string">&quot;rgba(&quot;</span> + (r &gt; <span class="number">255</span> ? <span class="number">255</span> : r &lt; <span class="number">0</span> ? <span class="number">0</span> : ~~r));</span><br><span class="line">                    draw.push(g &gt; <span class="number">255</span> ? <span class="number">255</span> : g &lt; <span class="number">0</span> ? <span class="number">0</span> : ~~g);</span><br><span class="line">                    draw.push(b &gt; <span class="number">255</span> ? <span class="number">255</span> : b &lt; <span class="number">0</span> ? <span class="number">0</span> : ~~b);</span><br><span class="line">                    draw.push((a &gt; <span class="number">1</span> ? <span class="number">1</span> : a &lt; <span class="number">0</span> ? <span class="number">0</span> : a.toFixed(<span class="number">2</span>)) + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">                    currentParticle.drawColour = draw.join(<span class="string">&quot;,&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!<span class="keyword">this</span>.fastMode) {</span><br><span class="line">                        draw[<span class="number">3</span>] = <span class="string">&quot;0)&quot;</span>;</span><br><span class="line">                        currentParticle.drawColourEnd = draw.join(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">this</span>.particleIndex++;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="comment">// Replace particle with the last active</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>.particleIndex != <span class="keyword">this</span>.particleCount - <span class="number">1</span>) {</span><br><span class="line">                        <span class="keyword">this</span>.particles[<span class="keyword">this</span>.particleIndex] = <span class="keyword">this</span>.particles[<span class="keyword">this</span>.particleCount - <span class="number">1</span>];</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">this</span>.particleCount--;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">var</span> rect = {};</span><br><span class="line">                rect._x = ~~currentParticle.position.x;</span><br><span class="line">                rect._y = ~~currentParticle.position.y;</span><br><span class="line">                rect._w = currentParticle.size;</span><br><span class="line">                rect._h = currentParticle.size;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>.register.push(rect);</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line">        stop: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">this</span>.active = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">this</span>.elapsedFrames = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>.emitCounter = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>.parentEntity.trigger(<span class="string">&quot;ParticleEnd&quot;</span>);</span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line">        render: <span class="function"><span class="keyword">function</span> <span class="params">(context)</span> </span>{</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, j = <span class="keyword">this</span>.particleCount; i &lt; j; i++) {</span><br><span class="line">                <span class="keyword">var</span> particle = <span class="keyword">this</span>.particles[i];</span><br><span class="line">                <span class="keyword">var</span> size = particle.size;</span><br><span class="line">                <span class="keyword">var</span> halfSize = size &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (particle.position.x + size &lt; <span class="number">0</span> || particle.position.y + size &lt; <span class="number">0</span> || particle.position.x - size &gt; Crafty.viewport.width || particle.position.y - size &gt; Crafty.viewport.height) {</span><br><span class="line">                    <span class="comment">//Particle is outside</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">var</span> x = ~~particle.position.x;</span><br><span class="line">                <span class="keyword">var</span> y = ~~particle.position.y;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.fastMode) {</span><br><span class="line">                    context.fillStyle = particle.drawColour;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">var</span> radgrad = context.createRadialGradient(x + halfSize, y + halfSize, particle.sizeSmall, x + halfSize, y + halfSize, halfSize);</span><br><span class="line">                    radgrad.addColorStop(<span class="number">0</span>, particle.drawColour);</span><br><span class="line">                    <span class="comment">//0.9 to avoid visible boxing</span></span><br><span class="line">                    radgrad.addColorStop(<span class="number">0.9</span>, particle.drawColourEnd);</span><br><span class="line">                    context.fillStyle = radgrad;</span><br><span class="line">                }</span><br><span class="line">                context.fillRect(x, y, size, size);</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        particle: <span class="function"><span class="keyword">function</span> <span class="params">(vectorHelpers)</span> </span>{</span><br><span class="line">            <span class="keyword">this</span>.position = vectorHelpers.create(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">this</span>.direction = vectorHelpers.create(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">this</span>.size = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>.sizeSmall = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>.timeToLive = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>.colour = [];</span><br><span class="line">            <span class="keyword">this</span>.drawColour = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">this</span>.deltaColour = [];</span><br><span class="line">            <span class="keyword">this</span>.sharpness = <span class="number">0</span>;</span><br><span class="line">        },</span><br><span class="line">        vectorHelpers: {</span><br><span class="line">            create: <span class="function"><span class="keyword">function</span> <span class="params">(x, y)</span> </span>{</span><br><span class="line">                <span class="keyword">return</span> {</span><br><span class="line">                    <span class="string">&quot;x&quot;</span>: x,</span><br><span class="line">                    <span class="string">&quot;y&quot;</span>: y</span><br><span class="line">                };</span><br><span class="line">            },</span><br><span class="line">            multiply: <span class="function"><span class="keyword">function</span> <span class="params">(vector, scaleFactor)</span> </span>{</span><br><span class="line">                vector.x *= scaleFactor;</span><br><span class="line">                vector.y *= scaleFactor;</span><br><span class="line">                <span class="keyword">return</span> vector;</span><br><span class="line">            },</span><br><span class="line">            add: <span class="function"><span class="keyword">function</span> <span class="params">(vector1, vector2)</span> </span>{</span><br><span class="line">                vector1.x += vector2.x;</span><br><span class="line">                vector1.y += vector2.y;</span><br><span class="line">                <span class="keyword">return</span> vector1;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">},{<span class="string">&quot;../core/core.js&quot;</span>:<span class="number">7</span>}],<span class="number">31</span>:[<span class="function"><span class="keyword">function</span><span class="params">(require,module,exports)</span></span>{</span><br><span class="line"><span class="keyword">var</span> Crafty = require(<span class="string">&apos;../core/core.js&apos;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line">* #SpriteAnimation</span><br><span class="line">* @category Animation</span><br><span class="line">* @trigger StartAnimation - When an animation starts playing, or is resumed from the paused state - {Reel}</span><br><span class="line">* @trigger AnimationEnd - When the animation finishes - { Reel }</span><br><span class="line">* @trigger FrameChange - Each time the frame of the current reel changes - { Reel }</span><br><span class="line">* @trigger ReelChange - When the reel changes - { Reel }</span><br><span class="line">*</span><br><span class="line">* Used to animate sprites by treating a sprite map as a set of animation frames.</span><br><span class="line">* Must be applied to an entity that has a sprite-map component.</span><br><span class="line">*</span><br><span class="line">* To define an animation, see the `reel` method.  To play an animation, see the `animate` method.</span><br><span class="line">*</span><br><span class="line">* A reel is an object that contains the animation frames and current state for an animation.  The reel object has the following properties:</span><br><span class="line">* @param id: (String) - the name of the reel</span><br><span class="line">* @param frames: (Array) - A list of frames in the format [xpos, ypos]</span><br><span class="line">* @param currentFrame: (Number) - The index of the current frame</span><br><span class="line">* @param easing: (Crafty.easing object) - The object that handles the internal progress of the animation.</span><br><span class="line">* @param duration: (Number) - The duration in milliseconds.</span><br><span class="line">*</span><br><span class="line">* Many animation related events pass a reel object as data.  As typical with events, this should be treated as read only data that might be later altered by the entity.  If you wish to preserve the data, make a copy of it.</span><br><span class="line">*</span><br><span class="line">* @see Crafty.sprite</span><br><span class="line">*/</span></span><br><span class="line">Crafty.c(<span class="string">&quot;SpriteAnimation&quot;</span>, {</span><br><span class="line">	<span class="comment">/*</span><br><span class="line">	*</span><br><span class="line">	* A map in which the keys are the names assigned to animations defined using</span><br><span class="line">	* the component (also known as reelIDs), and the values are objects describing</span><br><span class="line">	* the animation and its state.</span><br><span class="line">	*/</span></span><br><span class="line">	_reels: <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span><br><span class="line">	* The reelID of the currently active reel (which is one of the elements in `this._reels`).</span><br><span class="line">	* This value is `null` if no reel is active. Some of the component&apos;s actions can be invoked</span><br><span class="line">	* without specifying a reel, in which case they will work on the active reel.</span><br><span class="line">	*/</span></span><br><span class="line">	_currentReelId: <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span><br><span class="line">	* The currently active reel.</span><br><span class="line">	* This value is `null` if no reel is active.</span><br><span class="line">	*/</span></span><br><span class="line">	_currentReel: <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span><br><span class="line">	* Whether or not an animation is currently playing.</span><br><span class="line">	*/</span></span><br><span class="line">	_isPlaying: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**@</span><br><span class="line">	* #.animationSpeed</span><br><span class="line">	* @comp SpriteAnimation</span><br><span class="line">	*</span><br><span class="line">	* The playback rate of the animation.  This property defaults to 1.</span><br><span class="line">	*/</span></span><br><span class="line">	animationSpeed: <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	init: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">		<span class="keyword">this</span>._reels = {};</span><br><span class="line">	},</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**@</span><br><span class="line">	* #.reel</span><br><span class="line">	* @comp SpriteAnimation</span><br><span class="line">	* Used to define reels, to change the active reel, and to fetch the id of the active reel.</span><br><span class="line">	*</span><br><span class="line">	* @sign public this .reel(String reelId, Duration duration, Number fromX, Number fromY, Number frameCount)</span><br><span class="line">	* Defines a reel by starting and ending position on the sprite sheet.</span><br><span class="line">	* @param reelId - ID of the animation reel being created</span><br><span class="line">	* @param duration - The length of the animation in milliseconds.</span><br><span class="line">	* @param fromX - Starting `x` position on the sprite map (x&apos;s unit is the horizontal size of the sprite in the sprite map).</span><br><span class="line">	* @param fromY - `y` position on the sprite map (y&apos;s unit is the horizontal size of the sprite in the sprite map). Remains constant through the animation.</span><br><span class="line">	* @param frameCount - The number of sequential frames in the animation.  If negative, the animation will play backwards.</span><br><span class="line">	*</span><br><span class="line">	* @sign public this .reel(String reelId, Duration duration, Array frames)</span><br><span class="line">	* Defines a reel by an explicit list of frames</span><br><span class="line">	* @param reelId - ID of the animation reel being created</span><br><span class="line">	* @param duration - The length of the animation in milliseconds.</span><br><span class="line">	* @param frames - An array of arrays containing the `x` and `y` values of successive frames: [[x1,y1],[x2,y2],...] (the values are in the unit of the sprite map&apos;s width/height respectively).</span><br><span class="line">	*</span><br><span class="line">	* @sign public this .reel(String reelId)</span><br><span class="line">	* Switches to the specified reel.  The sprite will be updated to that reel&apos;s current frame</span><br><span class="line">	* @param reelID - the ID to switch to</span><br><span class="line">	*</span><br><span class="line">	* @sign public Reel .reel()</span><br><span class="line">	* @return The id of the current reel</span><br><span class="line">	*</span><br><span class="line">	*</span><br><span class="line">	* A method to handle animation reels.  Only works for sprites built with the Crafty.sprite methods.</span><br><span class="line">	* See the Tween component for animation of 2D properties.</span><br><span class="line">	*</span><br><span class="line">	* To setup an animation reel, pass the name of the reel (used to identify the reel later), and either an</span><br><span class="line">	* array of absolute sprite positions or the start x on the sprite map, the y on the sprite map and then the end x on the sprite map.</span><br><span class="line">	*</span><br><span class="line">	*</span><br><span class="line">	* @example</span><br><span class="line">	*</span></span><br></pre></td></tr></table></figure>

	* // Define a sprite-map component
	* Crafty.sprite(16, &quot;images/sprite.png&quot;, {
	*     PlayerSprite: [0,0]
	* });
	*
	* // Define an animation on the second row of the sprite map (fromY = 1)
	* // from the left most sprite (fromX = 0) to the fourth sprite
	* // on that row (frameCount = 4), with a duration of 1 second
	* Crafty.e(&quot;2D, DOM, SpriteAnimation, PlayerSprite&quot;).reel(&apos;PlayerRunning&apos;, 1000, 0, 1, 4);
	*
	* // This is the same animation definition, but using the alternative method
	* Crafty.e(&quot;2D, DOM, SpriteAnimation, PlayerSprite&quot;).reel(&apos;PlayerRunning&apos;, 1000, [[0, 1], [1, 1], [2, 1], [3, 1]]);
	* <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">*/</span><br><span class="line">reel: function (reelId, duration, fromX, fromY, frameCount) {</span><br><span class="line">	<span class="comment">// @sign public this .reel()</span></span><br><span class="line">	<span class="keyword">if</span> (arguments.length === <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>._currentReelId;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// @sign public this .reel(String reelID)</span></span><br><span class="line">	<span class="keyword">if</span> (arguments.length === <span class="number">1</span> &amp;&amp; typeof reelId === <span class="string">&quot;string&quot;</span>){</span><br><span class="line">		<span class="keyword">if</span> (typeof <span class="keyword">this</span>._reels[reelId] === <span class="string">&quot;undefined&quot;</span>)</span><br><span class="line">			<span class="keyword">throw</span>(<span class="string">&quot;The specified reel &quot;</span> + reelId + <span class="string">&quot; is undefined.&quot;</span>);</span><br><span class="line">		<span class="keyword">this</span>.pauseAnimation();</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>._currentReelId !== reelId) {</span><br><span class="line">			<span class="keyword">this</span>._currentReelId = reelId;</span><br><span class="line">			<span class="keyword">this</span>._currentReel = <span class="keyword">this</span>._reels[reelId];</span><br><span class="line">			<span class="comment">// Change the visible sprite</span></span><br><span class="line">			<span class="keyword">this</span>._updateSprite();</span><br><span class="line">			<span class="comment">// Trigger event</span></span><br><span class="line">			<span class="keyword">this</span>.trigger(<span class="string">&quot;ReelChange&quot;</span>, <span class="keyword">this</span>._currentReel);</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> reel, i, y;</span><br><span class="line"></span><br><span class="line">	reel = {</span><br><span class="line">		id: reelId,</span><br><span class="line">		frames: [],</span><br><span class="line">		currentFrame: <span class="number">0</span>,</span><br><span class="line">		easing: <span class="keyword">new</span> Crafty.easing(duration),</span><br><span class="line">		defaultLoops: <span class="number">1</span></span><br><span class="line">	};</span><br><span class="line"></span><br><span class="line">	reel.duration = reel.easing.duration;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// @sign public this .reel(String reelId, Number duration, Number fromX, Number fromY, Number frameDuration)</span></span><br><span class="line">	<span class="keyword">if</span> (typeof fromX === <span class="string">&quot;number&quot;</span>) {</span><br><span class="line">		i = fromX;</span><br><span class="line">		y = fromY;</span><br><span class="line">		<span class="keyword">if</span> (frameCount &gt;= <span class="number">0</span>) {</span><br><span class="line">			<span class="keyword">for</span> (; i &lt; fromX + frameCount ; i++) {</span><br><span class="line">				reel.frames.push([i, y]);</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">else</span> {</span><br><span class="line">			<span class="keyword">for</span> (; i &gt; fromX + frameCount; i--) {</span><br><span class="line">				reel.frames.push([i, y]);</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	<span class="comment">// @sign public this .reel(String reelId, Number duration, Array frames)</span></span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (arguments.length === <span class="number">3</span> &amp;&amp; typeof fromX === <span class="string">&quot;object&quot;</span>) {</span><br><span class="line">		reel.frames = fromX;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">else</span> {</span><br><span class="line">		<span class="keyword">throw</span> <span class="string">&quot;Urecognized arguments. Please see the documentation for &apos;reel(...)&apos;.&quot;</span>;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">this</span>._reels[reelId] = reel;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/**@</span><br><span class="line"><span class="bullet">* </span>#.animate</span><br><span class="line"><span class="bullet">* </span>@comp SpriteAnimation</span><br><span class="line"><span class="bullet">* </span>@sign public this .animate([String reelId] [, Number loopCount])</span><br><span class="line"><span class="bullet">* </span>@param reelId - ID of </span>the<span class="markdown"> animation reel to play.  Defaults to </span>the<span class="markdown"> current reel if none is specified.</span><br><span class="line"><span class="bullet">* </span>@param loopCount - Number of times to repeat </span>the<span class="markdown"> animation. Use -1 to repeat indefinitely.  Defaults to 1.</span><br><span class="line"><span class="bullet">*</span><br><span class="line"></span><span class="bullet">* </span>Play one of </span>the<span class="markdown"> reels previously defined through <span class="code">`.reel(...)`</span>. Simply pass </span>the<span class="markdown"> name of </span>the<span class="markdown"> reel. If </span>you<span class="markdown"> wish </span>the<span class="markdown"></span><br><span class="line"><span class="bullet">* </span>animation to play multiple times in succession, pass in </span>the<span class="markdown"> amount of times as </span>an<span class="markdown"> additional parameter.</span><br><span class="line"><span class="bullet">* </span>To have </span>the<span class="markdown"> animation repeat indefinitely, pass in <span class="code">`-1`</span>.</span><br><span class="line"><span class="bullet">*</span><br><span class="line"></span><span class="bullet">* </span>If another animation is currently playing, it </span>will<span class="markdown"> be paused.</span><br><span class="line"><span class="bullet">*</span><br><span class="line"></span><span class="bullet">* </span>This </span>will<span class="markdown"> always play </span>an<span class="markdown"> animation from </span>the<span class="markdown"> beginning.  If </span>you<span class="markdown"> wish to resume from </span>the<span class="markdown"> current state of </span>a<span class="markdown"> reel, use <span class="code">`resumeAnimation()`</span>.</span><br><span class="line"><span class="bullet">*</span><br><span class="line"></span><span class="bullet">* </span>Once </span>an<span class="markdown"> animation ends, it </span>will<span class="markdown"> remain at its last frame.</span><br><span class="line"><span class="bullet">*</span><br><span class="line"></span><span class="bullet">*</span><br><span class="line"></span><span class="bullet">* </span>@example</span><br><span class="line">*</span></span></span><br></pre></td></tr></table></figure>

	* // Define a sprite-map component
	* Crafty.sprite(16, &quot;images/sprite.png&quot;, {
	*     PlayerSprite: [0,0]
	* });
	*
	* // Play the animation across 20 frames (so each sprite in the 4 sprite animation should be seen for 5 frames) and repeat indefinitely
	* Crafty.e(&quot;2D, DOM, SpriteAnimation, PlayerSprite&quot;)
	*     .reel(&apos;PlayerRunning&apos;, 20, 0, 0, 3) // setup animation
	*     .animate(&apos;PlayerRunning&apos;, -1); // start animation
	* <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br></pre></td><td class="code"><pre><span class="line">*/</span><br><span class="line">animate: function(reelId, loopCount) {</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> pos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// switch to the specified reel if necessary</span></span><br><span class="line">	<span class="keyword">if</span> (typeof reelId === <span class="string">&quot;string&quot;</span>)</span><br><span class="line">		<span class="keyword">this</span>.reel(reelId);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> currentReel = <span class="keyword">this</span>._currentReel;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (typeof currentReel === <span class="string">&quot;undefined&quot;</span> || currentReel === <span class="keyword">null</span>)</span><br><span class="line">		<span class="keyword">throw</span>(<span class="string">&quot;No reel is specified, and there is no currently active reel.&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">this</span>.pauseAnimation(); <span class="comment">// This will pause the current animation, if one is playing</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Handle repeats; if loopCount is undefined and reelID is a number, calling with that signature</span></span><br><span class="line">	<span class="keyword">if</span> (typeof loopCount === <span class="string">&quot;undefined&quot;</span>)</span><br><span class="line">		<span class="keyword">if</span> (typeof reelId === <span class="string">&quot;number&quot;</span>)</span><br><span class="line">			loopCount = reelId;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			loopCount = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// set the animation to the beginning</span></span><br><span class="line">	currentReel.easing.reset();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// user provided loop count.</span></span><br><span class="line">	<span class="keyword">this</span>.loops(loopCount);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// trigger the necessary events and switch to the first frame</span></span><br><span class="line">	<span class="keyword">this</span>._setFrame(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Start the anim</span></span><br><span class="line">	<span class="keyword">this</span>.bind(<span class="string">&quot;EnterFrame&quot;</span>, <span class="keyword">this</span>._animationTick);</span><br><span class="line">	<span class="keyword">this</span>._isPlaying = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">this</span>.trigger(<span class="string">&quot;StartAnimation&quot;</span>, currentReel);</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/**@</span><br><span class="line"><span class="bullet">* </span>#.resumeAnimation</span><br><span class="line"><span class="bullet">* </span>@comp SpriteAnimation</span><br><span class="line"><span class="bullet">* </span>@sign public this .resumeAnimation()</span><br><span class="line"><span class="bullet">*</span><br><span class="line"></span><span class="bullet">* </span>This </span>will<span class="markdown"> resume animation of </span>the<span class="markdown"> current reel from its current state.</span><br><span class="line"><span class="bullet">* </span>If </span>a<span class="markdown"> reel is already playing, or there is no current reel, there </span>will<span class="markdown"> be no effect.</span><br><span class="line">*/</span></span></span><br><span class="line">resumeAnimation: function() {</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>._isPlaying === <span class="keyword">false</span> &amp;&amp;  <span class="keyword">this</span>._currentReel !== <span class="keyword">null</span>) {</span><br><span class="line">		<span class="keyword">this</span>.bind(<span class="string">&quot;EnterFrame&quot;</span>, <span class="keyword">this</span>._animationTick);</span><br><span class="line">		<span class="keyword">this</span>._isPlaying = <span class="keyword">true</span>;</span><br><span class="line">		<span class="keyword">this</span>._currentReel.easing.resume();</span><br><span class="line">		<span class="keyword">this</span>.trigger(<span class="string">&quot;StartAnimation&quot;</span>, <span class="keyword">this</span>._currentReel);</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/**@</span><br><span class="line"><span class="bullet">* </span>#.pauseAnimation</span><br><span class="line"><span class="bullet">* </span>@comp SpriteAnimation</span><br><span class="line"><span class="bullet">* </span>@sign public this .pauseAnimation(void)</span><br><span class="line"><span class="bullet">*</span><br><span class="line"></span><span class="bullet">* </span>Pauses </span>the<span class="markdown"> currently playing animation, or does nothing if no animation is playing.</span><br><span class="line">*/</span></span></span><br><span class="line">pauseAnimation: function () {</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>._isPlaying === <span class="keyword">true</span>) {</span><br><span class="line">		<span class="keyword">this</span>.unbind(<span class="string">&quot;EnterFrame&quot;</span>, <span class="keyword">this</span>._animationTick);</span><br><span class="line">		<span class="keyword">this</span>._isPlaying = <span class="keyword">false</span>;</span><br><span class="line">		<span class="keyword">this</span>._reels[<span class="keyword">this</span>._currentReelId].easing.pause();</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/**@</span><br><span class="line"><span class="bullet">* </span>#.resetAnimation</span><br><span class="line"><span class="bullet">* </span>@comp SpriteAnimation</span><br><span class="line"><span class="bullet">* </span>@sign public this .resetAnimation()</span><br><span class="line"><span class="bullet">*</span><br><span class="line"></span><span class="bullet">* </span>Resets </span>the<span class="markdown"> current animation to its initial state.  Resets </span>the<span class="markdown"> number of loops to </span>the<span class="markdown"> last specified value, which defaults to 1.</span><br><span class="line"><span class="bullet">*</span><br><span class="line"></span><span class="bullet">* </span>Neither pauses nor resumes </span>the<span class="markdown"> current animation.</span><br><span class="line">*/</span></span></span><br><span class="line">resetAnimation: function(){</span><br><span class="line">	<span class="keyword">var</span> currentReel = <span class="keyword">this</span>._currentReel;</span><br><span class="line">	<span class="keyword">if</span>  (currentReel === <span class="keyword">null</span>)</span><br><span class="line">		<span class="keyword">throw</span>(<span class="string">&quot;No active reel to reset.&quot;</span>);</span><br><span class="line">	<span class="keyword">this</span>.reelPosition(<span class="number">0</span>);</span><br><span class="line">	currentReel.easing.repeat(currentReel.defaultLoops);</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  },</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/**@</span><br><span class="line"><span class="bullet">* </span>#.loops</span><br><span class="line"><span class="bullet">* </span>@comp SpriteAnimation</span><br><span class="line"><span class="bullet">* </span>@sign public this .loops(Number loopCount)</span><br><span class="line"><span class="bullet">* </span>@param loopCount - The number of times to play </span>the<span class="markdown"> animation</span><br><span class="line"><span class="bullet">*</span><br><span class="line"></span><span class="bullet">* </span>Sets </span>the<span class="markdown"> number of times </span>the<span class="markdown"> animation </span>will<span class="markdown"> loop for.</span><br><span class="line"><span class="bullet">* </span>If called while </span>an<span class="markdown"> animation is in progress, </span>the<span class="markdown"> current state </span>will<span class="markdown"> be considered </span>the<span class="markdown"> first loop.</span><br><span class="line"><span class="bullet">*</span><br><span class="line"></span><span class="bullet">* </span>@sign public Number .loops()</span><br><span class="line"><span class="bullet">* </span>@returns The number of loops left.  Returns 0 if no reel is active.</span><br><span class="line">*/</span></span></span><br><span class="line">loops: function(loopCount) {</span><br><span class="line">	<span class="keyword">if</span> (arguments.length === <span class="number">0</span>){</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>._currentReel !== <span class="keyword">null</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>._currentReel.easing.loops;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>._currentReel !== <span class="keyword">null</span>){</span><br><span class="line">		<span class="keyword">if</span> (loopCount &lt; <span class="number">0</span>)</span><br><span class="line">			loopCount = Infinity;</span><br><span class="line">		<span class="keyword">this</span>._currentReel.easing.repeat(loopCount);</span><br><span class="line">		<span class="keyword">this</span>._currentReel.defaultLoops = loopCount;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/**@</span><br><span class="line"><span class="bullet">* </span>#.reelPosition</span><br><span class="line"><span class="bullet">* </span>@comp SpriteAnimation</span><br><span class="line"><span class="bullet">*</span><br><span class="line"></span><span class="bullet">* </span>@sign public this .reelPosition(Integer position)</span><br><span class="line"><span class="bullet">* </span>Sets </span>the<span class="markdown"> position of </span>the<span class="markdown"> current reel by frame number.</span><br><span class="line"><span class="bullet">* </span>@param position - </span>the<span class="markdown"> frame to jump to.  This is zero-indexed.  A negative values counts back from </span>the<span class="markdown"> last frame.</span><br><span class="line"><span class="bullet">*</span><br><span class="line"></span><span class="bullet">* </span>@sign public this .reelPosition(Number position)</span><br><span class="line"><span class="bullet">* </span>Sets </span>the<span class="markdown"> position of </span>the<span class="markdown"> current reel by percent progress.</span><br><span class="line"><span class="bullet">* </span>@param position - </span>a<span class="markdown"> non-integer number between 0 and 1</span><br><span class="line"><span class="bullet">*</span><br><span class="line"></span><span class="bullet">* </span>@sign public this .reelPosition(String position)</span><br><span class="line"><span class="bullet">* </span>Jumps to </span>the<span class="markdown"> specified position.  The only currently accepted value is &quot;end&quot;, which </span>will<span class="markdown"> jump to </span>the<span class="markdown"> end of </span>the<span class="markdown"> reel.</span><br><span class="line"><span class="bullet">*</span><br><span class="line"></span><span class="bullet">* </span>@sign public Number .reelPosition()</span><br><span class="line"><span class="bullet">* </span>@returns The current frame number</span><br><span class="line"><span class="bullet">*</span><br><span class="line"></span>*/</span></span></span><br><span class="line">reelPosition: function(position) {</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>._currentReel === <span class="keyword">null</span>)</span><br><span class="line">		<span class="keyword">throw</span>(<span class="string">&quot;No active reel.&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (arguments.length === <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>._currentReel.currentFrame;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> progress,</span><br><span class="line">		l = <span class="keyword">this</span>._currentReel.frames.length;</span><br><span class="line">	<span class="keyword">if</span> (position === <span class="string">&quot;end&quot;</span>)</span><br><span class="line">		position = l - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (position &lt; <span class="number">1</span> &amp;&amp; position &gt; <span class="number">0</span>) {</span><br><span class="line">		progress = position;</span><br><span class="line">		position = Math.floor(l * progress);</span><br><span class="line">	} <span class="keyword">else</span> {</span><br><span class="line">		<span class="keyword">if</span> (position !== Math.floor(position))</span><br><span class="line">			<span class="keyword">throw</span>(<span class="string">&quot;Position &quot;</span> + position + <span class="string">&quot; is invalid.&quot;</span>);</span><br><span class="line">		<span class="keyword">if</span> (position &lt; <span class="number">0</span>)</span><br><span class="line">			position = l - <span class="number">1</span> + position;</span><br><span class="line">		progress = position / l;</span><br><span class="line">	}</span><br><span class="line">	<span class="comment">// cap to last frame</span></span><br><span class="line">	position = Math.min(position, l-<span class="number">1</span>);</span><br><span class="line">	position = Math.max(position, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">this</span>._setProgress(progress);</span><br><span class="line">	<span class="keyword">this</span>._setFrame(position);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Bound to &quot;EnterFrame&quot;.  Progresses the animation by dt, changing the frame if necessary.</span></span><br><span class="line"><span class="comment">// dt is multiplied by the animationSpeed property</span></span><br><span class="line">_animationTick: function(frameData) {</span><br><span class="line">	<span class="keyword">var</span> currentReel = <span class="keyword">this</span>._reels[<span class="keyword">this</span>._currentReelId];</span><br><span class="line">	currentReel.easing.tick(frameData.dt * <span class="keyword">this</span>.animationSpeed);</span><br><span class="line">	<span class="keyword">var</span> progress = currentReel.easing.value();</span><br><span class="line">	<span class="keyword">var</span> frameNumber = Math.min( Math.floor(currentReel.frames.length * progress), currentReel.frames.length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">this</span>._setFrame(frameNumber);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(currentReel.easing.complete === <span class="keyword">true</span>){</span><br><span class="line">		<span class="keyword">this</span>.pauseAnimation();</span><br><span class="line">		<span class="keyword">this</span>.trigger(<span class="string">&quot;AnimationEnd&quot;</span>, <span class="keyword">this</span>._currentReel);</span><br><span class="line">	}</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Set the current frame and update the displayed sprite</span></span><br><span class="line"><span class="comment">// The actual progress for the animation must be set seperately.</span></span><br><span class="line">_setFrame: function(frameNumber) {</span><br><span class="line">	<span class="keyword">var</span> currentReel = <span class="keyword">this</span>._currentReel;</span><br><span class="line">	<span class="keyword">if</span> (frameNumber === currentReel.currentFrame)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	currentReel.currentFrame = frameNumber;</span><br><span class="line">	<span class="keyword">this</span>._updateSprite();</span><br><span class="line">	<span class="keyword">this</span>.trigger(<span class="string">&quot;FrameChange&quot;</span>, currentReel);</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update the displayed sprite.</span></span><br><span class="line">_updateSprite: function() {</span><br><span class="line">	<span class="keyword">var</span> currentReel = <span class="keyword">this</span>._currentReel;</span><br><span class="line">	<span class="keyword">var</span> pos = currentReel.frames[currentReel.currentFrame];</span><br><span class="line">	<span class="keyword">this</span>.sprite(pos[<span class="number">0</span>], pos[<span class="number">1</span>]); <span class="comment">// .sprite will trigger redraw</span></span><br><span class="line"></span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Sets the internal state of the current reel&apos;s easing object</span></span><br><span class="line">_setProgress: function(progress, repeats) {</span><br><span class="line">	<span class="keyword">this</span>._currentReel.easing.setProgress(progress, repeats);</span><br><span class="line"></span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/**@</span><br><span class="line"><span class="bullet">* </span>#.isPlaying</span><br><span class="line"><span class="bullet">* </span>@comp SpriteAnimation</span><br><span class="line"><span class="bullet">* </span>@sign public Boolean .isPlaying([String reelId])</span><br><span class="line"><span class="bullet">* </span>@param reelId - The reelId of </span>the<span class="markdown"> reel we wish to examine</span><br><span class="line"><span class="bullet">* </span>@returns The current animation state</span><br><span class="line"><span class="bullet">*</span><br><span class="line"></span><span class="bullet">* </span>Determines if </span>the<span class="markdown"> specified animation is currently playing. If no reelId is specified,</span><br><span class="line"><span class="bullet">* </span>checks if any animation is playing.</span><br><span class="line"><span class="bullet">*</span><br><span class="line"></span><span class="bullet">* </span>@example</span><br><span class="line">*</span></span></span><br></pre></td></tr></table></figure>

	* myEntity.isPlaying() // is any animation playing
	* myEntity.isPlaying(&apos;PlayerRunning&apos;) // is the PlayerRunning animation playing
	* <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">	*/</span><br><span class="line">	isPlaying: <span class="function"><span class="keyword">function</span> <span class="params">(reelId)</span> </span>{</span><br><span class="line">		<span class="keyword">if</span> (!this._isPlaying) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (!reelId) <span class="keyword">return</span> !!this._currentReelId;</span><br><span class="line">		<span class="keyword">return</span> this._currentReelId === reelId;</span><br><span class="line">	},</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**@</span><br><span class="line">	* #.getReel</span><br><span class="line">	* <span class="doctag">@comp</span> SpriteAnimation</span><br><span class="line">	* <span class="doctag">@sign</span> public Reel .getReel()</span><br><span class="line">	* <span class="doctag">@returns</span> The current reel, or null if there is no active reel</span><br><span class="line">	*</span><br><span class="line">	* <span class="doctag">@sign</span> public Reel .getReel(reelId)</span><br><span class="line">	* <span class="doctag">@param</span> reelId - The id of the reel to fetch.</span><br><span class="line">	* <span class="doctag">@returns</span> The specified reel, or `undefined` if no such reel exists.</span><br><span class="line">	*</span><br><span class="line">	*/</span></span><br><span class="line">	getReel: <span class="function"><span class="keyword">function</span> <span class="params">(reelId)</span> </span>{</span><br><span class="line">		<span class="keyword">if</span> (arguments.length === <span class="number">0</span>){</span><br><span class="line">			<span class="keyword">if</span> (!this._currentReelId) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">			reelId = this._currentReelId;</span><br><span class="line">		}</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> this._reels[reelId];</span><br><span class="line">	}</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">},{<span class="string">&quot;../core/core.js&quot;</span>:<span class="number">7</span>}],<span class="number">32</span>:[<span class="function"><span class="keyword">function</span><span class="params">(require,module,exports)</span></span>{</span><br><span class="line"><span class="keyword">var</span> Crafty = <span class="keyword">require</span>(<span class="string">&apos;../core/core.js&apos;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Define some variables required for webgl</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> SPRITE_VERTEX_SHADER = <span class="string">&quot;attribute vec2 aPosition;\nattribute vec3 aOrientation;\nattribute vec2 aLayer;\nattribute vec2 aTextureCoord;\n\nvarying mediump vec3 vTextureCoord;\n\nuniform vec4 uViewport;\nuniform mediump vec2 uTextureDimensions;\n\nmat4 viewportScale = mat4(2.0 / uViewport.z, 0, 0, 0,    0, -2.0 / uViewport.w, 0,0,    0, 0,1,0,    -1,+1,0,1);\nvec4 viewportTranslation = vec4(uViewport.xy, 0, 0);\n\nvoid main() {\n  vec2 pos = aPosition;\n  vec2 entityOrigin = aOrientation.xy;\n  mat2 entityRotationMatrix = mat2(cos(aOrientation.z), sin(aOrientation.z), -sin(aOrientation.z), cos(aOrientation.z));\n  \n  pos = entityRotationMatrix * (pos - entityOrigin) + entityOrigin ;\n  gl_Position = viewportScale * (viewportTranslation + vec4(pos, 1.0/(1.0+exp(aLayer.x) ), 1) );\n  vTextureCoord = vec3(aTextureCoord, aLayer.y);\n}&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> SPRITE_FRAGMENT_SHADER = <span class="string">&quot;varying mediump vec3 vTextureCoord;\n  \nuniform sampler2D uSampler;\nuniform mediump vec2 uTextureDimensions;\n\nvoid main(void) {\n  highp vec2 coord =   vTextureCoord.xy / uTextureDimensions;\n  mediump vec4 base_color = texture2D(uSampler, coord);\n  gl_FragColor = vec4(base_color.rgb*base_color.a*vTextureCoord.z, base_color.a*vTextureCoord.z);\n}&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> SPRITE_ATTRIBUTE_LIST = [</span><br><span class="line">    {name:<span class="string">&quot;aPosition&quot;</span>, width: <span class="number">2</span>},</span><br><span class="line">    {name:<span class="string">&quot;aOrientation&quot;</span>, width: <span class="number">3</span>},</span><br><span class="line">    {name:<span class="string">&quot;aLayer&quot;</span>, width:<span class="number">2</span>},</span><br><span class="line">    {name:<span class="string">&quot;aTextureCoord&quot;</span>,  width: <span class="number">2</span>}</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">Crafty.extend({</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #Crafty.sprite</span><br><span class="line">     * <span class="doctag">@category</span> Graphics</span><br><span class="line">     * <span class="doctag">@sign</span> public this Crafty.sprite([Number tile, [Number tileh]], String url, Object map[, Number paddingX[, Number paddingY[, Boolean paddingAroundBorder]]])</span><br><span class="line">     * <span class="doctag">@param</span> tile - Tile size of the sprite map, defaults to 1</span><br><span class="line">     * <span class="doctag">@param</span> tileh - Height of the tile; if provided, tile is interpreted as the width</span><br><span class="line">     * <span class="doctag">@param</span> url - URL of the sprite image</span><br><span class="line">     * <span class="doctag">@param</span> map - Object where the key is what becomes a new component and the value points to a position on the sprite map</span><br><span class="line">     * <span class="doctag">@param</span> paddingX - Horizontal space in between tiles. Defaults to 0.</span><br><span class="line">     * <span class="doctag">@param</span> paddingY - Vertical space in between tiles. Defaults to paddingX.</span><br><span class="line">     * <span class="doctag">@param</span> paddingAroundBorder - If padding should be applied around the border of the sprite sheet. If enabled the first tile starts at (paddingX,paddingY) instead of (0,0). Defaults to false.</span><br><span class="line">     *</span><br><span class="line">     * Generates components based on positions in a sprite image to be applied to entities.</span><br><span class="line">     *</span><br><span class="line">     * Accepts a tile size, URL and map for the name of the sprite and its position.</span><br><span class="line">     *</span><br><span class="line">     * The position must be an array containing the position of the sprite where index `0`</span><br><span class="line">     * is the `x` position, `1` is the `y` position and optionally `2` is the width and `3`</span><br><span class="line">     * is the height. If the sprite map has padding, pass the values for the `x` padding</span><br><span class="line">     * or `y` padding. If they are the same, just add one value.</span><br><span class="line">     *</span><br><span class="line">     * If the sprite image has no consistent tile size, `1` or no argument need be</span><br><span class="line">     * passed for tile size.</span><br><span class="line">     *</span><br><span class="line">     * Entities that add the generated components are also given the `2D` component, and</span><br><span class="line">     * a component called `Sprite`.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@example</span></span><br><span class="line">     *</span></span><br></pre></td></tr></table></figure>

     * Crafty.sprite(&quot;imgs/spritemap6.png&quot;, {flower:[0,0,20,30]});
     * var flower_entity = Crafty.e(&quot;2D, DOM, flower&quot;);
     * <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">* The <span class="keyword">first</span> <span class="built_in">line</span> creates <span class="operator">a</span> component called `flower` associated <span class="operator">with</span> <span class="operator">the</span> sub-image <span class="operator">of</span></span><br><span class="line">* spritemap6.png <span class="operator">with</span> top-left corner (<span class="number">0</span>,<span class="number">0</span>), width <span class="number">20</span> pixels, <span class="operator">and</span> height <span class="number">30</span> pixels.</span><br><span class="line">* The <span class="keyword">second</span> <span class="built_in">line</span> creates <span class="operator">an</span> entity <span class="operator">with</span> that image. (Note: The `<span class="number">2</span>D` is <span class="operator">not</span> really</span><br><span class="line">* necessary here, because adding <span class="operator">the</span> `flower` component automatically also adds <span class="operator">the</span></span><br><span class="line">* `<span class="number">2</span>D` component.)</span><br><span class="line">*</span><br></pre></td></tr></table></figure>

     * Crafty.sprite(50, &quot;imgs/spritemap6.png&quot;, {flower:[0,0], grass:[0,1,3,1]});
     * <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* In <span class="keyword">this</span> <span class="keyword">case</span>, the `flower` component is pixels <span class="number">0</span> &lt;= x &lt; <span class="number">50</span>, <span class="number">0</span> &lt;= y &lt; <span class="number">50</span>, and the</span><br><span class="line">* `grass` component is pixels <span class="number">0</span> &lt;= x &lt; <span class="number">150</span>, <span class="number">50</span> &lt;= y &lt; <span class="number">100.</span> (The `<span class="number">3</span>` means grass has a</span><br><span class="line">* width of <span class="number">3</span> tiles, i.e. <span class="number">150</span> pixels.)</span><br><span class="line">*</span><br></pre></td></tr></table></figure>

     * Crafty.sprite(50, 100, &quot;imgs/spritemap6.png&quot;, {flower:[0,0], grass:[0,1]}, 10);
     * <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line">     * In <span class="keyword">this</span> <span class="keyword">case</span>, <span class="keyword">each</span> tile <span class="keyword">is</span> <span class="number">50</span>x100, and there <span class="keyword">is</span> a spacing of <span class="number">10</span> pixels between</span><br><span class="line">     * consecutive tiles. So `flower` <span class="keyword">is</span> pixels <span class="number">0</span> &lt;= x &lt; <span class="number">50</span>, <span class="number">0</span> &lt;= y &lt; <span class="number">100</span>, and `grass` <span class="keyword">is</span></span><br><span class="line">     * pixels <span class="number">0</span> &lt;= x &lt; <span class="number">50</span>, <span class="number">110</span> &lt;= y &lt; <span class="number">210.</span></span><br><span class="line">     *</span><br><span class="line">     * @see Sprite</span><br><span class="line">     */</span><br><span class="line">    sprite: <span class="function"><span class="keyword">function</span> <span class="params">(tile, tileh, url, map, paddingX, paddingY, paddingAroundBorder)</span> </span>{</span><br><span class="line">        <span class="keyword">var</span> spriteName, temp, x, y, w, h, img;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//if no tile value, default to 1.</span></span><br><span class="line">        <span class="comment">//(if the first passed argument is a string, it must be the url.)</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> tile === <span class="string">&quot;string&quot;</span>) {</span><br><span class="line">            paddingY = paddingX;</span><br><span class="line">            paddingX = map;</span><br><span class="line">            map = tileh;</span><br><span class="line">            url = tile;</span><br><span class="line">            tile = <span class="number">1</span>;</span><br><span class="line">            tileh = <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> tileh == <span class="string">&quot;string&quot;</span>) {</span><br><span class="line">            paddingY = paddingX;</span><br><span class="line">            paddingX = map;</span><br><span class="line">            map = url;</span><br><span class="line">            url = tileh;</span><br><span class="line">            tileh = tile;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//if no paddingY, use paddingX</span></span><br><span class="line">        <span class="keyword">if</span> (!paddingY &amp;&amp; paddingX) paddingY = paddingX;</span><br><span class="line">        paddingX = parseInt(paddingX || <span class="number">0</span>, <span class="number">10</span>); <span class="comment">//just incase</span></span><br><span class="line">        paddingY = parseInt(paddingY || <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> markSpritesReady = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">this</span>.ready = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">this</span>.trigger(<span class="string">&quot;Invalidate&quot;</span>);</span><br><span class="line">        };</span><br><span class="line"></span><br><span class="line">        img = Crafty.asset(url);</span><br><span class="line">        <span class="keyword">if</span> (!img) {</span><br><span class="line">            img = <span class="keyword">new</span> Image();</span><br><span class="line">            img.src = url;</span><br><span class="line">            Crafty.asset(url, img);</span><br><span class="line">            img.onload = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">                <span class="comment">//all components with this img are now ready</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> spriteName <span class="keyword">in</span> map) {</span><br><span class="line">                    Crafty(spriteName).<span class="keyword">each</span>(markSpritesReady);</span><br><span class="line">                }</span><br><span class="line">            };</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> sharedSpriteInit = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">this</span>.requires(<span class="string">&quot;2D, Sprite&quot;</span>);</span><br><span class="line">            <span class="keyword">this</span>.__trim = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>];</span><br><span class="line">            <span class="keyword">this</span>.__image = url;</span><br><span class="line">            <span class="keyword">this</span>.__coord = [<span class="keyword">this</span>.__coord[<span class="number">0</span>], <span class="keyword">this</span>.__coord[<span class="number">1</span>], <span class="keyword">this</span>.__coord[<span class="number">2</span>], <span class="keyword">this</span>.__coord[<span class="number">3</span>]];</span><br><span class="line">            <span class="keyword">this</span>.__tile = tile;</span><br><span class="line">            <span class="keyword">this</span>.__tileh = tileh;</span><br><span class="line">            <span class="keyword">this</span>.__padding = [paddingX, paddingY];</span><br><span class="line">            <span class="keyword">this</span>.__padBorder = paddingAroundBorder;</span><br><span class="line">            <span class="keyword">this</span>.sprite(<span class="keyword">this</span>.__coord[<span class="number">0</span>], <span class="keyword">this</span>.__coord[<span class="number">1</span>], <span class="keyword">this</span>.__coord[<span class="number">2</span>], <span class="keyword">this</span>.__coord[<span class="number">3</span>]);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">this</span>.img = img;</span><br><span class="line">            <span class="comment">//draw now</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.img.complete &amp;&amp; <span class="keyword">this</span>.img.width &gt; <span class="number">0</span>) {</span><br><span class="line">                <span class="keyword">this</span>.ready = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">this</span>.trigger(<span class="string">&quot;Invalidate&quot;</span>);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">//set the width and height to the sprite size</span></span><br><span class="line">            <span class="keyword">this</span>.w = <span class="keyword">this</span>.__coord[<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">this</span>.h = <span class="keyword">this</span>.__coord[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.has(<span class="string">&quot;WebGL&quot;</span>)){</span><br><span class="line">                <span class="keyword">this</span>._establishShader(<span class="keyword">this</span>.__image, SPRITE_FRAGMENT_SHADER, SPRITE_VERTEX_SHADER, SPRITE_ATTRIBUTE_LIST);</span><br><span class="line">                <span class="keyword">this</span>.program.setTexture( <span class="keyword">this</span>.webgl.makeTexture(<span class="keyword">this</span>.__image, <span class="keyword">this</span>.img, <span class="literal">false</span>) );</span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (spriteName <span class="keyword">in</span> map) {</span><br><span class="line">            <span class="keyword">if</span> (!map.hasOwnProperty(spriteName)) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            temp = map[spriteName];</span><br><span class="line"></span><br><span class="line">            <span class="comment">//generates sprite components for each tile in the map</span></span><br><span class="line">            Crafty.c(spriteName, {</span><br><span class="line">                ready: <span class="literal">false</span>,</span><br><span class="line">                __coord: [temp[<span class="number">0</span>], temp[<span class="number">1</span>], temp[<span class="number">2</span>] || <span class="number">1</span>, temp[<span class="number">3</span>] || <span class="number">1</span>],</span><br><span class="line"></span><br><span class="line">                init: sharedSpriteInit</span><br><span class="line">            });</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Sprite</span><br><span class="line"> * @category Graphics</span><br><span class="line"> * @trigger Invalidate - when the sprites change</span><br><span class="line"> *</span><br><span class="line"> * A component for using tiles in a sprite map.  </span><br><span class="line"> *</span><br><span class="line"> * This is automatically added to entities which use the components created by `Crafty.sprite` or `Crafty.load`.</span><br><span class="line"> * Since these are also used to define tile size, you&apos;ll rarely need to use this components methods directly.</span><br><span class="line"> *</span><br><span class="line"> * @see Crafty.sprite, Crafty.load</span><br><span class="line"> */</span></span><br><span class="line">Crafty.c(<span class="string">&quot;Sprite&quot;</span>, {</span><br><span class="line">    __image: <span class="string">&apos;&apos;</span>,</span><br><span class="line">    <span class="comment">/*</span><br><span class="line">     * #.__tile</span><br><span class="line">     * @comp Sprite</span><br><span class="line">     *</span><br><span class="line">     * Horizontal sprite tile size.</span><br><span class="line">     */</span></span><br><span class="line">    __tile: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">/*</span><br><span class="line">     * #.__tileh</span><br><span class="line">     * @comp Sprite</span><br><span class="line">     *</span><br><span class="line">     * Vertical sprite tile size.</span><br><span class="line">     */</span></span><br><span class="line">    __tileh: <span class="number">0</span>,</span><br><span class="line">    __padding: <span class="literal">null</span>,</span><br><span class="line">    __trim: <span class="literal">null</span>,</span><br><span class="line">    img: <span class="literal">null</span>,</span><br><span class="line">    <span class="comment">//ready is changed to true in Crafty.sprite</span></span><br><span class="line">    ready: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    init: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.__trim = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>];</span><br><span class="line">        <span class="keyword">this</span>.bind(<span class="string">&quot;Draw&quot;</span>, <span class="keyword">this</span>._drawSprite);</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    remove: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.unbind(<span class="string">&quot;Draw&quot;</span>, <span class="keyword">this</span>._drawSprite);</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    _drawSprite: <span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>{</span><br><span class="line">        <span class="keyword">var</span> co = e.co,</span><br><span class="line">                pos = e.pos,</span><br><span class="line">                context = e.ctx;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (e.type === <span class="string">&quot;canvas&quot;</span>) {</span><br><span class="line">            <span class="comment">//draw the image on the canvas element</span></span><br><span class="line">            context.drawImage(<span class="keyword">this</span>.img, <span class="comment">//image element</span></span><br><span class="line">                co.x, <span class="comment">//x position on sprite</span></span><br><span class="line">                co.y, <span class="comment">//y position on sprite</span></span><br><span class="line">                co.w, <span class="comment">//width on sprite</span></span><br><span class="line">                co.h, <span class="comment">//height on sprite</span></span><br><span class="line">                pos._x, <span class="comment">//x position on canvas</span></span><br><span class="line">                pos._y, <span class="comment">//y position on canvas</span></span><br><span class="line">                pos._w, <span class="comment">//width on canvas</span></span><br><span class="line">                pos._h <span class="comment">//height on canvas</span></span><br><span class="line">            );</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (e.type === <span class="string">&quot;DOM&quot;</span>) {</span><br><span class="line">            <span class="comment">// Get scale (ratio of entity dimensions to sprite&apos;s dimensions)</span></span><br><span class="line">            <span class="comment">// If needed, we will scale up the entire sprite sheet, and then modify the position accordingly</span></span><br><span class="line">            <span class="keyword">var</span> vscale = <span class="keyword">this</span>._h / co.h,</span><br><span class="line">                hscale = <span class="keyword">this</span>._w / co.w,</span><br><span class="line">                style = <span class="keyword">this</span>._element.style,</span><br><span class="line">                bgColor = style.backgroundColor;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (bgColor === <span class="string">&quot;initial&quot;</span>) bgColor = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Don&apos;t change background if it&apos;s not necessary -- this can cause some browsers to reload the image</span></span><br><span class="line">            <span class="comment">// See [this chrome issue](https://code.google.com/p/chromium/issues/detail?id=102706)</span></span><br><span class="line">            <span class="keyword">var</span> newBackground = bgColor + <span class="string">&quot; url(&apos;&quot;</span> + <span class="keyword">this</span>.__image + <span class="string">&quot;&apos;) no-repeat&quot;</span>; </span><br><span class="line">            <span class="keyword">if</span> (newBackground !== style.background) {</span><br><span class="line">                style.background = newBackground;</span><br><span class="line">            }</span><br><span class="line">            style.backgroundPosition = <span class="string">&quot;-&quot;</span> + co.x * hscale + <span class="string">&quot;px -&quot;</span> + co.y * vscale + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">            <span class="comment">// style.backgroundSize must be set AFTER style.background!</span></span><br><span class="line">            <span class="keyword">if</span> (vscale != <span class="number">1</span> || hscale != <span class="number">1</span>) {</span><br><span class="line">                style.backgroundSize = (<span class="keyword">this</span>.img.width * hscale) + <span class="string">&quot;px&quot;</span> + <span class="string">&quot; &quot;</span> + (<span class="keyword">this</span>.img.height * vscale) + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (e.type === <span class="string">&quot;webgl&quot;</span>) {</span><br><span class="line">            <span class="comment">// Write texture coordinates</span></span><br><span class="line">            e.program.writeVector(<span class="string">&quot;aTextureCoord&quot;</span>,</span><br><span class="line">                co.x, co.y,</span><br><span class="line">                co.x, co.y + co.h,</span><br><span class="line">                co.x + co.w, co.y,</span><br><span class="line">                co.x + co.w, co.y + co.h</span><br><span class="line">            );</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.sprite</span><br><span class="line">     * @comp Sprite</span><br><span class="line">     * @sign public this .sprite(Number x, Number y[, Number w, Number h])</span><br><span class="line">     * @param x - X cell position</span><br><span class="line">     * @param y - Y cell position</span><br><span class="line">     * @param w - Width in cells. Optional.</span><br><span class="line">     * @param h - Height in cells. Optional.</span><br><span class="line">     *</span><br><span class="line">     * Uses a new location on the sprite map as its sprite. If w or h are ommitted, the width and height are not changed.</span><br><span class="line">     *</span><br><span class="line">     * Values should be in tiles or cells (not pixels).</span><br><span class="line">     *</span><br><span class="line">     * @example</span><br><span class="line">     *</span></span><br></pre></td></tr></table></figure>

     * Crafty.e(&quot;2D, DOM, Sprite&quot;)
     *   .sprite(0, 0, 2, 2);
     * <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"> */</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #.__coord</span><br><span class="line"> * <span class="doctag">@comp</span> Sprite</span><br><span class="line"> *</span><br><span class="line"> * The coordinate of the slide within the sprite in the format of [x, y, w, h].</span><br><span class="line"> */</span></span><br><span class="line"><span class="string">sprite:</span> function (x, y, w, h) {</span><br><span class="line">    <span class="keyword">this</span>.__coord = <span class="keyword">this</span>.__coord || [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.__coord[<span class="number">0</span>] = x * (<span class="keyword">this</span>.__tile + <span class="keyword">this</span>.__padding[<span class="number">0</span>]) + (<span class="keyword">this</span>.__padBorder ? this.__padding[0] : <span class="number">0</span>) + <span class="keyword">this</span>.__trim[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">this</span>.__coord[<span class="number">1</span>] = y * (<span class="keyword">this</span>.__tileh + <span class="keyword">this</span>.__padding[<span class="number">1</span>]) + (<span class="keyword">this</span>.__padBorder ? this.__padding[1] : <span class="number">0</span>) + <span class="keyword">this</span>.__trim[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> (typeof(w)!==<span class="string">&apos;undefined&apos;</span> &amp;&amp; typeof(h)!==<span class="string">&apos;undefined&apos;</span>) {</span><br><span class="line">        <span class="keyword">this</span>.__coord[<span class="number">2</span>] = <span class="keyword">this</span>.__trim[<span class="number">2</span>] || w * <span class="keyword">this</span>.__tile || <span class="keyword">this</span>.__tile;</span><br><span class="line">        <span class="keyword">this</span>.__coord[<span class="number">3</span>] = <span class="keyword">this</span>.__trim[<span class="number">3</span>] || h * <span class="keyword">this</span>.__tileh || <span class="keyword">this</span>.__tileh;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.trigger(<span class="string">&quot;Invalidate&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #.crop</span><br><span class="line"> * <span class="doctag">@comp</span> Sprite</span><br><span class="line"> * <span class="doctag">@sign</span> public this .crop(Number x, Number y, Number w, Number h)</span><br><span class="line"> * <span class="doctag">@param</span> x - Offset x position</span><br><span class="line"> * <span class="doctag">@param</span> y - Offset y position</span><br><span class="line"> * <span class="doctag">@param</span> w - New width</span><br><span class="line"> * <span class="doctag">@param</span> h - New height</span><br><span class="line"> *</span><br><span class="line"> * If the entity needs to be smaller than the tile size, use this method to crop it.</span><br><span class="line"> *</span><br><span class="line"> * The values should be in pixels rather than tiles.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@example</span></span><br><span class="line"> *</span></span><br></pre></td></tr></table></figure>

     * Crafty.e(&quot;2D, DOM, Sprite&quot;)
     *   .crop(40, 40, 22, 23);
     * <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line">     */</span><br><span class="line">    crop: <span class="function"><span class="keyword">function</span> <span class="params">(x, y, w, h)</span> </span>{</span><br><span class="line">        <span class="keyword">var</span> old = <span class="keyword">this</span>._mbr || <span class="keyword">this</span>.pos();</span><br><span class="line">        <span class="keyword">this</span>.__trim = [];</span><br><span class="line">        <span class="keyword">this</span>.__trim[<span class="number">0</span>] = x;</span><br><span class="line">        <span class="keyword">this</span>.__trim[<span class="number">1</span>] = y;</span><br><span class="line">        <span class="keyword">this</span>.__trim[<span class="number">2</span>] = w;</span><br><span class="line">        <span class="keyword">this</span>.__trim[<span class="number">3</span>] = h;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.__coord[<span class="number">0</span>] += x;</span><br><span class="line">        <span class="keyword">this</span>.__coord[<span class="number">1</span>] += y;</span><br><span class="line">        <span class="keyword">this</span>.__coord[<span class="number">2</span>] = w;</span><br><span class="line">        <span class="keyword">this</span>.__coord[<span class="number">3</span>] = h;</span><br><span class="line">        <span class="keyword">this</span>._w = w;</span><br><span class="line">        <span class="keyword">this</span>._h = h;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.trigger(<span class="string">&quot;Invalidate&quot;</span>, old);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">},{<span class="string">&quot;../core/core.js&quot;</span>:<span class="number">7</span>}],<span class="number">33</span>:[<span class="function"><span class="keyword">function</span><span class="params">(require,module,exports)</span></span>{</span><br><span class="line"><span class="keyword">var</span> Crafty = require(<span class="string">&apos;../core/core.js&apos;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Text</span><br><span class="line"> * @category Graphics</span><br><span class="line"> * @trigger Invalidate - when the text is changed</span><br><span class="line"> * @requires Canvas or DOM</span><br><span class="line"> * Component to make a text entity.</span><br><span class="line"> *</span><br><span class="line"> * By default, text will have the style &quot;10px sans-serif&quot;.</span><br><span class="line"> *</span><br><span class="line"> * @note An entity with the text component is just text! If you want to write text</span><br><span class="line"> * inside an image, you need one entity for the text and another entity for the image.</span><br><span class="line"> * More tips for writing text inside an image: (1) Use the z-index (from 2D component)</span><br><span class="line"> * to ensure that the text is on top of the image, not the other way around; (2)</span><br><span class="line"> * use .attach() (from 2D component) to glue the text to the image so they move and</span><br><span class="line"> * rotate together.</span><br><span class="line"> *</span><br><span class="line"> * @note For DOM (but not canvas) text entities, various font settings (like</span><br><span class="line"> * text-decoration and text-align) can be set using `.css()` (see DOM component). But</span><br><span class="line"> * you cannot use `.css()` to set the properties which are controlled by `.textFont()`</span><br><span class="line"> * or `.textColor()` -- the settings will be ignored.</span><br><span class="line"> *</span><br><span class="line"> * @note If you use canvas text with glyphs that are taller than standard letters, portions of the glyphs might be cut off.</span><br><span class="line"> */</span></span><br><span class="line">Crafty.c(<span class="string">&quot;Text&quot;</span>, {</span><br><span class="line">    _text: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    defaultSize: <span class="string">&quot;10px&quot;</span>,</span><br><span class="line">    defaultFamily: <span class="string">&quot;sans-serif&quot;</span>,</span><br><span class="line">    defaultVariant: <span class="string">&quot;normal&quot;</span>,</span><br><span class="line">    defaultLineHeight: <span class="string">&quot;normal&quot;</span>,</span><br><span class="line">    ready: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    init: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.requires(<span class="string">&quot;2D&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>._textFont = {</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;weight&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;size&quot;</span>: <span class="keyword">this</span>.defaultSize,</span><br><span class="line">            <span class="string">&quot;lineHeight&quot;</span>:<span class="keyword">this</span>.defaultLineHeight,</span><br><span class="line">            <span class="string">&quot;family&quot;</span>: <span class="keyword">this</span>.defaultFamily,</span><br><span class="line">            <span class="string">&quot;variant&quot;</span>: <span class="keyword">this</span>.defaultVariant</span><br><span class="line">        };</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.bind(<span class="string">&quot;Draw&quot;</span>, <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>{</span><br><span class="line">            <span class="keyword">var</span> font = <span class="keyword">this</span>._fontString();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (e.type === <span class="string">&quot;DOM&quot;</span>) {</span><br><span class="line">                <span class="keyword">var</span> el = <span class="keyword">this</span>._element,</span><br><span class="line">                    style = el.style;</span><br><span class="line"></span><br><span class="line">                style.color = <span class="keyword">this</span>._textColor;</span><br><span class="line">                style.font = font;</span><br><span class="line">                el.innerHTML = <span class="keyword">this</span>._text;</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (e.type === <span class="string">&quot;canvas&quot;</span>) {</span><br><span class="line">                <span class="keyword">var</span> context = e.ctx;</span><br><span class="line"></span><br><span class="line">                context.save();</span><br><span class="line"></span><br><span class="line">                context.textBaseline = <span class="string">&quot;top&quot;</span>;</span><br><span class="line">                context.fillStyle = <span class="keyword">this</span>._textColor || <span class="string">&quot;rgb(0,0,0)&quot;</span>;</span><br><span class="line">                context.font = font;</span><br><span class="line"></span><br><span class="line">                context.fillText(<span class="keyword">this</span>._text, e.pos._x, e.pos._y);</span><br><span class="line"></span><br><span class="line">                context.restore();</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">// takes a CSS font-size string and gets the height of the resulting font in px</span></span><br><span class="line">    _getFontHeight: (<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="comment">// regex for grabbing the first string of letters</span></span><br><span class="line">        <span class="keyword">var</span> re = /([a-zA-Z]+)\b/;</span><br><span class="line">        <span class="comment">// From the CSS spec.  &quot;em&quot; and &quot;ex&quot; are undefined on a canvas.</span></span><br><span class="line">        <span class="keyword">var</span> multipliers = {</span><br><span class="line">            <span class="string">&quot;px&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;pt&quot;</span>: <span class="number">4</span>/<span class="number">3</span>,</span><br><span class="line">            <span class="string">&quot;pc&quot;</span>: <span class="number">16</span>,</span><br><span class="line">            <span class="string">&quot;cm&quot;</span>: <span class="number">96</span>/<span class="number">2.54</span>,</span><br><span class="line">            <span class="string">&quot;mm&quot;</span>: <span class="number">96</span>/<span class="number">25.4</span>,</span><br><span class="line">            <span class="string">&quot;in&quot;</span>: <span class="number">96</span>,</span><br><span class="line">            <span class="string">&quot;em&quot;</span>: <span class="literal">undefined</span>,</span><br><span class="line">            <span class="string">&quot;ex&quot;</span>: <span class="literal">undefined</span></span><br><span class="line">        };</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(font)</span></span>{</span><br><span class="line">            <span class="keyword">var</span> number = parseFloat(font);</span><br><span class="line">            <span class="keyword">var</span> match = re.exec(font);</span><br><span class="line">            <span class="keyword">var</span> unit =  match ? match[<span class="number">1</span>] : <span class="string">&quot;px&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (multipliers[unit] !== <span class="literal">undefined</span>)</span><br><span class="line">                <span class="keyword">return</span> Math.ceil(number * multipliers[unit]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> Math.ceil(number);</span><br><span class="line">        };</span><br><span class="line">    })(),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.text</span><br><span class="line">     * @comp Text</span><br><span class="line">     * @sign public this .text(String text)</span><br><span class="line">     * @param text - String of text that will be inserted into the DOM or Canvas element.</span><br><span class="line">     *</span><br><span class="line">     * @sign public this .text(Function textGenerator)</span><br><span class="line">     * @param textGenerator - A function that returns a string.  </span><br><span class="line">     *        It will be immediately invoked in the context of the entity, with the result used as the text to display.</span><br><span class="line">     *</span><br><span class="line">     * This method will update the text inside the entity.</span><br><span class="line">     *</span><br><span class="line">     * If you need to reference attributes on the entity itself you can pass a function instead of a string.</span><br><span class="line">     *</span><br><span class="line">     * @example</span><br><span class="line">     *</span></span><br></pre></td></tr></table></figure>

     * Crafty.e(&quot;2D, DOM, Text&quot;).attr({ x: 100, y: 100 }).text(&quot;Look at me!!&quot;);
     *
     * Crafty.e(&quot;2D, DOM, Text&quot;).attr({ x: 100, y: 100 })
     *     .text(function () { return &quot;My position is &quot; + this._x });
     *
     * Crafty.e(&quot;2D, Canvas, Text&quot;).attr({ x: 100, y: 100 }).text(&quot;Look at me!!&quot;);
     *
     * Crafty.e(&quot;2D, Canvas, Text&quot;).attr({ x: 100, y: 100 })
     *     .text(function () { return &quot;My position is &quot; + this._x });
     * <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"> */</span><br><span class="line">text: <span class="function"><span class="keyword">function</span> <span class="params">(text)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (!(<span class="keyword">typeof</span> text !== <span class="string">&quot;undefined&quot;</span> &amp;&amp; text !== <span class="literal">null</span>)) <span class="keyword">return</span> <span class="keyword">this</span>._text;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> (text) == <span class="string">&quot;function&quot;</span>)</span><br><span class="line">        <span class="keyword">this</span>._text = text.call(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">this</span>._text = text;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.has(<span class="string">&quot;Canvas&quot;</span>) )</span><br><span class="line">        <span class="keyword">this</span>._resizeForCanvas();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.trigger(<span class="string">&quot;Invalidate&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment">// Calculates the height and width of text on the canvas</span></span><br><span class="line"><span class="comment">// Width is found by using the canvas measureText function</span></span><br><span class="line"><span class="comment">// Height is only estimated -- it calculates the font size in pixels, and sets the height to 110% of that.</span></span><br><span class="line">_resizeForCanvas: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">var</span> ctx = <span class="keyword">this</span>._drawContext;</span><br><span class="line">    ctx.font = <span class="keyword">this</span>._fontString();</span><br><span class="line">    <span class="keyword">this</span>.w = ctx.measureText(<span class="keyword">this</span>._text).width;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> size = (<span class="keyword">this</span>._textFont.size || <span class="keyword">this</span>.defaultSize);</span><br><span class="line">    <span class="keyword">this</span>.h = <span class="number">1.1</span> * <span class="keyword">this</span>._getFontHeight(size);</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment">// Returns the font string to use</span></span><br><span class="line">_fontString: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._textFont.type + <span class="string">&apos; &apos;</span> + <span class="keyword">this</span>._textFont.variant  + <span class="string">&apos; &apos;</span> + <span class="keyword">this</span>._textFont.weight + <span class="string">&apos; &apos;</span> + <span class="keyword">this</span>._textFont.size  + <span class="string">&apos; / &apos;</span> + <span class="keyword">this</span>._textFont.lineHeight + <span class="string">&apos; &apos;</span> + <span class="keyword">this</span>._textFont.family;</span><br><span class="line">},</span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #.textColor</span><br><span class="line"> * @comp Text</span><br><span class="line"> * @sign public this .textColor(String color)</span><br><span class="line"> * @param color - The color in name, hex, rgb or rgba</span><br><span class="line"> *</span><br><span class="line"> * Change the color of the text. You can use HEX, rgb and rgba colors. </span><br><span class="line"> *</span><br><span class="line"> * If you want the text to be transparent, you should use rgba where you can define alphaChannel.</span><br><span class="line"> *</span><br><span class="line"> * @example</span><br><span class="line"> *</span></span><br></pre></td></tr></table></figure>

     * Crafty.e(&quot;2D, DOM, Text&quot;).attr({ x: 100, y: 100 }).text(&quot;Look at me!!&quot;)
     *   .textColor(&apos;#FF0000&apos;);
     *
     * Crafty.e(&quot;2D, Canvas, Text&quot;).attr({ x: 100, y: 100 }).text(&apos;Look at me!!&apos;)
     *   .textColor(&apos;rgba(0, 255, 0, 0.5)&apos;);
     *
     * Crafty.e(&quot;2D, Canvas, Text&quot;).attr({ x: 100, y: 100 }).text(&apos;Look at me!!&apos;)
     *   .textColor(&apos;white&apos;);
     * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">*</span> <span class="comment">@see Crafty.assignColor</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">textColor: function (color) {</span><br><span class="line">    Crafty.assignColor(color, this);</span><br><span class="line">    this._textColor = <span class="string">&quot;rgba(&quot;</span> + this._red + <span class="string">&quot;, &quot;</span> + this._green + <span class="string">&quot;, &quot;</span> + this._blue + <span class="string">&quot;, &quot;</span> + this._strength + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    this.trigger(<span class="string">&quot;Invalidate&quot;</span>);</span><br><span class="line">    return this;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span>@</span><br><span class="line"> <span class="keyword">*</span> <span class="comment">#.textFont</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@comp Text</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@triggers Invalidate</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@sign public this .textFont(String key, * value)</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param key - Property of the entity to modify</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param value - Value to set the property to</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@sign public this .textFont(Object map)</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param map - Object where the key is the property to modify and the value as the property value</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> Use this method to set font property of the text entity.  Possible values are: type, weight, size, family, lineHeight, and variant.</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="keyword">When</span> rendered by the canvas, lineHeight and variant will be ignored.</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@example</span></span><br><span class="line"> <span class="keyword">*</span></span><br></pre></td></tr></table></figure>

     * Crafty.e(&quot;2D, DOM, Text&quot;).textFont({ type: &apos;italic&apos;, family: &apos;Arial&apos; });
     * Crafty.e(&quot;2D, Canvas, Text&quot;).textFont({ size: &apos;20px&apos;, weight: &apos;bold&apos; });
     *
     * Crafty.e(&quot;2D, Canvas, Text&quot;).textFont(&quot;type&quot;, &quot;italic&quot;);
     * Crafty.e(&quot;2D, Canvas, Text&quot;).textFont(&quot;type&quot;); // italic
     * <figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"> */</span><br><span class="line"><span class="built_in">textFont</span>: function (<span class="variable">key</span>, value) {</span><br><span class="line">    <span class="keyword">if</span> (arguments.length === <span class="number">1</span>) {</span><br><span class="line">        <span class="comment">//if just the key, return the value</span></span><br><span class="line">        <span class="keyword">if</span> (typeof <span class="variable">key</span> === <span class="string">&quot;string&quot;</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>._textFont[<span class="variable">key</span>];</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (typeof <span class="variable">key</span> === <span class="string">&quot;object&quot;</span>) {</span><br><span class="line">            <span class="keyword">for</span> (var propertyKey in <span class="variable">key</span>) {</span><br><span class="line">                <span class="keyword">if</span>(propertyKey == <span class="string">&apos;family&apos;</span>){</span><br><span class="line">                    <span class="keyword">this</span>._textFont[propertyKey] = <span class="string">&quot;&apos;&quot;</span> + <span class="variable">key</span>[propertyKey] + <span class="string">&quot;&apos;&quot;</span>;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">this</span>._textFont[propertyKey] = <span class="variable">key</span>[propertyKey];</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">this</span>._textFont[<span class="variable">key</span>] = value;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.has(<span class="string">&quot;Canvas&quot;</span>) )</span><br><span class="line">        <span class="keyword">this</span>._resizeForCanvas();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.trigger(<span class="string">&quot;Invalidate&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">},</span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #.unselectable</span><br><span class="line"> * @comp Text</span><br><span class="line"> * @triggers Invalidate</span><br><span class="line"> * @sign public this .unselectable()</span><br><span class="line"> *</span><br><span class="line"> * This method sets the text so that it cannot be selected (highlighted) by dragging.</span><br><span class="line"> * (Canvas text can never be highlighted, so this only matters for DOM text.)</span><br><span class="line"> * Works by changing the css property &quot;user-select&quot; and its variants.</span><br><span class="line"> * </span><br><span class="line"> * Likewise, this sets the mouseover cursor to be &quot;default&quot; (arrow), not &quot;text&quot; (I-beam)</span><br><span class="line"> *</span><br><span class="line"> * @example</span><br><span class="line"> *</span></span><br></pre></td></tr></table></figure>

     * Crafty.e(&quot;2D, DOM, Text&quot;).text(&apos;This text cannot be highlighted!&apos;).unselectable();
     * <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">     */</span><br><span class="line">    unselectable: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">// http://stackoverflow.com/questions/826782/css-rule-to-disable-text-selection-highlighting</span></span><br><span class="line">        <span class="keyword">if</span> (this.has(<span class="string">&quot;DOM&quot;</span>)) {</span><br><span class="line">            this.css({</span><br><span class="line">                <span class="string">&apos;-webkit-touch-callout&apos;</span>: <span class="string">&apos;none&apos;</span>,</span><br><span class="line">                <span class="string">&apos;-webkit-user-select&apos;</span>: <span class="string">&apos;none&apos;</span>,</span><br><span class="line">                <span class="string">&apos;-khtml-user-select&apos;</span>: <span class="string">&apos;none&apos;</span>,</span><br><span class="line">                <span class="string">&apos;-moz-user-select&apos;</span>: <span class="string">&apos;none&apos;</span>,</span><br><span class="line">                <span class="string">&apos;-ms-user-select&apos;</span>: <span class="string">&apos;none&apos;</span>,</span><br><span class="line">                <span class="string">&apos;user-select&apos;</span>: <span class="string">&apos;none&apos;</span>,</span><br><span class="line">                <span class="string">&apos;cursor&apos;</span>: <span class="string">&apos;default&apos;</span></span><br><span class="line">            });</span><br><span class="line">            this.trigger(<span class="string">&quot;Invalidate&quot;</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> this;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">});</span><br><span class="line">},{<span class="string">&quot;../core/core.js&quot;</span>:<span class="number">7</span>}],<span class="number">34</span>:[<span class="function"><span class="keyword">function</span><span class="params">(require,module,exports)</span></span>{</span><br><span class="line"><span class="keyword">var</span> Crafty = <span class="keyword">require</span>(<span class="string">&apos;../core/core.js&apos;</span>),</span><br><span class="line">    document = window.document;</span><br><span class="line"></span><br><span class="line">Crafty.extend({</span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #Crafty.viewport</span><br><span class="line">     * <span class="doctag">@category</span> Stage</span><br><span class="line">     * <span class="doctag">@trigger</span> ViewportScroll - when the viewport&apos;s x or y coordinates change</span><br><span class="line">     * <span class="doctag">@trigger</span> ViewportScale - when the viewport&apos;s scale changes</span><br><span class="line">     * <span class="doctag">@trigger</span> ViewportResize - when the viewport&apos;s dimension&apos;s change</span><br><span class="line">     * <span class="doctag">@trigger</span> InvalidateViewport - when the viewport changes</span><br><span class="line">     * <span class="doctag">@trigger</span> StopCamera - when any camera animations should stop, such as at the start of a new animation.</span><br><span class="line">     * <span class="doctag">@trigger</span> CameraAnimationDone - when a camera animation reaches completion</span><br><span class="line">     *</span><br><span class="line">     * Viewport is essentially a 2D camera looking at the stage. Can be moved or zoomed, which</span><br><span class="line">     * in turn will react just like a camera moving in that direction.</span><br><span class="line">     *</span><br><span class="line">     * There are multiple camera animation methods available - these are the viewport methods with an animation time parameter and the `follow` method.</span><br><span class="line">     * Only one animation can run at a time. Starting a new animation will cancel the previous one and the appropriate events will be fired.</span><br><span class="line">     * </span><br><span class="line">     * Tip: At any given moment, the stuff that you can see is...</span><br><span class="line">     * </span><br><span class="line">     * `x` between `(-Crafty.viewport._x)` and `(-Crafty.viewport._x + (Crafty.viewport._width / Crafty.viewport._scale))`</span><br><span class="line">     * </span><br><span class="line">     * `y` between `(-Crafty.viewport._y)` and `(-Crafty.viewport._y + (Crafty.viewport._height / Crafty.viewport._scale))`</span><br><span class="line">     *</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@example</span></span><br><span class="line">     * Prevent viewport from adjusting itself when outside the game world.</span><br><span class="line">     * Scale the viewport so that entities appear twice as large.</span><br><span class="line">     * Then center the viewport on an entity over the duration of 3 seconds.</span><br><span class="line">     * After that animation finishes, start following the entity.</span><br><span class="line">     *</span></span><br></pre></td></tr></table></figure>

     * var ent = Crafty.e(&apos;2D, DOM&apos;).attr({x: 250, y: 250, w: 100, h: 100});
     *
     * Crafty.viewport.clampToEntities = false;
     * Crafty.viewport.scale(2);
     * Crafty.one(&quot;CameraAnimationDone&quot;, function() {
     *     Crafty.viewport.follow(ent, 0, 0);
     * });
     * Crafty.viewport.centerOn(ent, 3000);
     * <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"> */</span><br><span class="line">viewport: {</span><br><span class="line">    /**@</span><br><span class="line">     * <span class="comment">#Crafty.viewport.clampToEntities</span></span><br><span class="line">     * @comp Crafty.viewport</span><br><span class="line">     *</span><br><span class="line">     * Decides <span class="keyword">if</span> <span class="keyword">the</span> viewport functions should clamp <span class="keyword">to</span> game entities.</span><br><span class="line">     * When <span class="keyword">set</span> <span class="keyword">to</span> `<span class="constant">true</span>` functions such <span class="keyword">as</span> Crafty.viewport.mouselook() will <span class="keyword">not</span> allow you <span class="keyword">to</span> move <span class="keyword">the</span></span><br><span class="line">     * viewport <span class="keyword">over</span> areas <span class="keyword">of</span> <span class="keyword">the</span> game <span class="keyword">that</span> has no entities.</span><br><span class="line">     * For development <span class="keyword">it</span> can be useful <span class="keyword">to</span> <span class="keyword">set</span> this <span class="keyword">to</span> <span class="constant">false</span>.</span><br><span class="line">     */</span><br><span class="line">    clampToEntities: <span class="constant">true</span>,</span><br><span class="line">    _width: <span class="number">0</span>,</span><br><span class="line">    _height: <span class="number">0</span>,</span><br><span class="line">    /**@</span><br><span class="line">     * <span class="comment">#Crafty.viewport.x</span></span><br><span class="line">     * @comp Crafty.viewport</span><br><span class="line">     *</span><br><span class="line">     * Will move <span class="keyword">the</span> stage <span class="keyword">and</span> therefore <span class="keyword">every</span> visible entity along <span class="keyword">the</span> `x`</span><br><span class="line">     * axis <span class="keyword">in</span> <span class="keyword">the</span> opposite direction.</span><br><span class="line">     *</span><br><span class="line">     * When this value <span class="keyword">is</span> <span class="keyword">set</span>, <span class="keyword">it</span> will shift <span class="keyword">the</span> entire stage. This means <span class="keyword">that</span> entity</span><br><span class="line">     * positions are <span class="keyword">not</span> exactly <span class="keyword">where</span> they are <span class="function_start"><span class="keyword">on</span></span> screen. To <span class="keyword">get</span> <span class="keyword">the</span> exact position,</span><br><span class="line">     * simply add `Crafty.viewport.x` <span class="keyword">onto</span> <span class="keyword">the</span> entities `x` position.</span><br><span class="line">     */</span><br><span class="line">    _x: <span class="number">0</span>,</span><br><span class="line">    /**@</span><br><span class="line">     * <span class="comment">#Crafty.viewport.y</span></span><br><span class="line">     * @comp Crafty.viewport</span><br><span class="line">     *</span><br><span class="line">     * Will move <span class="keyword">the</span> stage <span class="keyword">and</span> therefore <span class="keyword">every</span> visible entity along <span class="keyword">the</span> `y`</span><br><span class="line">     * axis <span class="keyword">in</span> <span class="keyword">the</span> opposite direction.</span><br><span class="line">     *</span><br><span class="line">     * When this value <span class="keyword">is</span> <span class="keyword">set</span>, <span class="keyword">it</span> will shift <span class="keyword">the</span> entire stage. This means <span class="keyword">that</span> entity</span><br><span class="line">     * positions are <span class="keyword">not</span> exactly <span class="keyword">where</span> they are <span class="function_start"><span class="keyword">on</span></span> screen. To <span class="keyword">get</span> <span class="keyword">the</span> exact position,</span><br><span class="line">     * simply add `Crafty.viewport.y` <span class="keyword">onto</span> <span class="keyword">the</span> entities `y` position.</span><br><span class="line">     */</span><br><span class="line">    _y: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    /**@</span><br><span class="line">     * <span class="comment">#Crafty.viewport._scale</span></span><br><span class="line">     * @comp Crafty.viewport</span><br><span class="line">     *</span><br><span class="line">     * This value <span class="keyword">is</span> <span class="keyword">the</span> current scale (zoom) <span class="keyword">of</span> <span class="keyword">the</span> viewport. When <span class="keyword">the</span> value <span class="keyword">is</span> bigger than <span class="number">1</span>, everything</span><br><span class="line">     * looks bigger (zoomed <span class="keyword">in</span>). When <span class="keyword">the</span> value <span class="keyword">is</span> <span class="keyword">less than</span> <span class="number">1</span>, everything looks smaller (zoomed out). This</span><br><span class="line">     * <span class="keyword">does</span> <span class="keyword">not</span> alter <span class="keyword">the</span> size <span class="keyword">of</span> <span class="keyword">the</span> stage itself, just <span class="keyword">the</span> magnification <span class="keyword">of</span> what <span class="keyword">it</span> shows.</span><br><span class="line">     * </span><br><span class="line">     * This <span class="keyword">is</span> a <span class="command">read</span>-only <span class="keyword">property</span>: Do <span class="keyword">not</span> <span class="keyword">set</span> <span class="keyword">it</span> directly. Instead, use `Crafty.viewport.scale(...)`</span><br><span class="line">     * <span class="keyword">or</span> `Crafty.viewport.zoom(...)`</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    _scale: <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">    /**@</span><br><span class="line">     * <span class="comment">#Crafty.viewport.bounds</span></span><br><span class="line">     * @comp Crafty.viewport</span><br><span class="line">     *</span><br><span class="line">     * A rectangle which defines <span class="keyword">the</span> bounds <span class="keyword">of</span> <span class="keyword">the</span> viewport.</span><br><span class="line">     * It should be an object <span class="keyword">with</span> two properties, `max` <span class="keyword">and</span> `min`,</span><br><span class="line">     * which are each an object <span class="keyword">with</span> `x` <span class="keyword">and</span> `y` properties.</span><br><span class="line">     *</span><br><span class="line">     * If this <span class="keyword">property</span> <span class="keyword">is</span> null, Crafty uses <span class="keyword">the</span> bounding box <span class="keyword">of</span> all <span class="keyword">the</span> items</span><br><span class="line">     * <span class="function_start"><span class="keyword">on</span></span> <span class="keyword">the</span> stage.  This <span class="keyword">is</span> <span class="keyword">the</span> initial value.  (To prevent this behavior, <span class="keyword">set</span> `Crafty.viewport.clampToEntities` <span class="keyword">to</span> `<span class="constant">false</span>`)</span><br><span class="line">     *</span><br><span class="line">     * If you wish <span class="keyword">to</span> bound <span class="keyword">the</span> viewport along one axis <span class="keyword">but</span> <span class="keyword">not</span> <span class="keyword">the</span> other, you can use `-Infinity` <span class="keyword">and</span> `+Infinity` <span class="keyword">as</span> bounds.</span><br><span class="line">     *</span><br><span class="line">     * @see Crafty.viewport.clampToEntities</span><br><span class="line">     *</span><br><span class="line">     * @example</span><br><span class="line">     * Set <span class="keyword">the</span> bounds <span class="keyword">to</span> a <span class="number">500</span> <span class="keyword">by</span> <span class="number">500</span> square:</span><br><span class="line">     *</span><br><span class="line">     *</span><br></pre></td></tr></table></figure>

         * Crafty.viewport.bounds = {min:{x:0, y:0}, max:{x:500, y:500}};
         * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">bounds: null,</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span>@</span><br><span class="line"> <span class="keyword">*</span> <span class="comment">#Crafty.viewport.scroll</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@comp Crafty.viewport</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@sign Crafty.viewport.scroll(String axis, Number val)</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param axis - &apos;x&apos; or &apos;y&apos;</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param val - The new absolute position on the axis</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> Will move the viewport to the position given on the specified axis</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@example</span></span><br><span class="line"> <span class="keyword">*</span> Will move the camera 500 pixels right of its initial position, in effect</span><br><span class="line"> <span class="keyword">*</span> shifting everything in the viewport 500 pixels to the left.</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span></span><br></pre></td></tr></table></figure>

         * Crafty.viewport.scroll(&apos;_x&apos;, 500);
         * <figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> */</span><br><span class="line">scroll: function (axis, val) {</span><br><span class="line">    this[axis] = val;</span><br><span class="line">    Crafty.<span class="built_in">trigger</span>(<span class="string">&quot;ViewportScroll&quot;</span>);</span><br><span class="line">    Crafty.<span class="built_in">trigger</span>(<span class="string">&quot;InvalidateViewport&quot;</span>);</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">rect_object: { <span class="built_in">_x</span>: <span class="number">0</span>, _y: <span class="number">0</span>, _w: <span class="number">0</span>, _h: <span class="number">0</span>},</span><br><span class="line"></span><br><span class="line">rect: function () {</span><br><span class="line">    this.rect_object.<span class="built_in">_x</span> = -this.<span class="built_in">_x</span>;</span><br><span class="line">    this.rect_object._y = -this._y;</span><br><span class="line">    this.rect_object._w = this._width / this._scale;</span><br><span class="line">    this.rect_object._h = this._height / this._scale;</span><br><span class="line">    return this.rect_object;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@ </span><br><span class="line"></span><br><span class="line"> * #Crafty.viewport.pan</span><br><span class="line"> * @comp Crafty.viewport</span><br><span class="line"> * @sign public void Crafty.viewport.pan(Number dx, Number dy, Number time[, String|function easingFn])</span><br><span class="line"> * @param Number dx - The distance along the x axis</span><br><span class="line"> * @param Number dy - The distance along the y axis</span><br><span class="line"> * @param Number time - The duration in ms for the entire camera movement</span><br><span class="line"> * @param easingFn - A string or custom function specifying an easing.  (Defaults to linear behavior.)  See Crafty.easing for more information.</span><br><span class="line"> *</span><br><span class="line"> * Pans the camera a given number of pixels over the specified time</span><br><span class="line"> *</span><br><span class="line"> * @example</span><br><span class="line"> *</span></span><br></pre></td></tr></table></figure>

         * // pan the camera 100 px right and down over the duration of 2 seconds using linear easing behaviour
         * Crafty.viewport.pan(100, 100, 2000);
         * <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"> */</span><br><span class="line">pan: (<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">var</span> tweens = {}, i, bound = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">var</span> targetX, targetY, startingX, startingY, easing;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">enterFrame</span><span class="params">(e)</span> </span>{</span><br><span class="line">        easing.tick(e.dt);</span><br><span class="line">        <span class="keyword">var</span> v = easing.value();</span><br><span class="line">        Crafty.viewport.x = (<span class="number">1</span>-v) * startingX + v * targetX;</span><br><span class="line">        Crafty.viewport.y = (<span class="number">1</span>-v) * startingY + v * targetY;</span><br><span class="line">        Crafty.viewport._clamp();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (easing.complete){</span><br><span class="line">            stopPan();</span><br><span class="line">            Crafty.trigger(<span class="string">&quot;CameraAnimationDone&quot;</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">stopPan</span><span class="params">()</span></span>{</span><br><span class="line">        Crafty.unbind(<span class="string">&quot;EnterFrame&quot;</span>, enterFrame);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    Crafty._preBind(<span class="string">&quot;StopCamera&quot;</span>, stopPan);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(dx, dy, time, easingFn)</span> </span>{</span><br><span class="line">        <span class="comment">// Cancel any current camera control</span></span><br><span class="line">        Crafty.trigger(<span class="string">&quot;StopCamera&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handle request to reset</span></span><br><span class="line">        <span class="keyword">if</span> (dx == <span class="string">&apos;reset&apos;</span>) {</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        startingX = Crafty.viewport._x;</span><br><span class="line">        startingY = Crafty.viewport._y;</span><br><span class="line">        targetX = startingX - dx;</span><br><span class="line">        targetY = startingY - dy;</span><br><span class="line"></span><br><span class="line">        easing = <span class="keyword">new</span> Crafty.easing(time, easingFn);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// bind to event, using uniqueBind prevents multiple copies from being bound</span></span><br><span class="line">        Crafty.uniqueBind(<span class="string">&quot;EnterFrame&quot;</span>, enterFrame);</span><br><span class="line">               </span><br><span class="line">    };</span><br><span class="line">})(),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Crafty.viewport.follow</span><br><span class="line"> * <span class="doctag">@comp</span> Crafty.viewport</span><br><span class="line"> * <span class="doctag">@sign</span> public void Crafty.viewport.follow(Object target, Number offsetx, Number offsety)</span><br><span class="line"> * <span class="doctag">@param</span> Object target - An entity with the 2D component</span><br><span class="line"> * <span class="doctag">@param</span> Number offsetx - Follow target&apos;s center should be offsetx pixels away from viewport&apos;s center. Positive values puts target to the right of the screen.</span><br><span class="line"> * <span class="doctag">@param</span> Number offsety - Follow target&apos;s center should be offsety pixels away from viewport&apos;s center. Positive values puts target to the bottom of the screen.</span><br><span class="line"> *</span><br><span class="line"> * Follows a given entity with the 2D component. If following target will take a portion of</span><br><span class="line"> * the viewport out of bounds of the world, following will stop until the target moves away.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@example</span></span><br><span class="line"> *</span></span><br></pre></td></tr></table></figure>

         * var ent = Crafty.e(&apos;2D, DOM&apos;).attr({w: 100, h: 100});
         * Crafty.viewport.follow(ent, 0, 0);
         * <figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"> */</span><br><span class="line">follow: (function () {</span><br><span class="line">    var oldTarget, offx, offy;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">change</span><span class="params">()</span> </span>{</span><br><span class="line">        var scale = Crafty.viewport._scale;</span><br><span class="line">        Crafty.viewport.scroll(<span class="string">&apos;_x&apos;</span>, -(<span class="keyword">this</span>.x + (<span class="keyword">this</span>.w / <span class="number">2</span>) - (Crafty.viewport.width / <span class="number">2</span> / scale) - offx * scale));</span><br><span class="line">        Crafty.viewport.scroll(<span class="string">&apos;_y&apos;</span>, -(<span class="keyword">this</span>.y + (<span class="keyword">this</span>.h / <span class="number">2</span>) - (Crafty.viewport.height / <span class="number">2</span> / scale) - offy * scale));</span><br><span class="line">        Crafty.viewport._clamp();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">stopFollow</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (oldTarget) {</span><br><span class="line">            oldTarget.unbind(<span class="string">&apos;Move&apos;</span>, change);</span><br><span class="line">            oldTarget.unbind(<span class="string">&apos;ViewportScale&apos;</span>, change);</span><br><span class="line">            oldTarget.unbind(<span class="string">&apos;ViewportResize&apos;</span>, change);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    Crafty._preBind(<span class="string">&quot;StopCamera&quot;</span>, stopFollow);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">return</span> <span class="title">function</span> <span class="params">(<span class="keyword">target</span>, offsetx, offsety)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">target</span> || !<span class="keyword">target</span>.has(<span class="string">&apos;2D&apos;</span>))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        Crafty.trigger(<span class="string">&quot;StopCamera&quot;</span>);</span><br><span class="line"></span><br><span class="line">        oldTarget = <span class="keyword">target</span>;</span><br><span class="line">        offx = (typeof offsetx != <span class="string">&apos;undefined&apos;</span>) ? offsetx : 0;</span><br><span class="line">        offy = (typeof offsety != <span class="string">&apos;undefined&apos;</span>) ? offsety : 0;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">target</span>.bind(<span class="string">&apos;Move&apos;</span>, change);</span><br><span class="line">        <span class="keyword">target</span>.bind(<span class="string">&apos;ViewportScale&apos;</span>, change);</span><br><span class="line">        <span class="keyword">target</span>.bind(<span class="string">&apos;ViewportResize&apos;</span>, change);</span><br><span class="line">        change.call(<span class="keyword">target</span>);</span><br><span class="line">    };</span><br><span class="line">})(),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Crafty.viewport.centerOn</span><br><span class="line"> * <span class="doctag">@comp</span> Crafty.viewport</span><br><span class="line"> * <span class="doctag">@sign</span> public void Crafty.viewport.centerOn(Object target, Number time)</span><br><span class="line"> * <span class="doctag">@param</span> Object target - An entity with the 2D component</span><br><span class="line"> * <span class="doctag">@param</span> Number time - The duration in ms of the camera motion</span><br><span class="line"> *</span><br><span class="line"> * Centers the viewport on the given entity.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@example</span></span><br><span class="line"> *</span></span><br></pre></td></tr></table></figure>

         * var ent = Crafty.e(&apos;2D, DOM&apos;).attr({x: 250, y: 250, w: 100, h: 100});
         * Crafty.viewport.centerOn(ent, 3000);
         * <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> */</span><br><span class="line">centerOn: function (targ, <span class="property">time</span>) {</span><br><span class="line">    var x = targ.x + Crafty.viewport.x,</span><br><span class="line">        y = targ.y + Crafty.viewport.y,</span><br><span class="line">        mid_x = targ.w / <span class="number">2</span>,</span><br><span class="line">        mid_y = targ.h / <span class="number">2</span>,</span><br><span class="line">        cent_x = Crafty.viewport.width / <span class="number">2</span> / Crafty.viewport._scale,</span><br><span class="line">        cent_y = Crafty.viewport.height / <span class="number">2</span> / Crafty.viewport._scale,</span><br><span class="line">        new_x = x + mid_x - cent_x,</span><br><span class="line">        new_y = y + mid_y - cent_y;</span><br><span class="line"></span><br><span class="line">    Crafty.viewport.pan(new_x, new_y, <span class="property">time</span>);</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">/**@</span><br><span class="line"> * <span class="comment">#Crafty.viewport.zoom</span></span><br><span class="line"> * @comp Crafty.viewport</span><br><span class="line"> * @sign public void Crafty.viewport.zoom(Number amt, Number cent_x, Number cent_y, Number <span class="property">time</span>[, String|function easingFn])</span><br><span class="line"> * @param Number amt - amount <span class="keyword">to</span> zoom <span class="keyword">in</span> <span class="function_start"><span class="keyword">on</span></span> <span class="keyword">the</span> target <span class="keyword">by</span> (eg. <span class="number">2</span>, <span class="number">4</span>, <span class="number">0.5</span>)</span><br><span class="line"> * @param Number cent_x - <span class="keyword">the</span> center <span class="keyword">to</span> zoom <span class="function_start"><span class="keyword">on</span></span></span><br><span class="line"> * @param Number cent_y - <span class="keyword">the</span> center <span class="keyword">to</span> zoom <span class="function_start"><span class="keyword">on</span></span></span><br><span class="line"> * @param Number <span class="property">time</span> - <span class="keyword">the</span> duration <span class="keyword">in</span> ms <span class="keyword">of</span> <span class="keyword">the</span> entire zoom operation</span><br><span class="line"> * @param easingFn - A <span class="type">string</span> <span class="keyword">or</span> custom function specifying an easing.  (Defaults <span class="keyword">to</span> linear behavior.)  See Crafty.easing <span class="keyword">for</span> more information.</span><br><span class="line"> *</span><br><span class="line"> * Zooms <span class="keyword">the</span> camera <span class="keyword">in</span> <span class="function_start"><span class="keyword">on</span></span> a <span class="keyword">given</span> point. amt &gt; <span class="number">1</span> will bring <span class="keyword">the</span> camera closer <span class="keyword">to</span> <span class="keyword">the</span> subject</span><br><span class="line"> * amt &lt; <span class="number">1</span> will bring <span class="keyword">it</span> farther away. amt = <span class="number">0</span> will reset <span class="keyword">to</span> <span class="keyword">the</span> default zoom level</span><br><span class="line"> * Zooming <span class="keyword">is</span> multiplicative. To reset <span class="keyword">the</span> zoom amount, pass <span class="number">0.</span></span><br><span class="line"> *</span><br><span class="line"> * @example</span><br><span class="line"> *</span><br></pre></td></tr></table></figure>

         * // Make the entities appear twice as large by zooming in on the specified coordinates over the duration of 3 seconds using linear easing behavior
         * Crafty.viewport.zoom(2, 100, 100, 3000);
         * <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"> */</span><br><span class="line">zoom: (<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">stopZoom</span><span class="params">()</span></span>{</span><br><span class="line">        Crafty.unbind(<span class="string">&quot;EnterFrame&quot;</span>, enterFrame);</span><br><span class="line">    }</span><br><span class="line">    Crafty._preBind(<span class="string">&quot;StopCamera&quot;</span>, stopZoom);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> startingZoom, finalZoom, finalAmount, startingX, finalX, startingY, finalY, easing;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">enterFrame</span><span class="params">(e)</span></span>{</span><br><span class="line">        <span class="keyword">var</span> amount, v;</span><br><span class="line"></span><br><span class="line">        easing.tick(e.dt);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The scaling should happen smoothly -- start at 1, end at finalAmount, and at half way scaling should be by finalAmount^(1/2)</span></span><br><span class="line">        <span class="comment">// Since value goes smoothly from 0 to 1, this fufills those requirements</span></span><br><span class="line">        amount = Math.pow(finalAmount, easing.value() );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The viewport should move in such a way that no point reverses</span></span><br><span class="line">        <span class="comment">// If a and b are the top left/bottom right of the viewport, then the below can be derived from</span></span><br><span class="line">        <span class="comment">//      (a_0-b_0)/(a-b) = amount,</span></span><br><span class="line">        <span class="comment">// and the assumption that both a and b have the same form</span></span><br><span class="line">        <span class="comment">//      a = a_0 * (1-v) + a_f * v,</span></span><br><span class="line">        <span class="comment">//      b = b_0 * (1-v) + b_f * v.</span></span><br><span class="line">        <span class="comment">// This is just an arbitrary parameterization of the only sensible path for the viewport corners to take.</span></span><br><span class="line">        <span class="comment">// And by symmetry they should be parameterized in the same way!  So not much choice here.</span></span><br><span class="line">        <span class="keyword">if</span> (finalAmount === <span class="number">1</span>)</span><br><span class="line">            v = easing.value();  <span class="comment">// prevent NaN!  If zoom is used this way, it&apos;ll just become a pan.</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            v = (<span class="number">1</span>/amount - <span class="number">1</span> ) / (<span class="number">1</span>/finalAmount - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set new scale and viewport position</span></span><br><span class="line">        Crafty.viewport.scale( amount * startingZoom );</span><br><span class="line">        Crafty.viewport.scroll(<span class="string">&quot;_x&quot;</span>, startingX * (<span class="number">1</span>-v) + finalX * v );</span><br><span class="line">        Crafty.viewport.scroll(<span class="string">&quot;_y&quot;</span>, startingY * (<span class="number">1</span>-v) + finalY * v );</span><br><span class="line">        Crafty.viewport._clamp();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (easing.complete){</span><br><span class="line">            stopZoom();</span><br><span class="line">            Crafty.trigger(<span class="string">&quot;CameraAnimationDone&quot;</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(amt, cent_x, cent_y, time, easingFn)</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (!amt) { <span class="comment">// we&apos;re resetting to defaults</span></span><br><span class="line">            Crafty.viewport.scale(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (arguments.length &lt;= <span class="number">2</span>) {</span><br><span class="line">            time = cent_x;</span><br><span class="line">            cent_x = Crafty.viewport.x - Crafty.viewport.width;</span><br><span class="line">            cent_y = Crafty.viewport.y - Crafty.viewport.height;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        Crafty.trigger(<span class="string">&quot;StopCamera&quot;</span>);</span><br><span class="line">        startingZoom = Crafty.viewport._scale;</span><br><span class="line">        finalAmount = amt;</span><br><span class="line">        finalZoom = startingZoom * finalAmount;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        startingX = Crafty.viewport.x;</span><br><span class="line">        startingY = Crafty.viewport.y;</span><br><span class="line">        finalX = - (cent_x - Crafty.viewport.width  / (<span class="number">2</span> * finalZoom) );</span><br><span class="line">        finalY = - (cent_y - Crafty.viewport.height / (<span class="number">2</span> * finalZoom) );</span><br><span class="line"></span><br><span class="line">        easing = <span class="keyword">new</span> Crafty.easing(time, easingFn);</span><br><span class="line"></span><br><span class="line">        Crafty.uniqueBind(<span class="string">&quot;EnterFrame&quot;</span>, enterFrame);</span><br><span class="line">    };</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">})(),</span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Crafty.viewport.scale</span><br><span class="line"> * <span class="doctag">@comp</span> Crafty.viewport</span><br><span class="line"> * <span class="doctag">@sign</span> public void Crafty.viewport.scale(Number amt)</span><br><span class="line"> * <span class="doctag">@param</span> Number amt - amount to zoom/scale in on the elements</span><br><span class="line"> *</span><br><span class="line"> * Adjusts the scale (zoom). When `amt` is 1, it is set to the normal scale,</span><br><span class="line"> * e.g. an entity with `this.w == 20` would appear exactly 20 pixels wide.</span><br><span class="line"> * When `amt` is 10, that same entity would appear 200 pixels wide (i.e., zoomed in</span><br><span class="line"> * by a factor of 10), and when `amt` is 0.1, that same entity would be 2 pixels wide</span><br><span class="line"> * (i.e., zoomed out by a factor of `(1 / 0.1)`).</span><br><span class="line"> * </span><br><span class="line"> * If you pass an `amt` of 0, it is treated the same as passing 1, i.e. the scale is reset.</span><br><span class="line"> *</span><br><span class="line"> * This method sets the absolute scale, while `Crafty.viewport.zoom` sets the scale relative to the existing value.</span><br><span class="line"> * <span class="doctag">@see</span> Crafty.viewport.zoom</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@example</span></span><br><span class="line"> *</span></span><br></pre></td></tr></table></figure>

         * Crafty.viewport.scale(2); // Zoom in -- all entities will appear twice as large.
         * <figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"> */</span><br><span class="line"><span class="built_in">scale</span>: (function () {</span><br><span class="line">    <span class="keyword">return</span> function (amt) {</span><br><span class="line">        <span class="keyword">this</span>._scale = amt ? amt : <span class="number">1</span>;</span><br><span class="line">        Crafty.trigger(<span class="string">&quot;InvalidateViewport&quot;</span>);</span><br><span class="line">        Crafty.trigger(<span class="string">&quot;ViewportScale&quot;</span>);</span><br><span class="line"></span><br><span class="line">    };</span><br><span class="line">})(),</span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Crafty.viewport.mouselook</span><br><span class="line"> * @comp Crafty.viewport</span><br><span class="line"> * @sign public void Crafty.viewport.mouselook(Boolean active)</span><br><span class="line"> * @param Boolean active - Activate or deactivate mouselook</span><br><span class="line"> *</span><br><span class="line"> * Toggle mouselook on the current viewport.</span><br><span class="line"> * Simply call this function and the user will be able to</span><br><span class="line"> * drag the viewport around.</span><br><span class="line"> *</span><br><span class="line"> * If the user starts a drag, &quot;StopCamera&quot; will be triggered, which will cancel any existing camera animations.</span><br><span class="line"> */</span></span><br><span class="line">mouselook: (function () {</span><br><span class="line">    var active = <span class="keyword">false</span>,</span><br><span class="line">        dragging = <span class="keyword">false</span>,</span><br><span class="line">        lastMouse = {};</span><br><span class="line">    old = {};</span><br><span class="line">    function stopLook(){</span><br><span class="line">        dragging = <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> function (op, arg) {</span><br><span class="line">        <span class="keyword">if</span> (typeof op == <span class="string">&apos;boolean&apos;</span>) {</span><br><span class="line">            active = op;</span><br><span class="line">            <span class="keyword">if</span> (active) {</span><br><span class="line">                Crafty.mouseObjs++;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                Crafty.mouseObjs = Math.<span class="built_in">max</span>(<span class="number">0</span>, Crafty.mouseObjs - <span class="number">1</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (!active) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">switch</span> (op) {</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&apos;move&apos;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&apos;drag&apos;</span>:</span><br><span class="line">            <span class="keyword">if</span> (!dragging) <span class="keyword">return</span>;</span><br><span class="line">            diff = {</span><br><span class="line">                x: arg.clientX - lastMouse.x,</span><br><span class="line">                y: arg.clientY - lastMouse.y</span><br><span class="line">            };</span><br><span class="line"></span><br><span class="line">            lastMouse.x = arg.clientX;</span><br><span class="line">            lastMouse.y = arg.clientY;</span><br><span class="line"></span><br><span class="line">            Crafty.viewport.x += diff.x;</span><br><span class="line">            Crafty.viewport.y += diff.y;</span><br><span class="line">            Crafty.viewport._clamp();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&apos;start&apos;</span>:</span><br><span class="line">            Crafty.trigger(<span class="string">&quot;StopCamera&quot;</span>);</span><br><span class="line">            lastMouse.x = arg.clientX;</span><br><span class="line">            lastMouse.y = arg.clientY;</span><br><span class="line">            dragging = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&apos;stop&apos;</span>:</span><br><span class="line">            dragging = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    };</span><br><span class="line">})(),</span><br><span class="line">_clamp: function () {</span><br><span class="line">    <span class="comment">// clamps the viewport to the viewable area</span></span><br><span class="line">    <span class="comment">// under no circumstances should the viewport see something outside the boundary of the &apos;world&apos;</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.clampToEntities) <span class="keyword">return</span>;</span><br><span class="line">    var bound = Crafty.clone(<span class="keyword">this</span>.bounds) || Crafty.<span class="built_in">map</span>.boundaries();</span><br><span class="line">    bound.<span class="built_in">max</span>.x *= <span class="keyword">this</span>._scale;</span><br><span class="line">    bound.<span class="built_in">min</span>.x *= <span class="keyword">this</span>._scale;</span><br><span class="line">    bound.<span class="built_in">max</span>.y *= <span class="keyword">this</span>._scale;</span><br><span class="line">    bound.<span class="built_in">min</span>.y *= <span class="keyword">this</span>._scale;</span><br><span class="line">    <span class="keyword">if</span> (bound.<span class="built_in">max</span>.x - bound.<span class="built_in">min</span>.x &gt; Crafty.viewport.<span class="variable">width</span>) {</span><br><span class="line">        <span class="keyword">if</span> (Crafty.viewport.x &lt; (-bound.<span class="built_in">max</span>.x + Crafty.viewport.<span class="variable">width</span>) / <span class="keyword">this</span>._scale) {</span><br><span class="line">            Crafty.viewport.x = (-bound.<span class="built_in">max</span>.x + Crafty.viewport.<span class="variable">width</span>) / <span class="keyword">this</span>._scale;</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (Crafty.viewport.x &gt; -bound.<span class="built_in">min</span>.x) {</span><br><span class="line">            Crafty.viewport.x = -bound.<span class="built_in">min</span>.x;</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        Crafty.viewport.x = -<span class="number">1</span> * (bound.<span class="built_in">min</span>.x + (bound.<span class="built_in">max</span>.x - bound.<span class="built_in">min</span>.x) / <span class="number">2</span> - Crafty.viewport.<span class="variable">width</span> / <span class="number">2</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (bound.<span class="built_in">max</span>.y - bound.<span class="built_in">min</span>.y &gt; Crafty.viewport.<span class="variable">height</span>) {</span><br><span class="line">        <span class="keyword">if</span> (Crafty.viewport.y &lt; (-bound.<span class="built_in">max</span>.y + Crafty.viewport.<span class="variable">height</span>) / <span class="keyword">this</span>._scale) {</span><br><span class="line">            Crafty.viewport.y = (-bound.<span class="built_in">max</span>.y + Crafty.viewport.<span class="variable">height</span>) / <span class="keyword">this</span>._scale;</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (Crafty.viewport.y &gt; -bound.<span class="built_in">min</span>.y) {</span><br><span class="line">            Crafty.viewport.y = -bound.<span class="built_in">min</span>.y;</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        Crafty.viewport.y = -<span class="number">1</span> * (bound.<span class="built_in">min</span>.y + (bound.<span class="built_in">max</span>.y - bound.<span class="built_in">min</span>.y) / <span class="number">2</span> - Crafty.viewport.<span class="variable">height</span> / <span class="number">2</span>);</span><br><span class="line">    }</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Crafty.viewport.init</span><br><span class="line"> * @comp Crafty.viewport</span><br><span class="line"> * @sign public void Crafty.viewport.init([Number width, Number height, String stage_elem])</span><br><span class="line"> * @sign public void Crafty.viewport.init([Number width, Number height, HTMLElement stage_elem])</span><br><span class="line"> * @param Number width - Width of the viewport</span><br><span class="line"> * @param Number height - Height of the viewport</span><br><span class="line"> * @param String or HTMLElement stage_elem - the element to use as the stage (either its id or the actual element).</span><br><span class="line"> *</span><br><span class="line"> * Initialize the viewport. If the arguments &apos;width&apos; or &apos;height&apos; are missing, use `window.innerWidth` and `window.innerHeight` (full screen model).</span><br><span class="line"> *</span><br><span class="line"> * The argument &apos;stage_elem&apos; is used to specify a stage element other than the default, and can be either a string or an HTMLElement.  If a string is provided, it will look for an element with that id and, if none exists, create a div.  If an HTMLElement is provided, that is used directly.  Omitting this argument is the same as passing an id of &apos;cr-stage&apos;.</span><br><span class="line"> *</span><br><span class="line"> * @see Crafty.device, Crafty.domHelper, Crafty.stage</span><br><span class="line"> */</span></span><br><span class="line">init: function (w, h, stage_elem) {</span><br><span class="line">    <span class="comment">// setters+getters for the viewport</span></span><br><span class="line">    <span class="keyword">this</span>._defineViewportProperties();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set initial values -- necessary on restart</span></span><br><span class="line">    <span class="keyword">this</span>._x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>._y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>._scale = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">this</span>.bounds = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If no width or height is defined, the width and height is set to fullscreen</span></span><br><span class="line">    <span class="keyword">this</span>._width = w || window.innerWidth;</span><br><span class="line">    <span class="keyword">this</span>._height = h || window.innerHeight;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//check if stage exists</span></span><br><span class="line">    <span class="keyword">if</span> (typeof stage_elem === <span class="string">&apos;undefined&apos;</span>)</span><br><span class="line">        stage_elem = <span class="string">&quot;cr-stage&quot;</span>;</span><br><span class="line"></span><br><span class="line">    var crstage;</span><br><span class="line">    <span class="keyword">if</span> (typeof stage_elem === <span class="string">&apos;string&apos;</span>)</span><br><span class="line">        crstage = document.getElementById(stage_elem);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (typeof HTMLElement !== <span class="string">&quot;undefined&quot;</span> ? stage_elem <span class="keyword">instanceof</span> HTMLElement : stage_elem <span class="keyword">instanceof</span> Element)</span><br><span class="line">        crstage = stage_elem;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> TypeError(<span class="string">&quot;stage_elem must be a string or an HTMLElement&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #Crafty.stage</span><br><span class="line">     * @category Core</span><br><span class="line">     * The stage where all the DOM entities will be placed.</span><br><span class="line">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #Crafty.stage.elem</span><br><span class="line">     * @comp Crafty.stage</span><br><span class="line">     * The `#cr-stage` div element.</span><br><span class="line">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #Crafty.domLayer._div</span><br><span class="line">     * @comp Crafty.domLayer</span><br><span class="line">     * `Crafty.domLayer._div` is a div inside the `#cr-stage` div that holds all DOM entities.</span><br><span class="line">     * If you use canvas, a `canvas` element is created at the same level in the dom</span><br><span class="line">     * as the the `Crafty.domLayer._div` div. So the hierarchy in the DOM is</span><br><span class="line">     *  </span><br><span class="line">     *</span></span><br></pre></td></tr></table></figure>

             * Crafty.stage.elem
             *  - Crafty.domLayer._div (a div HTMLElement)
             *  - Crafty.canvasLayer._canvas (a canvas HTMLElement)
             * <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br></pre></td><td class="code"><pre><span class="line">             */</span><br><span class="line"></span><br><span class="line">            <span class="comment">//create stage div to contain everything</span></span><br><span class="line">            Crafty.stage = {</span><br><span class="line">                x: <span class="number">0</span>,</span><br><span class="line">                y: <span class="number">0</span>,</span><br><span class="line">                fullscreen: <span class="literal">false</span>,</span><br><span class="line">                elem: (crstage ? crstage : document.createElement(<span class="string">&quot;div&quot;</span>)),</span><br><span class="line">            };</span><br><span class="line"></span><br><span class="line">            <span class="comment">//fullscreen, stop scrollbars</span></span><br><span class="line">            <span class="keyword">if</span> (!w &amp;&amp; !h) {</span><br><span class="line">                document.body.style.overflow = <span class="string">&quot;hidden&quot;</span>;</span><br><span class="line">                Crafty.stage.fullscreen = <span class="literal">true</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            Crafty.addEvent(<span class="keyword">this</span>, window, <span class="string">&quot;resize&quot;</span>, Crafty.viewport.reload);</span><br><span class="line"></span><br><span class="line">            Crafty.addEvent(<span class="keyword">this</span>, window, <span class="string">&quot;blur&quot;</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">                <span class="keyword">if</span> (Crafty.settings.<span class="keyword">get</span>(<span class="string">&quot;autoPause&quot;</span>)) {</span><br><span class="line">                    <span class="keyword">if</span> (!Crafty._paused) Crafty.pause();</span><br><span class="line">                }</span><br><span class="line">            });</span><br><span class="line">            Crafty.addEvent(<span class="keyword">this</span>, window, <span class="string">&quot;focus&quot;</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">                <span class="keyword">if</span> (Crafty._paused &amp;&amp; Crafty.settings.<span class="keyword">get</span>(<span class="string">&quot;autoPause&quot;</span>)) {</span><br><span class="line">                    Crafty.pause();</span><br><span class="line">                }</span><br><span class="line">            });</span><br><span class="line"></span><br><span class="line">            <span class="comment">//make the stage unselectable</span></span><br><span class="line">            Crafty.settings.register(<span class="string">&quot;stageSelectable&quot;</span>, <span class="function"><span class="keyword">function</span> <span class="params">(v)</span> </span>{</span><br><span class="line">                Crafty.stage.elem.onselectstart = v ? <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                } : <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                };</span><br><span class="line">            });</span><br><span class="line">            Crafty.settings.modify(<span class="string">&quot;stageSelectable&quot;</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//make the stage have no context menu</span></span><br><span class="line">            Crafty.settings.register(<span class="string">&quot;stageContextMenu&quot;</span>, <span class="function"><span class="keyword">function</span> <span class="params">(v)</span> </span>{</span><br><span class="line">                Crafty.stage.elem.oncontextmenu = v ? <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                } : <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                };</span><br><span class="line">            });</span><br><span class="line">            Crafty.settings.modify(<span class="string">&quot;stageContextMenu&quot;</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">            Crafty.settings.register(<span class="string">&quot;autoPause&quot;</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{});</span><br><span class="line">            Crafty.settings.modify(<span class="string">&quot;autoPause&quot;</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//add to the body and give it an ID if not exists</span></span><br><span class="line">            <span class="keyword">if</span> (!crstage) {</span><br><span class="line">                document.body.appendChild(Crafty.stage.elem);</span><br><span class="line">                Crafty.stage.elem.id = stage_elem;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> elem = Crafty.stage.elem.style,</span><br><span class="line">                offset;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//css style</span></span><br><span class="line">            elem.width = <span class="keyword">this</span>.width + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">            elem.height = <span class="keyword">this</span>.height + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">            elem.overflow = <span class="string">&quot;hidden&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// resize events</span></span><br><span class="line">            Crafty.bind(<span class="string">&quot;ViewportResize&quot;</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{Crafty.trigger(<span class="string">&quot;InvalidateViewport&quot;</span>);});</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (Crafty.mobile) {</span><br><span class="line"></span><br><span class="line">                <span class="comment">// remove default gray highlighting after touch</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> elem.webkitTapHighlightColor !== <span class="literal">undefined</span>) {</span><br><span class="line">                    elem.webkitTapHighlightColor = <span class="string">&quot;rgba(0,0,0,0)&quot;</span>;</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> meta = document.createElement(<span class="string">&quot;meta&quot;</span>),</span><br><span class="line">                    head = document.getElementsByTagName(<span class="string">&quot;head&quot;</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">                <span class="comment">//hide the address bar</span></span><br><span class="line">                meta = document.createElement(<span class="string">&quot;meta&quot;</span>);</span><br><span class="line">                meta.setAttribute(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;apple-mobile-web-app-capable&quot;</span>);</span><br><span class="line">                meta.setAttribute(<span class="string">&quot;content&quot;</span>, <span class="string">&quot;yes&quot;</span>);</span><br><span class="line">                head.appendChild(meta);</span><br><span class="line"></span><br><span class="line">                Crafty.addEvent(<span class="keyword">this</span>, Crafty.stage.elem, <span class="string">&quot;touchmove&quot;</span>, <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>{</span><br><span class="line">                    e.preventDefault();</span><br><span class="line">                });</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line">            </span><br><span class="line">            elem.position = <span class="string">&quot;relative&quot;</span>;</span><br><span class="line">            <span class="comment">//find out the offset position of the stage</span></span><br><span class="line">            offset = Crafty.domHelper.innerPosition(Crafty.stage.elem);</span><br><span class="line">            Crafty.stage.x = offset.x;</span><br><span class="line">            Crafty.stage.y = offset.y;</span><br><span class="line"></span><br><span class="line">            Crafty.uniqueBind(<span class="string">&quot;ViewportResize&quot;</span>, <span class="keyword">this</span>._resize);</span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line">        _resize: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</span><br><span class="line">            Crafty.stage.elem.style.width = Crafty.viewport.width + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">            Crafty.stage.elem.style.height = Crafty.viewport.height + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create setters/getters for x, y, width, height</span></span><br><span class="line">        _defineViewportProperties: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</span><br><span class="line">            Object.defineProperty(<span class="keyword">this</span>, <span class="string">&apos;x&apos;</span>, {</span><br><span class="line">                <span class="keyword">set</span>: <span class="function"><span class="keyword">function</span> <span class="params">(v)</span> </span>{</span><br><span class="line">                    <span class="keyword">this</span>.scroll(<span class="string">&apos;_x&apos;</span>, v);</span><br><span class="line">                },</span><br><span class="line">                <span class="keyword">get</span>: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>._x;</span><br><span class="line">                },</span><br><span class="line">                configurable : <span class="literal">true</span></span><br><span class="line">            });</span><br><span class="line">            Object.defineProperty(<span class="keyword">this</span>, <span class="string">&apos;y&apos;</span>, {</span><br><span class="line">                <span class="keyword">set</span>: <span class="function"><span class="keyword">function</span> <span class="params">(v)</span> </span>{</span><br><span class="line">                    <span class="keyword">this</span>.scroll(<span class="string">&apos;_y&apos;</span>, v);</span><br><span class="line">                },</span><br><span class="line">                <span class="keyword">get</span>: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>._y;</span><br><span class="line">                },</span><br><span class="line">                configurable : <span class="literal">true</span></span><br><span class="line">            });</span><br><span class="line">            Object.defineProperty(<span class="keyword">this</span>, <span class="string">&apos;width&apos;</span>, {</span><br><span class="line">                <span class="keyword">set</span>: <span class="function"><span class="keyword">function</span> <span class="params">(v)</span> </span>{</span><br><span class="line">                    <span class="keyword">this</span>._width = v;</span><br><span class="line">                    Crafty.trigger(<span class="string">&quot;ViewportResize&quot;</span>);</span><br><span class="line">                },</span><br><span class="line">                <span class="keyword">get</span>: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>._width;</span><br><span class="line">                },</span><br><span class="line">                configurable : <span class="literal">true</span></span><br><span class="line">            });</span><br><span class="line">            Object.defineProperty(<span class="keyword">this</span>, <span class="string">&apos;height&apos;</span>, {</span><br><span class="line">                <span class="keyword">set</span>: <span class="function"><span class="keyword">function</span> <span class="params">(v)</span> </span>{</span><br><span class="line">                    <span class="keyword">this</span>._height = v;</span><br><span class="line">                    Crafty.trigger(<span class="string">&quot;ViewportResize&quot;</span>);</span><br><span class="line">                },</span><br><span class="line">                <span class="keyword">get</span>: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>._height;</span><br><span class="line">                },</span><br><span class="line">                configurable : <span class="literal">true</span></span><br><span class="line">            });</span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**@</span><br><span class="line">         * #Crafty.viewport.reload</span><br><span class="line">         * @comp Crafty.stage</span><br><span class="line">         *</span><br><span class="line">         * @sign public Crafty.viewport.reload()</span><br><span class="line">         *</span><br><span class="line">         * Recalculate and reload stage width, height and position.</span><br><span class="line">         * Useful when browser return wrong results on init (like safari on Ipad2).</span><br><span class="line">         * You should also call this method if you insert custom DOM elements that affect Crafty&apos;s stage offset.</span><br><span class="line">         *</span><br><span class="line">         */</span></span><br><span class="line">        reload: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">var</span> w = window.innerWidth,</span><br><span class="line">                h= window.innerHeight,</span><br><span class="line">                offset;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (Crafty.stage.fullscreen) {</span><br><span class="line">                <span class="keyword">this</span>._width = w;</span><br><span class="line">                <span class="keyword">this</span>._height = h;</span><br><span class="line">                Crafty.trigger(<span class="string">&quot;ViewportResize&quot;</span>);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            offset = Crafty.domHelper.innerPosition(Crafty.stage.elem);</span><br><span class="line">            Crafty.stage.x = offset.x;</span><br><span class="line">            Crafty.stage.y = offset.y;</span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**@</span><br><span class="line">         * #Crafty.viewport.reset</span><br><span class="line">         * @comp Crafty.stage</span><br><span class="line">         * @trigger StopCamera - called to cancel camera animations</span><br><span class="line">         *</span><br><span class="line">         * @sign public Crafty.viewport.reset()</span><br><span class="line">         *</span><br><span class="line">         * Resets the viewport to starting values, and cancels any existing camera animations.</span><br><span class="line">         * Called when scene() is run.</span><br><span class="line">         */</span></span><br><span class="line">        reset: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">            Crafty.viewport.mouselook(<span class="string">&quot;stop&quot;</span>);</span><br><span class="line">            Crafty.trigger(<span class="string">&quot;StopCamera&quot;</span>);</span><br><span class="line">            <span class="comment">// Reset viewport position and scale</span></span><br><span class="line">            Crafty.viewport.scroll(<span class="string">&quot;_x&quot;</span>, <span class="number">0</span>);</span><br><span class="line">            Crafty.viewport.scroll(<span class="string">&quot;_y&quot;</span>, <span class="number">0</span>);</span><br><span class="line">            Crafty.viewport.scale(<span class="number">1</span>);</span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**@</span><br><span class="line">         * #Crafty.viewport.onScreen</span><br><span class="line">         * @comp Crafty.viewport</span><br><span class="line">         * @sign public Crafty.viewport.onScreen(Object rect)</span><br><span class="line">         * @param rect - A rectangle with field {_x: x_val, _y: y_val, _w: w_val, _h: h_val}</span><br><span class="line">         *</span><br><span class="line">         * Test if a rectangle is completely in viewport</span><br><span class="line">         */</span></span><br><span class="line">        onScreen: <span class="function"><span class="keyword">function</span> <span class="params">(rect)</span> </span>{</span><br><span class="line">            <span class="keyword">return</span> Crafty.viewport._x + rect._x + rect._w &gt; <span class="number">0</span> &amp;&amp; Crafty.viewport._y + rect._y + rect._h &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                Crafty.viewport._x + rect._x &lt; Crafty.viewport.width &amp;&amp; Crafty.viewport._y + rect._y &lt; Crafty.viewport.height;</span><br><span class="line">        },</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">},{<span class="string">&quot;../core/core.js&quot;</span>:<span class="number">7</span>}],<span class="number">35</span>:[<span class="function"><span class="keyword">function</span><span class="params">(require,module,exports)</span></span>{</span><br><span class="line"><span class="keyword">var</span> Crafty = require(<span class="string">&apos;../core/core.js&apos;</span>),</span><br><span class="line">    document = window.document;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object for abstracting out all the gl calls to handle rendering entities with a particular program</span></span><br><span class="line">RenderProgramWrapper = <span class="function"><span class="keyword">function</span><span class="params">(context, shader)</span></span>{</span><br><span class="line">    <span class="keyword">this</span>.shader = shader;</span><br><span class="line">    <span class="keyword">this</span>.context = context;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.array_size = <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">this</span>.max_size = <span class="number">1024</span>;</span><br><span class="line">    <span class="keyword">this</span>._indexArray = <span class="keyword">new</span> Uint16Array(<span class="number">6</span> * <span class="keyword">this</span>.array_size);</span><br><span class="line">    <span class="keyword">this</span>._indexBuffer = context.createBuffer();</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">RenderProgramWrapper.prototype = {</span><br><span class="line">    <span class="comment">// Takes an array of attributes; see Crafty.webgl.getProgramWrapper</span></span><br><span class="line">    initAttributes: <span class="function"><span class="keyword">function</span><span class="params">(attributes)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.attributes = attributes;</span><br><span class="line">        <span class="keyword">this</span>._attribute_table = {};</span><br><span class="line">        <span class="keyword">var</span> offset = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;attributes.length; i++){</span><br><span class="line">            <span class="keyword">var</span> a = attributes[i];</span><br><span class="line">            <span class="keyword">this</span>._attribute_table[a.name] = a;</span><br><span class="line"></span><br><span class="line">            a.bytes = a.bytes || Float32Array.BYTES_PER_ELEMENT;</span><br><span class="line">            a.type = a.type || <span class="keyword">this</span>.context.FLOAT;</span><br><span class="line">            a.offset = offset;</span><br><span class="line">            a.location = <span class="keyword">this</span>.context.getAttribLocation(<span class="keyword">this</span>.shader, a.name);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.context.enableVertexAttribArray(a.location);</span><br><span class="line"></span><br><span class="line">            offset += a.width;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Stride is the full width including the last set</span></span><br><span class="line">        <span class="keyword">this</span>.stride = offset;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create attribute array of correct size to hold max elements</span></span><br><span class="line">        <span class="keyword">this</span>._attributeArray = <span class="keyword">new</span> Float32Array(<span class="keyword">this</span>.array_size*<span class="number">4</span>*<span class="keyword">this</span>.stride);</span><br><span class="line">        <span class="keyword">this</span>._attributeBuffer = <span class="keyword">this</span>.context.createBuffer();</span><br><span class="line">        <span class="keyword">this</span>._registryHoles = [];</span><br><span class="line">        <span class="keyword">this</span>._registrySize = <span class="number">0</span>;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">// increase the size of the typed arrays</span></span><br><span class="line">    <span class="comment">// does so by creating a new array of that size and copying the existing one into it</span></span><br><span class="line">    growArrays: <span class="function"><span class="keyword">function</span><span class="params">(size)</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.array_size &gt;= <span class="keyword">this</span>.max_size) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> newsize = Math.min(size, <span class="keyword">this</span>.max_size);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> newAttributeArray = <span class="keyword">new</span> Float32Array(newsize*<span class="number">4</span>*<span class="keyword">this</span>.stride);</span><br><span class="line">        <span class="keyword">var</span> newIndexArray = <span class="keyword">new</span> Uint16Array(<span class="number">6</span> * newsize);</span><br><span class="line"></span><br><span class="line">        newAttributeArray.<span class="keyword">set</span>(<span class="keyword">this</span>._attributeArray);</span><br><span class="line">        newIndexArray.<span class="keyword">set</span>(<span class="keyword">this</span>._indexArray);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>._attributeArray = newAttributeArray;</span><br><span class="line">        <span class="keyword">this</span>._indexArray = newIndexArray;</span><br><span class="line">        <span class="keyword">this</span>.array_size = newsize;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add an entity that needs to be rendered by this program</span></span><br><span class="line">    <span class="comment">// Needs to be assigned an index in the buffer</span></span><br><span class="line">    registerEntity: <span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._registryHoles.length === <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>._registrySize &gt;= <span class="keyword">this</span>.max_size){</span><br><span class="line">                <span class="keyword">throw</span>(<span class="string">&quot;Number of entities exceeds maximum limit.&quot;</span>);</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>._registrySize &gt;= <span class="keyword">this</span>.array_size) {</span><br><span class="line">                <span class="keyword">this</span>.growArrays(<span class="number">2</span>*<span class="keyword">this</span>.array_size);</span><br><span class="line">            }</span><br><span class="line">            e._glBufferIndex = <span class="keyword">this</span>._registrySize;</span><br><span class="line">            <span class="keyword">this</span>._registrySize++;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            e._glBufferIndex = <span class="keyword">this</span>._registryHoles.pop();</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">// remove an entity; allow its buffer index to be reused</span></span><br><span class="line">    unregisterEntity: <span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> e._glBufferIndex === <span class="string">&quot;number&quot;</span>)</span><br><span class="line">            <span class="keyword">this</span>._registryHoles.push(e._glBufferIndex);</span><br><span class="line">        e._glBufferIndex = <span class="literal">null</span>;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    resetRegistry: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">this</span>._maxElement = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>._registryHoles.length = <span class="number">0</span>;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    setCurrentEntity: <span class="function"><span class="keyword">function</span><span class="params">(ent)</span></span>{</span><br><span class="line">        <span class="comment">// offset is 4 * buffer index, because each entity has 4 vertices</span></span><br><span class="line">        <span class="keyword">this</span>.ent_offset = ent._glBufferIndex*<span class="number">4</span>;</span><br><span class="line">        <span class="keyword">this</span>.ent = ent;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Called before a batch of entities is prepped for rendering</span></span><br><span class="line">    switchTo: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">var</span> gl = <span class="keyword">this</span>.context;</span><br><span class="line">        gl.useProgram(<span class="keyword">this</span>.shader);</span><br><span class="line">        gl.bindBuffer(gl.ARRAY_BUFFER, <span class="keyword">this</span>._attributeBuffer);</span><br><span class="line">        <span class="keyword">var</span> a, attributes = <span class="keyword">this</span>.attributes;</span><br><span class="line">        <span class="comment">// Process every attribute</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;attributes.length; i++){</span><br><span class="line">            a = attributes[i];</span><br><span class="line">            gl.vertexAttribPointer(a.location, a.width, a.type, <span class="literal">false</span>, <span class="keyword">this</span>.stride*a.bytes, a.offset*a.bytes);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// For now, special case the need for texture objects</span></span><br><span class="line">        <span class="keyword">var</span> t = <span class="keyword">this</span>.texture_obj;</span><br><span class="line">        <span class="keyword">if</span> (t &amp;&amp; t.unit === <span class="literal">null</span>){</span><br><span class="line">            Crafty.webgl.texture_manager.bindTexture(t);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.index_pointer = <span class="number">0</span>;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sets a texture</span></span><br><span class="line">    setTexture: <span class="function"><span class="keyword">function</span><span class="params">(texture_obj)</span> </span>{</span><br><span class="line">        <span class="comment">// Only needs to be done once</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.texture_obj !== <span class="literal">undefined</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// Set the texture buffer to use</span></span><br><span class="line">        texture_obj.setToProgram(<span class="keyword">this</span>.shader, <span class="string">&quot;uSampler&quot;</span>, <span class="string">&quot;uTextureDimensions&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.texture_obj = texture_obj;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">// adds a set of 6 indices to the index array</span></span><br><span class="line">    <span class="comment">// Corresponds to 2 triangles that make up a rectangle</span></span><br><span class="line">    addIndices: <span class="function"><span class="keyword">function</span><span class="params">(offset)</span></span>{</span><br><span class="line">        <span class="keyword">var</span> index = <span class="keyword">this</span>._indexArray, l = <span class="keyword">this</span>.index_pointer;</span><br><span class="line">        index[<span class="number">0</span>+l] = <span class="number">0</span> + offset;</span><br><span class="line">        index[<span class="number">1</span>+l] = <span class="number">1</span> + offset;</span><br><span class="line">        index[<span class="number">2</span>+l] = <span class="number">2</span> + offset;</span><br><span class="line">        index[<span class="number">3</span>+l] = <span class="number">1</span> + offset;</span><br><span class="line">        index[<span class="number">4</span>+l] = <span class="number">2</span> + offset;</span><br><span class="line">        index[<span class="number">5</span>+l] = <span class="number">3</span> + offset;</span><br><span class="line">        <span class="keyword">this</span>.index_pointer+=<span class="number">6</span>;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Writes data from the attribute and index arrays to the appropriate buffers, and then calls drawElements.</span></span><br><span class="line">    renderBatch: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">var</span> gl = <span class="keyword">this</span>.context;</span><br><span class="line">        gl.bindBuffer(gl.ARRAY_BUFFER, <span class="keyword">this</span>._attributeBuffer);</span><br><span class="line">        gl.bufferData(gl.ARRAY_BUFFER, <span class="keyword">this</span>._attributeArray, gl.STATIC_DRAW);</span><br><span class="line">        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, <span class="keyword">this</span>._indexBuffer);</span><br><span class="line">        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, <span class="keyword">this</span>._indexArray, gl.STATIC_DRAW);</span><br><span class="line">        gl.drawElements(gl.TRIANGLES, <span class="keyword">this</span>.index_pointer, gl.UNSIGNED_SHORT, <span class="number">0</span>);</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    setViewportUniforms: <span class="function"><span class="keyword">function</span><span class="params">(viewport)</span></span>{</span><br><span class="line">        <span class="keyword">var</span> gl = <span class="keyword">this</span>.context;</span><br><span class="line">        gl.useProgram(<span class="keyword">this</span>.shader);</span><br><span class="line">        gl.uniform4f(<span class="keyword">this</span>.shader.viewport, viewport._x, viewport._y, viewport._width/viewport._scale, viewport._height/viewport._scale);</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Fill in the attribtue with the given arguments, cycling through the data if necessary</span></span><br><span class="line">    <span class="comment">// If the arguments provided match the width of the attribute, that means it&apos;ll fill the same values for each of the four vertices.</span></span><br><span class="line">    <span class="comment">// TODO determine if this abstraction is a performance hit!</span></span><br><span class="line">    writeVector: <span class="function"><span class="keyword">function</span> <span class="params">(name, x, y)</span></span>{</span><br><span class="line">        <span class="keyword">var</span> a = <span class="keyword">this</span>._attribute_table[name];</span><br><span class="line">        <span class="keyword">var</span> stride = <span class="keyword">this</span>.stride, offset = a.offset+<span class="keyword">this</span>.ent_offset*stride, w = a.width;</span><br><span class="line">        <span class="keyword">var</span> l = (arguments.length-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">var</span> data = <span class="keyword">this</span>._attributeArray;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> r=<span class="number">0</span>; r&lt;<span class="number">4</span> ; r++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> c=<span class="number">0</span>; c&lt;w; c++){</span><br><span class="line">                data[offset + stride*r + c] = arguments[ (w*r + c) % l + <span class="number">1</span>];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #WebGL</span><br><span class="line"> * @category Graphics</span><br><span class="line"> * @trigger Draw - when the entity is ready to be drawn to the stage - {type: &quot;canvas&quot;, pos, co, ctx}</span><br><span class="line"> * @trigger NoCanvas - if the browser does not support canvas</span><br><span class="line"> *</span><br><span class="line"> * When this component is added to an entity it will be drawn to the global webgl canvas element. Its canvas element (and hence any WebGL entity) is always rendered below any DOM entities.</span><br><span class="line"> *</span><br><span class="line"> * Sprite, Image, SpriteAnimation, and Color all support WebGL rendering.  Text entities will need to use DOM or Canvas for now.</span><br><span class="line"> * </span><br><span class="line"> * If a webgl context does not yet exist, a WebGL entity will automatically create one by calling `Crafty.webgl.init()` before rendering.</span><br><span class="line"> *</span><br><span class="line"> * @note For better performance, minimize the number of spritesheets used, and try to arrange it so that entities with different spritesheets are on different z-levels.  This is because entities are rendered in z order, and only entities sharing the same texture can be efficiently batched.</span><br><span class="line"> *</span><br><span class="line"> * Create a webgl entity like this</span><br><span class="line"> *</span></span><br></pre></td></tr></table></figure>

 * var myEntity = Crafty.e(&quot;2D, WebGL, Color&quot;)
 *      .color(1, 1, 0, 0.5)
 *      .attr({x: 13, y: 37, w: 42, h: 42});
 *<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><span class="line"> */</span><br><span class="line"></span><br><span class="line">Crafty.c(<span class="string">&quot;WebGL&quot;</span>, {</span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.context</span><br><span class="line">     * @comp WebGL</span><br><span class="line">     * </span><br><span class="line">     * The webgl context this entity will be rendered to.</span><br><span class="line">     */</span></span><br><span class="line">    init: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (!Crafty.webgl.context) {</span><br><span class="line">            Crafty.webgl.init();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">var</span> webgl = <span class="keyword">this</span>.webgl = Crafty.webgl;</span><br><span class="line">        <span class="keyword">var</span> gl = webgl.context;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//increment the amount of canvas objs</span></span><br><span class="line">        <span class="keyword">this</span>._changed = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.bind(<span class="string">&quot;Change&quot;</span>, <span class="keyword">this</span>._glChange);</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    remove: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">this</span>._changed = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.unbind(<span class="keyword">this</span>._glChange);</span><br><span class="line">        <span class="comment">// Webgl components need to be removed from their gl program</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.program) {</span><br><span class="line">            <span class="keyword">this</span>.program.unregisterEntity(<span class="keyword">this</span>);</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    _glChange: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="comment">//flag if changed</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._changed === <span class="literal">false</span>) {</span><br><span class="line">            <span class="keyword">this</span>._changed = <span class="literal">true</span>;</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Cache the various objects and arrays used in draw</span></span><br><span class="line">    drawVars: {</span><br><span class="line">        type: <span class="string">&quot;webgl&quot;</span>,</span><br><span class="line">        pos: {},</span><br><span class="line">        ctx: <span class="literal">null</span>,</span><br><span class="line">        coord: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        co: {</span><br><span class="line">            x: <span class="number">0</span>,</span><br><span class="line">            y: <span class="number">0</span>,</span><br><span class="line">            w: <span class="number">0</span>,</span><br><span class="line">            h: <span class="number">0</span></span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.draw</span><br><span class="line">     * @comp WebGL</span><br><span class="line">     * @sign public this .draw([[Context ctx, ]Number x, Number y, Number w, Number h])</span><br><span class="line">     * @param ctx - Optionally supply a different r 2D context if drawing on another canvas is required</span><br><span class="line">     * @param x - X offset for drawing a segment</span><br><span class="line">     * @param y - Y offset for drawing a segment</span><br><span class="line">     * @param w - Width of the segment to draw</span><br><span class="line">     * @param h - Height of the segment to draw</span><br><span class="line">     *</span><br><span class="line">     * An internal method to draw the entity on the webgl canvas element. Rather then rendering directly, it writes relevent information into a buffer to allow batch rendering.</span><br><span class="line">     */</span></span><br><span class="line">    draw: <span class="function"><span class="keyword">function</span> <span class="params">(ctx, x, y, w, h)</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.ready) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (arguments.length === <span class="number">4</span>) {</span><br><span class="line">            h = w;</span><br><span class="line">            w = y;</span><br><span class="line">            y = x;</span><br><span class="line">            x = ctx;</span><br><span class="line">            ctx = <span class="keyword">this</span>.webgl.context;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> pos = <span class="keyword">this</span>.drawVars.pos;</span><br><span class="line">        pos._x = (<span class="keyword">this</span>._x + (x || <span class="number">0</span>));</span><br><span class="line">        pos._y = (<span class="keyword">this</span>._y + (y || <span class="number">0</span>));</span><br><span class="line">        pos._w = (w || <span class="keyword">this</span>._w);</span><br><span class="line">        pos._h = (h || <span class="keyword">this</span>._h);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> coord = <span class="keyword">this</span>.__coord || [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>];</span><br><span class="line">        <span class="keyword">var</span> co = <span class="keyword">this</span>.drawVars.co;</span><br><span class="line">        co.x = coord[<span class="number">0</span>] + (x || <span class="number">0</span>);</span><br><span class="line">        co.y = coord[<span class="number">1</span>] + (y || <span class="number">0</span>);</span><br><span class="line">        co.w = w || coord[<span class="number">2</span>];</span><br><span class="line">        co.h = h || coord[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handle flipX, flipY</span></span><br><span class="line">        <span class="comment">// (Just swap the positions of e.g. x and x+w)</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._flipX ) {</span><br><span class="line">           co.x = co.x + co.w;</span><br><span class="line">           co.w = - co.w;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._flipY ) {</span><br><span class="line">           co.y = co.y + co.h;</span><br><span class="line">           co.h = - co.h;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Draw entity</span></span><br><span class="line">        <span class="keyword">var</span> gl = <span class="keyword">this</span>.webgl.context;</span><br><span class="line">        <span class="keyword">this</span>.drawVars.gl = gl;</span><br><span class="line">        <span class="keyword">var</span> prog = <span class="keyword">this</span>.drawVars.program = <span class="keyword">this</span>.program;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The program might need to refer to the current element&apos;s index</span></span><br><span class="line">        prog.setCurrentEntity(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// Write position; x, y, w, h</span></span><br><span class="line">        prog.writeVector(<span class="string">&quot;aPosition&quot;</span>,</span><br><span class="line">            <span class="keyword">this</span>._x, <span class="keyword">this</span>._y,</span><br><span class="line">            <span class="keyword">this</span>._x , <span class="keyword">this</span>._y + <span class="keyword">this</span>._h,</span><br><span class="line">            <span class="keyword">this</span>._x + <span class="keyword">this</span>._w, <span class="keyword">this</span>._y,</span><br><span class="line">            <span class="keyword">this</span>._x + <span class="keyword">this</span>._w, <span class="keyword">this</span>._y + <span class="keyword">this</span>._h</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write orientation </span></span><br><span class="line">        prog.writeVector(<span class="string">&quot;aOrientation&quot;</span>,</span><br><span class="line">            <span class="keyword">this</span>._origin.x + <span class="keyword">this</span>._x,</span><br><span class="line">            <span class="keyword">this</span>._origin.y + <span class="keyword">this</span>._y,</span><br><span class="line">            <span class="keyword">this</span>._rotation * Math.PI / <span class="number">180</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write z, alpha</span></span><br><span class="line">        prog.writeVector(<span class="string">&quot;aLayer&quot;</span>,</span><br><span class="line">            <span class="keyword">this</span>._globalZ,</span><br><span class="line">            <span class="keyword">this</span>._alpha</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// This should only need to handle *specific* attributes!</span></span><br><span class="line">        <span class="keyword">this</span>.trigger(<span class="string">&quot;Draw&quot;</span>, <span class="keyword">this</span>.drawVars);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Register the vertex groups to be drawn, referring to this entities position in the big buffer</span></span><br><span class="line">        prog.addIndices(prog.ent_offset);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">// v_src is optional, there&apos;s a default vertex shader that works for regular rectangular entities</span></span><br><span class="line">    _establishShader: <span class="function"><span class="keyword">function</span><span class="params">(compName, f_src, v_src, attributes)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.program = <span class="keyword">this</span>.webgl.getProgramWrapper(compName, f_src, v_src, attributes);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Needs to know where in the big array we are!</span></span><br><span class="line">        <span class="keyword">this</span>.program.registerEntity(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// Shader program means ready</span></span><br><span class="line">        <span class="keyword">this</span>.ready = <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Crafty.webgl</span><br><span class="line"> * @category Graphics</span><br><span class="line"> *</span><br><span class="line"> * A collection of methods to handle webgl contexts.</span><br><span class="line"> */</span></span><br><span class="line">Crafty.extend({</span><br><span class="line"></span><br><span class="line">    webgl: {</span><br><span class="line">        <span class="comment">/**@</span><br><span class="line">         * #Crafty.webgl.context</span><br><span class="line">         * @comp Crafty.webgl</span><br><span class="line">         *</span><br><span class="line">         * This will return the context of the webgl canvas element.</span><br><span class="line">         */</span></span><br><span class="line">        context: <span class="literal">null</span>,</span><br><span class="line">        changed_objects: [],</span><br><span class="line">   </span><br><span class="line">       <span class="comment">// Create a vertex or fragment shader, given the source and type</span></span><br><span class="line">       _compileShader: <span class="function"><span class="keyword">function</span> <span class="params">(src, type)</span></span>{</span><br><span class="line">            <span class="keyword">var</span> gl = <span class="keyword">this</span>.context;</span><br><span class="line">            <span class="keyword">var</span> shader = gl.createShader(type);</span><br><span class="line">            gl.shaderSource(shader, src);</span><br><span class="line">            gl.compileShader(shader);</span><br><span class="line">            <span class="keyword">if</span> (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {</span><br><span class="line">              <span class="keyword">throw</span>(gl.getShaderInfoLog(shader));</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> shader;</span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create and return a complete, linked shader program, given the source for the fragment and vertex shaders.</span></span><br><span class="line">        <span class="comment">// Will compile the two shaders and then link them together</span></span><br><span class="line">        _makeProgram: <span class="function"><span class="keyword">function</span> <span class="params">(fragment_src, vertex_src)</span></span>{</span><br><span class="line">            <span class="keyword">var</span> gl = <span class="keyword">this</span>.context;</span><br><span class="line">            <span class="keyword">var</span> fragment_shader = <span class="keyword">this</span>._compileShader(fragment_src, gl.FRAGMENT_SHADER);</span><br><span class="line">            <span class="keyword">var</span> vertex_shader = <span class="keyword">this</span>._compileShader(vertex_src, gl.VERTEX_SHADER);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> shaderProgram = gl.createProgram();</span><br><span class="line">            gl.attachShader(shaderProgram, vertex_shader);</span><br><span class="line">            gl.attachShader(shaderProgram, fragment_shader);</span><br><span class="line">            gl.linkProgram(shaderProgram);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {</span><br><span class="line">              <span class="keyword">throw</span>(<span class="string">&quot;Could not initialise shaders&quot;</span>);</span><br><span class="line">            }</span><br><span class="line">            </span><br><span class="line">            shaderProgram.viewport = gl.getUniformLocation(shaderProgram, <span class="string">&quot;uViewport&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> shaderProgram;</span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line">        programs: {},</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Will create and return a RenderProgramWrapper for a shader program.</span></span><br><span class="line">        <span class="comment">// name is a unique id, attributes an array of attribute names with their metadata.</span></span><br><span class="line">        <span class="comment">// Each attribute needs at least a `name`  and `width` property:</span></span><br><span class="line">        <span class="comment">//</span></span><br></pre></td></tr></table></figure>

        //   [
        //      {name:&quot;aPosition&quot;, width: 2},
        //      {name:&quot;aOrientation&quot;, width: 3},
        //      {name:&quot;aLayer&quot;, width:2},
        //      {name:&quot;aColor&quot;,  width: 4}
        //   ]
        // <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">// The &quot;aPositon&quot;, &quot;aOrientation&quot;, and &quot;aLayer&quot; attributes should be the same for any webgl entity,</span></span><br><span class="line">        <span class="comment">// since they support the basic 2D properties</span></span><br><span class="line">        getProgramWrapper: <span class="function"><span class="keyword">function</span>(<span class="params">name, fragment_src, vertex_src, attributes</span>)</span>{</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.programs[name] === <span class="literal">undefined</span>){</span><br><span class="line">                <span class="keyword">var</span> shader = <span class="keyword">this</span>._makeProgram(fragment_src, vertex_src);</span><br><span class="line">                <span class="keyword">var</span> program = <span class="keyword">new</span> RenderProgramWrapper(<span class="keyword">this</span>.context, shader);</span><br><span class="line">                program.name = name;</span><br><span class="line">                program.initAttributes(attributes);</span><br><span class="line">                program.setViewportUniforms(Crafty.viewport);</span><br><span class="line">                <span class="keyword">this</span>.programs[name] = program;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.programs[name];</span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Make a texture out of the given image element</span></span><br><span class="line">        <span class="comment">// The url is just used as a unique ID</span></span><br><span class="line">        makeTexture: <span class="function"><span class="keyword">function</span>(<span class="params">url, image, repeating</span>)</span>{</span><br><span class="line">            <span class="keyword">var</span> webgl = <span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">return</span> webgl.texture_manager.makeTexture(url, image, repeating);</span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**@</span><br><span class="line">         * #Crafty.webgl.init</span><br><span class="line">         * @comp Crafty.webgl</span><br><span class="line">         * @sign public void Crafty.webgl.init(void)</span><br><span class="line">         * @trigger NoWebGL - triggered if `Crafty.support.webgl` is false</span><br><span class="line">         *</span><br><span class="line">         * This will create a `canvas` element inside `Crafty.stage.elem`, used for displaying &quot;WebGL&quot; components.</span><br><span class="line">         *</span><br><span class="line">         * This method will automatically be called by any &quot;WebGL&quot; component if no `Crafty.webgl.context` is</span><br><span class="line">         * found, so it is not neccessary to call this manually.</span><br><span class="line">         */</span></span><br><span class="line">        init: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line"></span><br><span class="line">            <span class="comment">//check if we support webgl is supported</span></span><br><span class="line">            <span class="keyword">if</span> (!Crafty.support.webgl) {</span><br><span class="line">                Crafty.trigger(<span class="string">&quot;NoWebGL&quot;</span>);</span><br><span class="line">                Crafty.stop();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">// necessary on restart</span></span><br><span class="line">            <span class="keyword">this</span>.changed_objects = [];</span><br><span class="line"></span><br><span class="line">            <span class="comment">//create an empty canvas element</span></span><br><span class="line">            <span class="keyword">var</span> c;</span><br><span class="line">            c = <span class="built_in">document</span>.createElement(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">            c.width = Crafty.viewport.width;</span><br><span class="line">            c.height = Crafty.viewport.height;</span><br><span class="line">            c.style.position = <span class="string">&apos;absolute&apos;</span>;</span><br><span class="line">            c.style.left = <span class="string">&quot;0px&quot;</span>;</span><br><span class="line">            c.style.top = <span class="string">&quot;0px&quot;</span>;</span><br><span class="line"></span><br><span class="line">            Crafty.stage.elem.appendChild(c);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Try to get a webgl context</span></span><br><span class="line">            <span class="keyword">var</span> gl;</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                gl = c.getContext(<span class="string">&quot;webgl&quot;</span>, { premultipliedalpha: <span class="literal">true</span> }) || c.getContext(<span class="string">&quot;experimental-webgl&quot;</span>, { premultipliedalpha: <span class="literal">true</span> });</span><br><span class="line">                gl.viewportWidth = c.width;</span><br><span class="line">                gl.viewportHeight = c.height;</span><br><span class="line">            } <span class="keyword">catch</span>(e) {</span><br><span class="line">                Crafty.trigger(<span class="string">&quot;NoWebGL&quot;</span>);</span><br><span class="line">                Crafty.stop();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">// assign to this renderer</span></span><br><span class="line">            <span class="keyword">this</span>.context = gl;</span><br><span class="line">            <span class="keyword">this</span>._canvas = c;</span><br><span class="line"></span><br><span class="line">            gl.clearColor(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// These commands allow partial transparency, but require drawing in z-order</span></span><br><span class="line">            gl.disable(gl.DEPTH_TEST);</span><br><span class="line">            <span class="comment">// This particular blend function requires the shader programs to output pre-multiplied alpha</span></span><br><span class="line">            <span class="comment">// This is necessary to match the blending of canvas/dom entities against the background color</span></span><br><span class="line">            gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);</span><br><span class="line">            gl.enable(gl.BLEND);</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            <span class="comment">//Bind rendering of canvas context (see drawing.js)</span></span><br><span class="line">            <span class="keyword">var</span> webgl = <span class="keyword">this</span>;</span><br><span class="line">            Crafty.uniqueBind(<span class="string">&quot;RenderScene&quot;</span>, webgl.render);</span><br><span class="line">            Crafty.uniqueBind(<span class="string">&quot;ViewportResize&quot;</span>, webgl._resize);</span><br><span class="line">            Crafty.uniqueBind(<span class="string">&quot;InvalidateViewport&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{webgl.dirtyViewport = <span class="literal">true</span>;});</span><br><span class="line">            Crafty.uniqueBind(<span class="string">&quot;PixelartSet&quot;</span>, webgl._setPixelart);</span><br><span class="line">            webgl._setPixelart(Crafty._pixelartEnabled);</span><br><span class="line">            <span class="keyword">this</span>.dirtyViewport = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.texture_manager = <span class="keyword">new</span> Crafty.TextureManager(gl, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Called when the viewport resizes</span></span><br><span class="line">        _resize: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="keyword">var</span> c = Crafty.webgl._canvas;</span><br><span class="line">            c.width = Crafty.viewport.width;</span><br><span class="line">            c.height = Crafty.viewport.height;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> gl = Crafty.webgl.context;</span><br><span class="line">            gl.viewportWidth = c.width;</span><br><span class="line">            gl.viewportHeight = c.height;</span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO consider shifting to texturemanager</span></span><br><span class="line">        _setPixelart: <span class="function"><span class="keyword">function</span>(<span class="params">enabled</span>) </span>{</span><br><span class="line">            <span class="keyword">var</span> gl = Crafty.webgl.context;</span><br><span class="line">            <span class="keyword">if</span> (enabled){</span><br><span class="line">                Crafty.webgl.texture_filter = gl.NEAREST;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                Crafty.webgl.texture_filter = gl.LINEAR;</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line">        <span class="comment">// convenicne to sort array by global Z</span></span><br><span class="line">        zsort: <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>{</span><br><span class="line">                <span class="keyword">return</span> a._globalZ - b._globalZ;</span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Hold an array ref to avoid garbage</span></span><br><span class="line">        visible_gl: [],</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Render any entities associated with this context; called in response to a draw event</span></span><br><span class="line">        render: <span class="function"><span class="keyword">function</span>(<span class="params">rect</span>)</span>{</span><br><span class="line">            rect = rect || Crafty.viewport.rect();</span><br><span class="line">            <span class="keyword">var</span> webgl = Crafty.webgl,</span><br><span class="line">                gl = webgl.context;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Set viewport and clear it</span></span><br><span class="line">            gl.viewport(<span class="number">0</span>, <span class="number">0</span>, gl.viewportWidth, gl.viewportHeight);</span><br><span class="line">            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//Set the viewport uniform variables used by each registered program</span></span><br><span class="line">            <span class="keyword">var</span> programs = webgl.programs;</span><br><span class="line">            <span class="keyword">if</span> (webgl.dirtyViewport){</span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">var</span> comp <span class="keyword">in</span> programs) {</span><br><span class="line">                  programs[comp].setViewportUniforms(Crafty.viewport);</span><br><span class="line">              }</span><br><span class="line">              webgl.dirtyViewport = <span class="literal">false</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Search for any entities in the given area (viewport unless otherwise specified)</span></span><br><span class="line">            <span class="keyword">var</span> q = Crafty.map.search(rect),</span><br><span class="line">                i = <span class="number">0</span>,</span><br><span class="line">                l = q.length,</span><br><span class="line">                current;</span><br><span class="line">            <span class="comment">//From all potential candidates, build a list of visible entities, then sort by zorder</span></span><br><span class="line">            <span class="keyword">var</span> visible_gl = webgl.visible_gl;</span><br><span class="line">            visible_gl.length = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; l; i++) {</span><br><span class="line">                current = q[i];</span><br><span class="line">                <span class="keyword">if</span> (current._visible &amp;&amp; current.__c.WebGL &amp;&amp; current.program) {</span><br><span class="line">                    visible_gl.push(current);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            visible_gl.sort(webgl.zsort);</span><br><span class="line">            l = visible_gl.length;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Now iterate through the z-sorted entities to be rendered</span></span><br><span class="line">            <span class="comment">// Each entity writes it&apos;s data into a typed array</span></span><br><span class="line">            <span class="comment">// The entities are rendered in batches, where the entire array is copied to a buffer in one operation</span></span><br><span class="line">            <span class="comment">// A batch is rendered whenever the next element needs to use a different type of program</span></span><br><span class="line">            <span class="comment">// Therefore, you get better performance by grouping programs by z-order if possible.</span></span><br><span class="line">            <span class="comment">// (Each sprite sheet will use a different program, but multiple sprites on the same sheet can be rendered in one batch)</span></span><br><span class="line">            <span class="keyword">var</span> batchCount = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">var</span> shaderProgram = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; l; i++) {</span><br><span class="line">                current = visible_gl[i];</span><br><span class="line">                <span class="keyword">if</span> (shaderProgram !== current.program){</span><br><span class="line">                  <span class="keyword">if</span> (shaderProgram !== <span class="literal">null</span>){</span><br><span class="line">                    shaderProgram.renderBatch();</span><br><span class="line">                  }</span><br><span class="line"></span><br><span class="line">                  shaderProgram = current.program;</span><br><span class="line">                  shaderProgram.index_pointer = <span class="number">0</span>;</span><br><span class="line">                  shaderProgram.switchTo();</span><br><span class="line">                }</span><br><span class="line">                current.draw();</span><br><span class="line">                current._changed = <span class="literal">false</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (shaderProgram !== <span class="literal">null</span>){</span><br><span class="line">              shaderProgram.renderBatch();</span><br><span class="line">            }</span><br><span class="line">            </span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line">},{<span class="string">&quot;../core/core.js&quot;</span>:<span class="number">7</span>}],<span class="number">36</span>:[<span class="function"><span class="keyword">function</span>(<span class="params">require,module,exports</span>)</span>{</span><br><span class="line"><span class="keyword">var</span> Crafty = <span class="built_in">require</span>(<span class="string">&apos;../core/core.js&apos;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Crafty.extend({</span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #Crafty.diamondIso</span><br><span class="line">     * @category 2D</span><br><span class="line">     * Place entities in a 45deg diamond isometric fashion. It is similar to isometric but has another grid locations</span><br><span class="line">     * In this mode, the x axis and y axis are aligned to the edges of tiles with x increasing being down and to the</span><br><span class="line">     * right and y being down and to the left.</span><br><span class="line">     */</span></span><br><span class="line">    diamondIso: {</span><br><span class="line">        _tile: {</span><br><span class="line">            width: <span class="number">0</span>,</span><br><span class="line">            height: <span class="number">0</span></span><br><span class="line">        },</span><br><span class="line">        getTileDimensions: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="keyword">return</span> {w:<span class="keyword">this</span>._tile.width,h:<span class="keyword">this</span>._tile.height};</span><br><span class="line">        },</span><br><span class="line">        _map: {</span><br><span class="line">            width: <span class="number">0</span>,</span><br><span class="line">            height: <span class="number">0</span></span><br><span class="line">        },</span><br><span class="line">        _origin: {</span><br><span class="line">            x: <span class="number">0</span>,</span><br><span class="line">            y: <span class="number">0</span></span><br><span class="line">        },</span><br><span class="line">        _tiles: [],</span><br><span class="line">        getTile: <span class="function"><span class="keyword">function</span>(<span class="params">x,y,z</span>)</span>{</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>._tiles[x][y][z];</span><br><span class="line">        },</span><br><span class="line">        <span class="comment">/**@</span><br><span class="line">         * #Crafty.diamondIso.init</span><br><span class="line">         * @comp Crafty.diamondIso</span><br><span class="line">         * @sign public this Crafty.diamondIso.init(Number tileWidth,Number tileHeight,Number mapWidth,Number mapHeight)</span><br><span class="line">         * @param tileWidth - The size of base tile width&apos;s grid space in Pixel</span><br><span class="line">         * @param tileHeight - The size of base tile height grid space in Pixel</span><br><span class="line">         * @param mapWidth - The width of whole map in Tiles</span><br><span class="line">         * @param mapHeight - The height of whole map in Tiles</span><br><span class="line">         * @param x - the x coordinate of the TOP corner of the 0,0 tile</span><br><span class="line">         * @param y - the y coordinate of the TOP corner of the 0,0, tile</span><br><span class="line">         *</span><br><span class="line">         * Method used to initialize the size of the isometric placement.</span><br><span class="line">         * Recommended to use a size alues in the power of `2` (128, 64 or 32).</span><br><span class="line">         * This makes it easy to calculate positions and implement zooming.</span><br><span class="line">         *</span><br><span class="line">         * @example</span><br><span class="line">         *</span></span><br></pre></td></tr></table></figure>

         * var iso = Crafty.diamondIso.init(64,128,20,20);
         * <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> *</span><br><span class="line"> * @see Crafty.diamondIso.place</span><br><span class="line"> */</span><br><span class="line">init: function (tw, th, mw, mh, x, y) {</span><br><span class="line">    <span class="keyword">this</span>._tile.width = parseInt(tw, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">this</span>._tile.height = parseInt(th, <span class="number">10</span>) || parseInt(tw, <span class="number">10</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">this</span>._tile.r = <span class="keyword">this</span>._tile.width / <span class="keyword">this</span>._tile.height;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>._map.width = parseInt(mw, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">this</span>._map.height = parseInt(mh, <span class="number">10</span>) || parseInt(mw, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">for</span> (var i=<span class="number">0</span>; i&lt;mw; i++) {</span><br><span class="line">        <span class="keyword">this</span>._tiles[i]=Array();</span><br><span class="line">        <span class="keyword">for</span> (var j=<span class="number">0</span>; j&lt;mh; j++){</span><br><span class="line">        <span class="keyword">this</span>._tiles[i][j]=Array();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">this</span>.x = parseInt(x,<span class="number">10</span>) || <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.y = parseInt(y,<span class="number">10</span>) || <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.layerZLevel= (mw+mh+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">},</span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Crafty.diamondIso.place</span><br><span class="line"> * @comp Crafty.diamondIso</span><br><span class="line"> * @sign public this Crafty.diamondIso.place(Entity tile,Number x, Number y, Number layer)</span><br><span class="line"> * @param x - The `x` position to place the tile</span><br><span class="line"> * @param y - The `y` position to place the tile</span><br><span class="line"> * @param layer - The `z` position to place the tile</span><br><span class="line"> * @param tile - The entity that should be position in the isometric fashion</span><br><span class="line"> *</span><br><span class="line"> * Use this method to place an entity in an isometric grid.</span><br><span class="line"> *</span><br><span class="line"> * @example</span><br><span class="line"> *</span></span><br></pre></td></tr></table></figure>

         * var iso = Crafty.diamondIso.init(64,128,20,20);
         * isos.place(Crafty.e(&apos;2D, DOM, Color&apos;).color(&apos;red&apos;).attr({w:128, h:128}),1,1,2);
         * <figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line">         *</span><br><span class="line">         * @see Crafty.diamondIso.<span class="built_in">size</span></span><br><span class="line">         */</span><br><span class="line">        place: function (obj, x, y, layer) {</span><br><span class="line">            var pos = this.pos2px(x, y);</span><br><span class="line">            <span class="comment">//this calculation is weird because tile sprites are h*2</span></span><br><span class="line">            <span class="comment">//for tiles of size h in isometric</span></span><br><span class="line">            var objHeight = obj.tileHeight;</span><br><span class="line">            var spriteHeight =obj.h/this._tile.height;</span><br><span class="line">            obj.x = pos.x;</span><br><span class="line">            obj.y = pos.y - (spriteHeight-<span class="number">2</span>)*this._tile.height - this._tile.height*layer;</span><br><span class="line">            obj.z = this.getZAtLoc(x,y,layer);</span><br><span class="line">            <span class="keyword">for</span> (var i=<span class="number">0</span>; i&lt;=spriteHeight-<span class="number">2</span>; i++) {</span><br><span class="line">                var prevTile = this._tiles[x][y][layer+i];</span><br><span class="line">                <span class="keyword">if</span> (prevTile &amp;&amp; prevTile !== obj){</span><br><span class="line">                    prevTile.destroy();</span><br><span class="line">                }</span><br><span class="line">                this._tiles[x][y][layer+i] = obj;</span><br><span class="line">            }</span><br><span class="line">            return this;</span><br><span class="line"></span><br><span class="line">        },</span><br><span class="line">        detachTile: function(obj){</span><br><span class="line">            <span class="keyword">for</span> (var <span class="built_in">_x</span>=<span class="number">0</span>; <span class="built_in">_x</span>&lt;this._map.width; <span class="built_in">_x</span>++){</span><br><span class="line">                <span class="keyword">for</span> (var _y=<span class="number">0</span>; _y&lt;this._map.height; _y++){</span><br><span class="line">                    var len = this._tiles[<span class="built_in">_x</span>][_y].length;</span><br><span class="line">                    <span class="keyword">for</span>(var _z=<span class="number">0</span>; _z&lt;len; _z++){</span><br><span class="line">                        <span class="keyword">if</span> (this._tiles[<span class="built_in">_x</span>][_y][_z] &amp;&amp; obj === this._tiles[<span class="built_in">_x</span>][_y][_z]){</span><br><span class="line">                            tHeight=obj.h/this._tile.height;</span><br><span class="line">                            <span class="keyword">for</span> (var i=<span class="number">0</span>; i&lt;tHeight; i++){</span><br><span class="line">                                this._tiles[<span class="built_in">_x</span>][_y][_z+i] = undefined;</span><br><span class="line">                            }</span><br><span class="line">                            return {</span><br><span class="line">                                x:<span class="built_in">_x</span>,</span><br><span class="line">                                y:_y,</span><br><span class="line">                                z:_z</span><br><span class="line">                            };</span><br><span class="line">                        }</span><br><span class="line"></span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            return <span class="literal">false</span>;</span><br><span class="line">        },</span><br><span class="line">        centerAt: function (x, y) {</span><br><span class="line">            var pos = this.pos2px(x, y);</span><br><span class="line">            Crafty.viewport.x = -pos.x + Crafty.viewport.width / <span class="number">2</span> - this._tile.width;</span><br><span class="line">            Crafty.viewport.y = -pos.y + Crafty.viewport.height / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        },</span><br><span class="line">        getZAtLoc: function(x,y,layer){</span><br><span class="line">            return this.layerZLevel * layer + x+y;</span><br><span class="line">        },</span><br><span class="line">        pos2px: function (x, y) {</span><br><span class="line">        <span class="comment">/* This returns the correct coordinates to place the </span><br><span class="line">        object&apos;s top and left to fit inside the grid, which is</span><br><span class="line">        NOT inside of the tile for an isometric grid.  IF you</span><br><span class="line">        want the top corner of the diamond add tile width/2 */</span></span><br><span class="line">            return {</span><br><span class="line">                x: this.x + ((x - y - <span class="number">1</span>) * this._tile.width / <span class="number">2</span>),</span><br><span class="line">                y: this.y + ((x + y) * this._tile.height / <span class="number">2</span>)</span><br><span class="line">            };</span><br><span class="line">        },</span><br><span class="line">        px2pos: function (left, top) {</span><br><span class="line">        <span class="comment">/* This returns the x/y coordinates on z level 0.</span><br><span class="line">        @TODO add a specifying z level</span><br><span class="line">        */</span></span><br><span class="line">            var v1 = (top - this.y)/this._tile.height;</span><br><span class="line">            var v2 = (left - this.x)/this._tile.width;</span><br><span class="line">            var x = v1+v2;</span><br><span class="line">            var y = v1-v2;</span><br><span class="line">            inX = x&gt;<span class="number">0</span> &amp;&amp; x&lt;this._map.width;</span><br><span class="line">            inY = y&gt;<span class="number">0</span> &amp;&amp; y&lt;this._map.height;</span><br><span class="line">            <span class="keyword">if</span> (!inX || !inY){</span><br><span class="line">                return undefined;</span><br><span class="line">            }</span><br><span class="line">            return {</span><br><span class="line">                x: ~~x,</span><br><span class="line">                y: ~~y</span><br><span class="line">            };</span><br><span class="line">        },</span><br><span class="line">        getOverlappingTiles: function(x,y){</span><br><span class="line">        <span class="comment">/* This will find all of the tiles that might be at a given x/y in pixels */</span></span><br><span class="line">                var pos = this.px2pos(x,y);</span><br><span class="line">                var tiles = [];</span><br><span class="line">                var <span class="built_in">_x</span> = ~~pos.x;</span><br><span class="line">                var _y = ~~pos.y;</span><br><span class="line">                var maxX = this._map.width - <span class="built_in">_x</span>;</span><br><span class="line">                var maxY = this._map.height - _y;</span><br><span class="line">                var furthest = Math.<span class="built_in">min</span>(maxX, maxY);</span><br><span class="line">                var obj = this._tiles[<span class="built_in">_x</span>][_y][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (obj){</span><br><span class="line">                    tiles.push(obj);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">for</span> (var i=<span class="number">1</span>; i&lt;furthest; i++){</span><br><span class="line">                    var _obj= this._tiles[<span class="built_in">_x</span>+i][_y+i][i];</span><br><span class="line">                    <span class="keyword">if</span> (_obj){</span><br><span class="line">                        tiles.push(_obj);</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                return tiles;</span><br><span class="line">        },</span><br><span class="line">        polygon: function (obj) {</span><br><span class="line">            <span class="comment">/*I don&apos;t know what this is trying to do...*/</span></span><br><span class="line">            obj.requires(<span class="string">&quot;Collision&quot;</span>);</span><br><span class="line">            var marginX = <span class="number">0</span>,</span><br><span class="line">                marginY = <span class="number">0</span>;</span><br><span class="line">            var points = [</span><br><span class="line">                marginX - <span class="number">0</span>, obj.h - marginY - this._tile.height / <span class="number">2</span>,</span><br><span class="line">                marginX - this._tile.width / <span class="number">2</span>, obj.h - marginY - <span class="number">0</span>,</span><br><span class="line">                marginX - this._tile.width, obj.h - marginY - this._tile.height / <span class="number">2</span>,</span><br><span class="line">                marginX - this._tile.width / <span class="number">2</span>, obj.h - marginY - this._tile.height</span><br><span class="line">            ];</span><br><span class="line">            var poly = new Crafty.polygon(points);</span><br><span class="line">            return poly;</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">},{<span class="string">&quot;../core/core.js&quot;</span>:<span class="number">7</span>}],<span class="number">37</span>:[function(require,module,exports){</span><br><span class="line">var Crafty = require(<span class="string">&apos;../core/core.js&apos;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Crafty.extend({</span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #Crafty.isometric</span><br><span class="line">     * @category 2D</span><br><span class="line">     * Place entities in a 45deg isometric fashion. The alignment of this</span><br><span class="line">     * grid&apos;s axes for tile placement is 90 degrees.  If you are looking</span><br><span class="line">     * to have the grid of tile indicies for this.place aligned to the tiles</span><br><span class="line">     * themselves, use DiamondIso instead.</span><br><span class="line">     */</span></span><br><span class="line">    isometric: {</span><br><span class="line">        _tile: {</span><br><span class="line">            width: <span class="number">0</span>,</span><br><span class="line">            height: <span class="number">0</span></span><br><span class="line">        },</span><br><span class="line">        _elements: {},</span><br><span class="line">        _pos: {</span><br><span class="line">            x: <span class="number">0</span>,</span><br><span class="line">            y: <span class="number">0</span></span><br><span class="line">        },</span><br><span class="line">        _z: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">/**@</span><br><span class="line">         * #Crafty.isometric.size</span><br><span class="line">         * @comp Crafty.isometric</span><br><span class="line">         * @sign public this Crafty.isometric.size(Number tileSize)</span><br><span class="line">         * @param tileSize - The size of the tiles to place.</span><br><span class="line">         *</span><br><span class="line">         * Method used to initialize the size of the isometric placement.</span><br><span class="line">         * Recommended to use a size values in the power of `2` (128, 64 or 32).</span><br><span class="line">         * This makes it easy to calculate positions and implement zooming.</span><br><span class="line">         *</span><br><span class="line">         * @example</span><br><span class="line">         *</span></span><br></pre></td></tr></table></figure>

         * var iso = Crafty.isometric.size(128);
         * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@see Crafty.isometric.place</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">size: function (width, height) {</span><br><span class="line">    this._tile.width = width;</span><br><span class="line">    this._tile.height = height &gt; 0 ? height : width / 2; //Setup width/2 if height isn&apos;t set</span><br><span class="line">    return this;</span><br><span class="line">},</span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span>@</span><br><span class="line"> <span class="keyword">*</span> <span class="comment">#Crafty.isometric.place</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@comp Crafty.isometric</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@sign public this Crafty.isometric.place(Number x, Number y, Number z, Entity tile)</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param x - The `x` position to place the tile</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param y - The `y` position to place the tile</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param z - The `z` position or height to place the tile</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param tile - The entity that should be position in the isometric fashion</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> Use this method to place an entity in an isometric grid.</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@example</span></span><br><span class="line"> <span class="keyword">*</span></span><br></pre></td></tr></table></figure>

         * var iso = Crafty.isometric.size(128);
         * iso.place(2, 1, 0, Crafty.e(&apos;2D, DOM, Color&apos;).color(&apos;red&apos;).attr({w:128, h:128}));
         * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@see Crafty.isometric.size</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">place: function (x, y, z, obj) {</span><br><span class="line">    var pos = this.pos2px(x, y);</span><br><span class="line">    pos.top -= z <span class="keyword">*</span> (this._tile.height / 2);</span><br><span class="line">    obj.attr({</span><br><span class="line">        x: pos.left + Crafty.viewport._x,</span><br><span class="line">        y: pos.top + Crafty.viewport._y</span><br><span class="line">    }).z += z;</span><br><span class="line">    return this;</span><br><span class="line">},</span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span>@</span><br><span class="line"> <span class="keyword">*</span> <span class="comment">#Crafty.isometric.pos2px</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@comp Crafty.isometric</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@sign public Object Crafty.isometric.pos2px(Number x,Number y)</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param x - A position along the x axis</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param y - A position along the y axis</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@return An object with `left` and `top` fields {left Number,top Number}</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> This method converts a position in x and y coordinates to one in pixels</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@example</span></span><br><span class="line"> <span class="keyword">*</span></span><br></pre></td></tr></table></figure>

         * var iso = Crafty.isometric.size(128,96);
         * var position = iso.pos2px(100,100); //Object { left=12800, top=4800}
         * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">pos2px: function (x, y) {</span><br><span class="line">    return {</span><br><span class="line">        left: x <span class="keyword">*</span> this._tile.width + (y &amp; 1) <span class="keyword">*</span> (this._tile.width / 2),</span><br><span class="line">        top: y <span class="keyword">*</span> this._tile.height / 2</span><br><span class="line">    };</span><br><span class="line">},</span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span>@</span><br><span class="line"> <span class="keyword">*</span> <span class="comment">#Crafty.isometric.px2pos</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@comp Crafty.isometric</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@sign public Object Crafty.isometric.px2pos(Number left,Number top)</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param top - Offset from the top in pixels</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param left - Offset from the left in pixels</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@return An object with `x` and `y` fields representing the position</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> This method converts a position in pixels to x,y coordinates</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@example</span></span><br><span class="line"> <span class="keyword">*</span></span><br></pre></td></tr></table></figure>

         * var iso = Crafty.isometric.size(128,96);
         * var px = iso.pos2px(12800,4800);
         * Crafty.log(px); //Object { x=100, y=100}
         * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">px2pos: function (left, top) {</span><br><span class="line">    return {</span><br><span class="line">        x: -Math.ceil(-left / this._tile.width - (top &amp; 1) <span class="keyword">*</span> 0.5),</span><br><span class="line">        y: top / this._tile.height <span class="keyword">*</span> 2</span><br><span class="line">    };</span><br><span class="line">},</span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span>@</span><br><span class="line"> <span class="keyword">*</span> <span class="comment">#Crafty.isometric.centerAt</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@comp Crafty.isometric</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@sign public Obect Crafty.isometric.centerAt()</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@returns An object with `top` and `left` fields represneting the viewport&apos;s current center</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@sign public this Crafty.isometric.centerAt(Number x, Number y)</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param x - The x position to center at</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param y - The y position to center at</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> This method centers the Viewport at an `x,y` location or gives the current centerpoint of the viewport</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@example</span></span><br><span class="line"> <span class="keyword">*</span></span><br></pre></td></tr></table></figure>

         * var iso = Crafty.isometric.size(128,96).centerAt(10,10); //Viewport is now moved
         * //After moving the viewport by another event you can get the new center point
         * Crafty.log(iso.centerAt());
         * <figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> */</span><br><span class="line">centerAt: function (x, y) {</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">typeof</span> x == <span class="string">&quot;number&quot;</span> &amp;&amp; <span class="built_in">typeof</span> y == <span class="string">&quot;number&quot;</span>) {</span><br><span class="line">        var center = this.pos2px(x, y);</span><br><span class="line">        Crafty.viewport.<span class="built_in">_x</span> = -center.left + Crafty.viewport.width / <span class="number">2</span> - this._tile.width / <span class="number">2</span>;</span><br><span class="line">        Crafty.viewport._y = -center.top + Crafty.viewport.height / <span class="number">2</span> - this._tile.height / <span class="number">2</span>;</span><br><span class="line">        return this;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        return {</span><br><span class="line">            top: -Crafty.viewport._y + Crafty.viewport.height / <span class="number">2</span> - this._tile.height / <span class="number">2</span>,</span><br><span class="line">            left: -Crafty.viewport.<span class="built_in">_x</span> + Crafty.viewport.width / <span class="number">2</span> - this._tile.width / <span class="number">2</span></span><br><span class="line">        };</span><br><span class="line">    }</span><br><span class="line">},</span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Crafty.isometric.area</span><br><span class="line"> * @comp Crafty.isometric</span><br><span class="line"> * @sign public Object Crafty.isometric.area()</span><br><span class="line"> * @return An obect with `x` and `y` fields, each of which have a start and end field.</span><br><span class="line"> * In other words, the object has this structure: `{x:{start Number,end Number},y:{start Number,end Number}}`</span><br><span class="line"> *</span><br><span class="line"> * This method returns an object representing the bounds of the viewport</span><br><span class="line"> *</span><br><span class="line"> * @example</span><br><span class="line"> *</span></span><br></pre></td></tr></table></figure>

         * var iso = Crafty.isometric.size(128,96).centerAt(10,10); //Viewport is now moved
         * var area = iso.area(); //get the area
         * for(var y = area.y.start;y <= area.y.end;y++){="" *="" for(var="" x="area.x.start" ;x="" <="area.x.end;x++){" iso.place(x,y,0,crafty.e("2d,dom,gras"));="" display="" tiles="" in="" the="" screen="" }="" <figure="" class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line">         */</span><br><span class="line">        area: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">            <span class="comment">//Get the center Point in the viewport</span></span><br><span class="line">            <span class="keyword">var</span> center = this.centerAt();</span><br><span class="line">            <span class="keyword">var</span> start = this.px2pos(-center.left + Crafty.viewport.width / <span class="number">2</span>, -center.top + Crafty.viewport.height / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">var</span> end = this.px2pos(-center.left - Crafty.viewport.width / <span class="number">2</span>, -center.top - Crafty.viewport.height / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">return</span> {</span><br><span class="line">                x: {</span><br><span class="line">                    start: start.x,</span><br><span class="line">                    end: end.x</span><br><span class="line">                },</span><br><span class="line">                y: {</span><br><span class="line">                    start: start.y,</span><br><span class="line">                    end: end.y</span><br><span class="line">                }</span><br><span class="line">            };</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">},{<span class="string">&quot;../core/core.js&quot;</span>:<span class="number">7</span>}],<span class="number">38</span>:[<span class="function"><span class="keyword">function</span><span class="params">(require,module,exports)</span></span>{</span><br><span class="line"><span class="keyword">var</span> Crafty = <span class="keyword">require</span>(<span class="string">&apos;../core/core.js&apos;</span>),</span><br><span class="line">    document = window.document;</span><br><span class="line"></span><br><span class="line">Crafty.extend({</span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #Crafty.audio</span><br><span class="line">     * <span class="doctag">@category</span> Audio</span><br><span class="line">     *</span><br><span class="line">     * Add sound files and play them. Chooses best format for browser support.</span><br><span class="line">     * Due to the nature of HTML5 audio, three types of audio files will be</span><br><span class="line">     * required for cross-browser capabilities. These formats are MP3, Ogg and WAV.</span><br><span class="line">     * When sound was not muted on before pause, sound will be unmuted after unpause.</span><br><span class="line">     * When sound is muted Crafty.pause() does not have any effect on sound</span><br><span class="line">     *</span><br><span class="line">     * The maximum number of sounds that can be played simultaneously is defined by Crafty.audio.maxChannels.  The default value is 7.</span><br><span class="line">     */</span></span><br><span class="line">    audio: {</span><br><span class="line"></span><br><span class="line">        sounds: {},</span><br><span class="line">        supported: <span class="keyword">null</span>,</span><br><span class="line">        codecs: { <span class="comment">// Chart from jPlayer</span></span><br><span class="line">            ogg: <span class="string">&apos;audio/ogg; codecs=&quot;vorbis&quot;&apos;</span>, <span class="comment">//OGG</span></span><br><span class="line">            wav: <span class="string">&apos;audio/wav; codecs=&quot;1&quot;&apos;</span>, <span class="comment">// PCM</span></span><br><span class="line">            webma: <span class="string">&apos;audio/webm; codecs=&quot;vorbis&quot;&apos;</span>, <span class="comment">// WEBM</span></span><br><span class="line">            mp3: <span class="string">&apos;audio/mpeg; codecs=&quot;mp3&quot;&apos;</span>, <span class="comment">//MP3</span></span><br><span class="line">            m4a: <span class="string">&apos;audio/mp4; codecs=&quot;mp4a.40.2&quot;&apos;</span> <span class="comment">// AAC / MP4</span></span><br><span class="line">        },</span><br><span class="line">        volume: <span class="number">1</span>, <span class="comment">//Global Volume</span></span><br><span class="line">        muted: <span class="keyword">false</span>,</span><br><span class="line">        paused: <span class="keyword">false</span>,</span><br><span class="line">        playCheck: <span class="keyword">null</span>,</span><br><span class="line">        <span class="comment">/**</span><br><span class="line">         * Function to setup supported formats</span><br><span class="line">         **/</span></span><br><span class="line">        _canPlay: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">            this.supported = {};</span><br><span class="line">            <span class="comment">// Without support, no formats are supported</span></span><br><span class="line">            <span class="keyword">if</span> (!Crafty.support.audio)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">var</span> audio = this.audioElement(),</span><br><span class="line">                canplay;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i in this.codecs) {</span><br><span class="line">                canplay = audio.canPlayType(this.codecs[i]);</span><br><span class="line">                <span class="keyword">if</span> (canplay !== <span class="string">&quot;&quot;</span> &amp;&amp; canplay !== <span class="string">&quot;no&quot;</span>) {</span><br><span class="line">                    this.supported[i] = <span class="keyword">true</span>;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    this.supported[i] = <span class="keyword">false</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**@</span><br><span class="line">         * #Crafty.audio.supports</span><br><span class="line">         * <span class="doctag">@comp</span> Crafty.audio</span><br><span class="line">         * <span class="doctag">@sign</span> public this Crafty.audio.supports(String extension)</span><br><span class="line">         * <span class="doctag">@param</span> extension - A file extension to check audio support for</span><br><span class="line">         *</span><br><span class="line">         * Return true if the browser thinks it can play the given file type, otherwise false</span><br><span class="line">         */</span></span><br><span class="line">        supports: <span class="function"><span class="keyword">function</span> <span class="params">(extension)</span> </span>{</span><br><span class="line">            <span class="comment">// Build cache of supported formats, if necessary</span></span><br><span class="line">            <span class="keyword">if</span> (this.supported === <span class="keyword">null</span>)</span><br><span class="line">                this._canPlay();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (this.supported[extension])</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span><br><span class="line">         * Function to get an Audio Element</span><br><span class="line">         **/</span></span><br><span class="line">        audioElement: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">            <span class="comment">//IE does not support Audio Object</span></span><br><span class="line">            <span class="keyword">return</span> typeof Audio !== <span class="string">&apos;undefined&apos;</span> ? <span class="keyword">new</span> Audio(<span class="string">&quot;&quot;</span>) : document.createElement(<span class="string">&apos;audio&apos;</span>);</span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**@</span><br><span class="line">         * #Crafty.audio.create</span><br><span class="line">         * <span class="doctag">@comp</span> Crafty.audio</span><br><span class="line">         * <span class="doctag">@sign</span> public this Crafty.audio.create(String id, String url)</span><br><span class="line">         * <span class="doctag">@param</span> id - A string to refer to sounds</span><br><span class="line">         * <span class="doctag">@param</span> url - A string pointing to the sound file</span><br><span class="line">         *</span><br><span class="line">         * Creates an audio asset with the given id and resource.  `Crafty.audio.add` is a more flexible interface that allows cross-browser compatibility.</span><br><span class="line">         *</span><br><span class="line">         * If the sound file extension is not supported, returns false; otherwise, returns the audio asset.</span><br><span class="line">         */</span></span><br><span class="line">        create: <span class="function"><span class="keyword">function</span> <span class="params">(id, path)</span> </span>{</span><br><span class="line">            <span class="comment">//check extension, return if not supported</span></span><br><span class="line">            <span class="keyword">var</span> ext = path.substr(path.lastIndexOf(<span class="string">&apos;.&apos;</span>) + <span class="number">1</span>).toLowerCase();</span><br><span class="line">            <span class="keyword">if</span> (!this.supports(ext))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//initiate the audio element</span></span><br><span class="line">            <span class="keyword">var</span> audio = this.audioElement();</span><br><span class="line">            audio.id = id;</span><br><span class="line">            audio.preload = <span class="string">&quot;auto&quot;</span>;</span><br><span class="line">            audio.volume = Crafty.audio.volume;</span><br><span class="line">            audio.src = path;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//create an asset and metadata for the audio element</span></span><br><span class="line">            Crafty.asset(path, audio);</span><br><span class="line">            this.sounds[id] = {</span><br><span class="line">                obj: audio,</span><br><span class="line">                played: <span class="number">0</span>,</span><br><span class="line">                volume: Crafty.audio.volume</span><br><span class="line">            };</span><br><span class="line">            <span class="keyword">return</span> this.sounds[id];</span><br><span class="line"></span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**@</span><br><span class="line">         * #Crafty.audio.add</span><br><span class="line">         * <span class="doctag">@comp</span> Crafty.audio</span><br><span class="line">         * <span class="doctag">@sign</span> public this Crafty.audio.add(String id, String url)</span><br><span class="line">         * <span class="doctag">@param</span> id - A string to refer to sounds</span><br><span class="line">         * <span class="doctag">@param</span> url - A string pointing to the sound file</span><br><span class="line">         * <span class="doctag">@sign</span> public this Crafty.audio.add(String id, Array urls)</span><br><span class="line">         * <span class="doctag">@param</span> urls - Array of urls pointing to different format of the same sound, selecting the first that is playable</span><br><span class="line">         * <span class="doctag">@sign</span> public this Crafty.audio.add(Object map)</span><br><span class="line">         * <span class="doctag">@param</span> map - key-value pairs where the key is the `id` and the value is either a `url` or `urls`</span><br><span class="line">         *</span><br><span class="line">         * Loads a sound to be played. Due to the nature of HTML5 audio,</span><br><span class="line">         * three types of audio files will be required for cross-browser capabilities.</span><br><span class="line">         * These formats are MP3, Ogg and WAV.</span><br><span class="line">         *</span><br><span class="line">         * Passing an array of URLs will determine which format the browser can play and select it over any other.</span><br><span class="line">         *</span><br><span class="line">         * Accepts an object where the key is the audio name and</span><br><span class="line">         * either a URL or an Array of URLs (to determine which type to use).</span><br><span class="line">         *</span><br><span class="line">         * The ID you use will be how you refer to that sound when using `Crafty.audio.play`.</span><br><span class="line">         *</span><br><span class="line">         * <span class="doctag">@example</span></span><br><span class="line">         *</span></span><br></pre></td></tr></table>

         * //adding audio from an object
         * Crafty.audio.add({
         *   shoot: [&quot;sounds/shoot.wav&quot;,
         *           &quot;sounds/shoot.mp3&quot;,
         *           &quot;sounds/shoot.ogg&quot;]
         * });
         *
         * //adding a single sound
         * Crafty.audio.add(&quot;walk&quot;, [
         * &quot;sounds/walk.mp3&quot;,
         * &quot;sounds/walk.ogg&quot;,
         * &quot;sounds/walk.wav&quot;
         * ]);
         *
         * //only one format
         * Crafty.audio.add(&quot;jump&quot;, &quot;sounds/jump.mp3&quot;);
         * <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"> */</span><br><span class="line">add: function (<span class="property">id</span>, url) {</span><br><span class="line">    <span class="keyword">if</span> (!Crafty.support.audio)</span><br><span class="line"><span class="command">        return</span>;</span><br><span class="line"></span><br><span class="line">    var src,</span><br><span class="line">        a;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (arguments.<span class="property">length</span> === <span class="number">1</span> &amp;&amp; typeof <span class="property">id</span> === <span class="string">&quot;object&quot;</span>) {</span><br><span class="line">        <span class="keyword">for</span> (var i <span class="keyword">in</span> <span class="property">id</span>) {</span><br><span class="line">            <span class="keyword">for</span> (src <span class="keyword">in</span> <span class="property">id</span>[i]) {</span><br><span class="line">                a = Crafty.audio.create(i, <span class="property">id</span>[i][src]);</span><br><span class="line">                <span class="keyword">if</span> (a){</span><br><span class="line">                    break;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (typeof <span class="property">id</span> === <span class="string">&quot;string&quot;</span>) {</span><br><span class="line">        <span class="keyword">if</span> (typeof url === <span class="string">&quot;string&quot;</span>) {</span><br><span class="line">            a = Crafty.audio.create(<span class="property">id</span>, url);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (typeof url === <span class="string">&quot;object&quot;</span>) {</span><br><span class="line">            <span class="keyword">for</span> (src <span class="keyword">in</span> url) {</span><br><span class="line">                a = Crafty.audio.create(<span class="property">id</span>, url[src]);</span><br><span class="line">                <span class="keyword">if</span> (a)</span><br><span class="line">                    break;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"><span class="command">    return</span> a;</span><br><span class="line">},</span><br><span class="line">/**@</span><br><span class="line"> * <span class="comment">#Crafty.audio.play</span></span><br><span class="line"> * @comp Crafty.audio</span><br><span class="line"> * @sign public this Crafty.audio.play(String <span class="property">id</span>)</span><br><span class="line"> * @sign public this Crafty.audio.play(String <span class="property">id</span>, Number repeatCount)</span><br><span class="line"> * @sign public this Crafty.audio.play(String <span class="property">id</span>, Number repeatCount, Number volume)</span><br><span class="line"> * @param <span class="property">id</span> - A <span class="type">string</span> <span class="keyword">to</span> refer <span class="keyword">to</span> sounds</span><br><span class="line"> * @param repeatCount - Repeat <span class="command">count</span> <span class="keyword">for</span> <span class="keyword">the</span> <span class="type">file</span>, <span class="keyword">where</span> -<span class="number">1</span> stands <span class="keyword">for</span> <span class="keyword">repeat</span> forever.</span><br><span class="line"> * @param volume - volume can be a <span class="type">number</span> <span class="keyword">between</span> <span class="number">0.0</span> <span class="keyword">and</span> <span class="number">1.0</span></span><br><span class="line"> * @returns The audio element used <span class="keyword">to</span> play <span class="keyword">the</span> sound.  Null <span class="keyword">if</span> <span class="keyword">the</span> call failed due <span class="keyword">to</span> a lack <span class="keyword">of</span> open channels.</span><br><span class="line"> *</span><br><span class="line"> * Will play a sound previously added <span class="keyword">by</span> using <span class="keyword">the</span> ID <span class="keyword">that</span> was used <span class="keyword">in</span> `Crafty.audio.add`.</span><br><span class="line"> * Has a default maximum <span class="keyword">of</span> <span class="number">5</span> channels so <span class="keyword">that</span> <span class="keyword">the</span> same sound can play simultaneously unless all <span class="keyword">of</span> <span class="keyword">the</span> channels are playing.</span><br><span class="line"></span><br><span class="line"> * *Note <span class="keyword">that</span> <span class="keyword">the</span> implementation <span class="keyword">of</span> HTML5 Audio <span class="keyword">is</span> buggy <span class="keyword">at</span> best.*</span><br><span class="line"> *</span><br><span class="line"> * @example</span><br><span class="line"> *</span><br></pre></td></tr></table></figure>

         * Crafty.audio.play(&quot;walk&quot;);
         *
         * //play and repeat forever
         * Crafty.audio.play(&quot;backgroundMusic&quot;, -1);
         * Crafty.audio.play(&quot;explosion&quot;,1,0.5); //play sound once with volume of 50%
         * <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"> */</span><br><span class="line">play: <span class="function"><span class="keyword">function</span> <span class="params">(id, repeat, volume)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (repeat === <span class="number">0</span> || !Crafty.support.audio || !<span class="keyword">this</span>.sounds[id])</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="keyword">this</span>.sounds[id];</span><br><span class="line">    <span class="keyword">var</span> c = <span class="keyword">this</span>.getOpenChannel();</span><br><span class="line">    <span class="keyword">if</span> (!c)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    c.id = id;</span><br><span class="line">    c.repeat = repeat;</span><br><span class="line">    <span class="keyword">var</span> a = c.obj;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    c.volume = s.volume = s.obj.volume = volume || Crafty.audio.volume;</span><br><span class="line"></span><br><span class="line">    a.volume = s.volume;</span><br><span class="line">    a.src = s.obj.src;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.muted)</span><br><span class="line">        a.volume = <span class="number">0</span>;</span><br><span class="line">    a.play();</span><br><span class="line">    s.played++;</span><br><span class="line">    c.onEnd = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (s.played &lt; c.repeat || repeat == -<span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.currentTime)</span><br><span class="line">                <span class="keyword">this</span>.currentTime = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>.play();</span><br><span class="line">            s.played++;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            c.active = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">this</span>.pause();</span><br><span class="line">            <span class="keyword">this</span>.removeEventListener(<span class="string">&quot;ended&quot;</span>, c.onEnd, <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">this</span>.currentTime = <span class="number">0</span>;</span><br><span class="line">            Crafty.trigger(<span class="string">&quot;SoundComplete&quot;</span>, {</span><br><span class="line">                id: c.id</span><br><span class="line">            });</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    };</span><br><span class="line">    a.addEventListener(<span class="string">&quot;ended&quot;</span>, c.onEnd, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Crafty.audio.setChannels</span><br><span class="line"> * @comp Crafty.audio</span><br><span class="line"> * @sign public this Crafty.audio.setChannels(Number n)</span><br><span class="line"> * @param n - The maximum number of channels</span><br><span class="line"> */</span></span><br><span class="line">maxChannels: <span class="number">7</span>,</span><br><span class="line">setChannels: <span class="function"><span class="keyword">function</span> <span class="params">(n)</span> </span>{</span><br><span class="line">    <span class="keyword">this</span>.maxChannels = n;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="keyword">this</span>.channels.length)</span><br><span class="line">        <span class="keyword">this</span>.channels.length = n;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">channels: [],</span><br><span class="line"><span class="comment">// Finds an unused audio element, marks it as in use, and return it.</span></span><br><span class="line">getOpenChannel: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.channels.length; i++) {</span><br><span class="line">        <span class="keyword">var</span> chan = <span class="keyword">this</span>.channels[i];</span><br><span class="line">          <span class="comment">/*</span><br><span class="line">           * Second test looks for stuff that&apos;s out of use,</span><br><span class="line">           * but fallen foul of Chromium bug 280417</span><br><span class="line">           */</span></span><br><span class="line">        <span class="keyword">if</span> (chan.active === <span class="literal">false</span> ||</span><br><span class="line">              chan.obj.ended &amp;&amp; chan.repeat &lt;= <span class="keyword">this</span>.sounds[chan.id].played) {</span><br><span class="line">            chan.active = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span> chan;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// If necessary, create a new element, unless we&apos;ve already reached the max limit</span></span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="keyword">this</span>.maxChannels) {</span><br><span class="line">        <span class="keyword">var</span> c = {</span><br><span class="line">            obj: <span class="keyword">this</span>.audioElement(),</span><br><span class="line">            active: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">// Checks that the channel is being used to play sound id</span></span><br><span class="line">            _is: <span class="function"><span class="keyword">function</span> <span class="params">(id)</span> </span>{</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.id === id &amp;&amp; <span class="keyword">this</span>.active;</span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line">        <span class="keyword">this</span>.channels.push(c);</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// In that case, return null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Crafty.audio.remove</span><br><span class="line"> * @comp Crafty.audio</span><br><span class="line"> * @sign public this Crafty.audio.remove([String id])</span><br><span class="line"> * @param id - A string to refer to sounds</span><br><span class="line"> *</span><br><span class="line"> * Will stop the sound and remove all references to the audio object allowing the browser to free the memory.</span><br><span class="line"> * If no id is given, all sounds will be removed.</span><br><span class="line"> * </span><br><span class="line"> * This function uses audio path set in Crafty.path in order to remove sound from the assets object.</span><br><span class="line"> *</span><br><span class="line"> * @example</span><br><span class="line"> *</span></span><br></pre></td></tr></table></figure>

         * Crafty.audio.remove(&quot;walk&quot;);
         * <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"> */</span><br><span class="line">remove: <span class="function"><span class="keyword">function</span> <span class="params">(id)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (!Crafty.support.audio)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> s, filename, audioFolder = Crafty.paths().audio;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!id) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> <span class="keyword">this</span>.sounds) {</span><br><span class="line">            s = <span class="keyword">this</span>.sounds[i];</span><br><span class="line">            filename = s.obj.src.split(<span class="string">&apos;/&apos;</span>).pop();</span><br><span class="line">            Crafty.audio.stop(id);</span><br><span class="line">            <span class="keyword">delete</span> Crafty.assets[audioFolder + filename];</span><br><span class="line">            <span class="keyword">delete</span> Crafty.assets[s.obj.src];</span><br><span class="line">            <span class="keyword">delete</span> Crafty.audio.sounds[id];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.sounds[id])</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    s = <span class="keyword">this</span>.sounds[id];</span><br><span class="line">    filename = s.obj.src.split(<span class="string">&apos;/&apos;</span>).pop();</span><br><span class="line">    Crafty.audio.stop(id);</span><br><span class="line">    <span class="keyword">delete</span> Crafty.assets[audioFolder + filename];</span><br><span class="line">    <span class="keyword">delete</span> Crafty.assets[s.obj.src];</span><br><span class="line">    <span class="keyword">delete</span> Crafty.audio.sounds[id];</span><br><span class="line">},</span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Crafty.audio.stop</span><br><span class="line"> * @comp Crafty.audio</span><br><span class="line"> * @sign public this Crafty.audio.stop([Number ID])</span><br><span class="line"> *</span><br><span class="line"> * Stops any playing sound. if id is not set, stop all sounds which are playing</span><br><span class="line"> *</span><br><span class="line"> * @example</span><br><span class="line"> *</span></span><br></pre></td></tr></table></figure>

         * //all sounds stopped playing now
         * Crafty.audio.stop();
         *
         * <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> */</span><br><span class="line">stop: function (<span class="property">id</span>) {</span><br><span class="line">    <span class="keyword">if</span> (!Crafty.support.audio)</span><br><span class="line"><span class="command">        return</span>;</span><br><span class="line">    <span class="keyword">for</span> (var i <span class="keyword">in</span> this.channels) {</span><br><span class="line">        c = this.channels[i];</span><br><span class="line">        <span class="keyword">if</span> ( (!<span class="property">id</span> &amp;&amp; c.active) || c._is(<span class="property">id</span>) ) {</span><br><span class="line">            c.active = <span class="constant">false</span>;</span><br><span class="line">            c.obj.pause();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"><span class="command">    return</span>;</span><br><span class="line">},</span><br><span class="line">/**</span><br><span class="line"> * <span class="comment">#Crafty.audio._mute</span></span><br><span class="line"> * @comp Crafty.audio</span><br><span class="line"> * @sign public this Crafty.audio._mute([Boolean mute])</span><br><span class="line"> *</span><br><span class="line"> * Mute <span class="keyword">or</span> unmute <span class="keyword">every</span> Audio instance <span class="keyword">that</span> <span class="keyword">is</span> playing.</span><br><span class="line"> */</span><br><span class="line">_mute: function (mute) {</span><br><span class="line">    <span class="keyword">if</span> (!Crafty.support.audio)</span><br><span class="line"><span class="command">        return</span>;</span><br><span class="line">    var c;</span><br><span class="line">    <span class="keyword">for</span> (var i <span class="keyword">in</span> this.channels) {</span><br><span class="line">        c = this.channels[i];</span><br><span class="line">        c.obj.volume = mute ? <span class="number">0</span> : c.volume;</span><br><span class="line">    }</span><br><span class="line">    this.muted = mute;</span><br><span class="line">},</span><br><span class="line">/**@</span><br><span class="line"> * <span class="comment">#Crafty.audio.toggleMute</span></span><br><span class="line"> * @comp Crafty.audio</span><br><span class="line"> * @sign public this Crafty.audio.toggleMute()</span><br><span class="line"> *</span><br><span class="line"> * Mute <span class="keyword">or</span> unmute <span class="keyword">every</span> Audio instance <span class="keyword">that</span> <span class="keyword">is</span> playing. Toggles <span class="keyword">between</span></span><br><span class="line"> * pausing <span class="keyword">or</span> playing depending <span class="function_start"><span class="keyword">on</span></span> <span class="keyword">the</span> state.</span><br><span class="line"> *</span><br><span class="line"> * @example</span><br><span class="line"> *</span><br></pre></td></tr></table></figure>

         * //toggle mute and unmute depending on current state
         * Crafty.audio.toggleMute();
         * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">toggleMute: function () {</span><br><span class="line">    if (!this.muted) {</span><br><span class="line">        this._mute(true);</span><br><span class="line">    } else {</span><br><span class="line">        this._mute(false);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">},</span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span>@</span><br><span class="line"> <span class="keyword">*</span> <span class="comment">#Crafty.audio.mute</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@comp Crafty.audio</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@sign public this Crafty.audio.mute()</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> Mute every Audio instance that is playing.</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@example</span></span><br><span class="line"> <span class="keyword">*</span></span><br></pre></td></tr></table></figure>

         * Crafty.audio.mute();
         * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">mute: function () {</span><br><span class="line">    this._mute(true);</span><br><span class="line">},</span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span>@</span><br><span class="line"> <span class="keyword">*</span> <span class="comment">#Crafty.audio.unmute</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@comp Crafty.audio</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@sign public this Crafty.audio.unmute()</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> Unmute every Audio instance that is playing.</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@example</span></span><br><span class="line"> <span class="keyword">*</span></span><br></pre></td></tr></table></figure>

         * Crafty.audio.unmute();
         * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">unmute: function () {</span><br><span class="line">    this._mute(false);</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span>@</span><br><span class="line"> <span class="keyword">*</span> <span class="comment">#Crafty.audio.pause</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@comp Crafty.audio</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@sign public this Crafty.audio.pause(string ID)</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param {string} id - The id of the audio object to pause</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> Pause the Audio instance specified by id param.</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@example</span></span><br><span class="line"> <span class="keyword">*</span></span><br></pre></td></tr></table></figure>

         * Crafty.audio.pause(&apos;music&apos;);
         * <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">pause: function (<span class="property">id</span>) {</span><br><span class="line">    <span class="keyword">if</span> (!Crafty.support.audio || !<span class="property">id</span> || !this.sounds[<span class="property">id</span>])</span><br><span class="line"><span class="command">        return</span>;</span><br><span class="line">    var c;</span><br><span class="line">    <span class="keyword">for</span> (var i <span class="keyword">in</span> this.channels) {</span><br><span class="line">        c = this.channels[i];</span><br><span class="line">        <span class="keyword">if</span> (c._is(<span class="property">id</span>) &amp;&amp; !c.obj.paused)</span><br><span class="line">            c.obj.pause();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">/**@</span><br><span class="line"> * <span class="comment">#Crafty.audio.unpause</span></span><br><span class="line"> * @comp Crafty.audio</span><br><span class="line"> * @sign public this Crafty.audio.unpause(<span class="type">string</span> ID)</span><br><span class="line"> * @param {<span class="type">string</span>} <span class="property">id</span> - The <span class="property">id</span> <span class="keyword">of</span> <span class="keyword">the</span> audio object <span class="keyword">to</span> unpause</span><br><span class="line"> *</span><br><span class="line"> * Resume playing <span class="keyword">the</span> Audio instance specified <span class="keyword">by</span> <span class="property">id</span> param.</span><br><span class="line"> *</span><br><span class="line"> * @example</span><br><span class="line"> *</span><br></pre></td></tr></table></figure>

         * Crafty.audio.unpause(&apos;music&apos;);
         * <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">unpause: function (<span class="property">id</span>) {</span><br><span class="line">    <span class="keyword">if</span> (!Crafty.support.audio || !<span class="property">id</span> || !this.sounds[<span class="property">id</span>])</span><br><span class="line"><span class="command">        return</span>;</span><br><span class="line">    var c;</span><br><span class="line">    <span class="keyword">for</span> (var i <span class="keyword">in</span> this.channels) {</span><br><span class="line">        c = this.channels[i];</span><br><span class="line">        <span class="keyword">if</span> (c._is(<span class="property">id</span>) &amp;&amp; c.obj.paused)</span><br><span class="line">            c.obj.play();</span><br><span class="line">    }</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">/**@</span><br><span class="line"> * <span class="comment">#Crafty.audio.togglePause</span></span><br><span class="line"> * @comp Crafty.audio</span><br><span class="line"> * @sign public this Crafty.audio.togglePause(<span class="type">string</span> ID)</span><br><span class="line"> * @param {<span class="type">string</span>} <span class="property">id</span> - The <span class="property">id</span> <span class="keyword">of</span> <span class="keyword">the</span> audio object <span class="keyword">to</span> pause/</span><br><span class="line"> *</span><br><span class="line"> * Toggle <span class="keyword">the</span> pause status <span class="keyword">of</span> <span class="keyword">the</span> Audio instance specified <span class="keyword">by</span> <span class="property">id</span> param.</span><br><span class="line"> *</span><br><span class="line"> * @example</span><br><span class="line"> *</span><br></pre></td></tr></table></figure>

         * Crafty.audio.togglePause(&apos;music&apos;);
         * <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">togglePause: function (<span class="property">id</span>) {</span><br><span class="line">    <span class="keyword">if</span> (!Crafty.support.audio || !<span class="property">id</span> || !this.sounds[<span class="property">id</span>])</span><br><span class="line"><span class="command">        return</span>;</span><br><span class="line">    var c;</span><br><span class="line">    <span class="keyword">for</span> (var i <span class="keyword">in</span> this.channels) {</span><br><span class="line">        c = this.channels[i];</span><br><span class="line">        <span class="keyword">if</span> (c._is(<span class="property">id</span>)) {</span><br><span class="line">            <span class="keyword">if</span> (c.obj.paused) {</span><br><span class="line">                c.obj.play();</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                c.obj.pause();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">/**@</span><br><span class="line"> * <span class="comment">#Crafty.audio.isPlaying</span></span><br><span class="line"> * @comp Crafty.audio</span><br><span class="line"> * @sign public Boolean Crafty.audio.isPlaying(<span class="type">string</span> ID)</span><br><span class="line"> * @param {<span class="type">string</span>} <span class="property">id</span> - The <span class="property">id</span> <span class="keyword">of</span> <span class="keyword">the</span> audio object</span><br><span class="line"> * @<span class="constant">return</span> a Boolean indicating whether <span class="keyword">the</span> audio <span class="keyword">is</span> playing <span class="keyword">or</span> <span class="keyword">not</span></span><br><span class="line"> *</span><br><span class="line"> * Check <span class="keyword">if</span> audio <span class="keyword">with</span> <span class="keyword">the</span> <span class="keyword">given</span> ID <span class="keyword">is</span> playing <span class="keyword">or</span> <span class="keyword">not</span> (<span class="function_start"><span class="keyword">on</span></span> <span class="keyword">at</span> least one channel).</span><br><span class="line"> *</span><br><span class="line"> * @example</span><br><span class="line"> *</span><br></pre></td></tr></table></figure>

         * var isPlaying = Crafty.audio.isPlaying(&apos;music&apos;);
         * <figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br></pre></td><td class="code"><pre><span class="line">         *</span><br><span class="line">         */</span><br><span class="line">        isPlaying: function(id) {</span><br><span class="line">            <span class="keyword">if</span> (!Crafty.support.audio)</span><br><span class="line">                return <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (var i <span class="built_in">in</span> this.channels) {</span><br><span class="line">                <span class="keyword">if</span> (this.channels[i]._is(id))</span><br><span class="line">                    return <span class="literal">true</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            return <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">},{<span class="string">&quot;../core/core.js&quot;</span>:<span class="number">7</span>}],<span class="number">39</span>:[function(require,module,exports){</span><br><span class="line">var Crafty = require(<span class="string">&apos;../core/core.js&apos;</span>),</span><br><span class="line">    HashMap = require(<span class="string">&apos;./spatial-grid.js&apos;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Crafty.map</span><br><span class="line"> * @category 2D</span><br><span class="line"> * Functions related with querying entities.</span><br><span class="line"> * @see Crafty.HashMap</span><br><span class="line"> */</span></span><br><span class="line">Crafty.map = new HashMap();</span><br><span class="line">var M = Math,</span><br><span class="line">    Mc = M.<span class="built_in">cos</span>,</span><br><span class="line">    Ms = M.<span class="built_in">sin</span>,</span><br><span class="line">    <span class="built_in">PI</span> = M.<span class="built_in">PI</span>,</span><br><span class="line">    DEG_TO_RAD = <span class="built_in">PI</span> / <span class="number">180</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #2D</span><br><span class="line"> * @category 2D</span><br><span class="line"> * Component for any entity that has a position on the stage.</span><br><span class="line"> * @trigger Move - when the entity has moved - { _x:Number, _y:Number, _w:Number, _h:Number } - Old position</span><br><span class="line"> * @trigger Invalidate - when the entity needs to be redrawn</span><br><span class="line"> * @trigger Rotate - when the entity is rotated - { cos:Number, sin:Number, deg:Number, rad:Number, o: {x:Number, y:Number}}</span><br><span class="line"> * @trigger Reorder - when the entity&apos;s z index has changed</span><br><span class="line"> */</span></span><br><span class="line">Crafty.c(<span class="string">&quot;2D&quot;</span>, {</span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.x</span><br><span class="line">     * @comp 2D</span><br><span class="line">     * The `x` position on the stage. When modified, will automatically be redrawn.</span><br><span class="line">     * Is actually a getter/setter so when using this value for calculations and not modifying it,</span><br><span class="line">     * use the `._x` property.</span><br><span class="line">     * @see ._attr</span><br><span class="line">     */</span></span><br><span class="line">    <span class="built_in">_x</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.y</span><br><span class="line">     * @comp 2D</span><br><span class="line">     * The `y` position on the stage. When modified, will automatically be redrawn.</span><br><span class="line">     * Is actually a getter/setter so when using this value for calculations and not modifying it,</span><br><span class="line">     * use the `._y` property.</span><br><span class="line">     * @see ._attr</span><br><span class="line">     */</span></span><br><span class="line">    _y: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.w</span><br><span class="line">     * @comp 2D</span><br><span class="line">     * The width of the entity. When modified, will automatically be redrawn.</span><br><span class="line">     * Is actually a getter/setter so when using this value for calculations and not modifying it,</span><br><span class="line">     * use the `._w` property.</span><br><span class="line">     *</span><br><span class="line">     * Changing this value is not recommended as canvas has terrible resize quality and DOM will just clip the image.</span><br><span class="line">     * @see ._attr</span><br><span class="line">     */</span></span><br><span class="line">    _w: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.h</span><br><span class="line">     * @comp 2D</span><br><span class="line">     * The height of the entity. When modified, will automatically be redrawn.</span><br><span class="line">     * Is actually a getter/setter so when using this value for calculations and not modifying it,</span><br><span class="line">     * use the `._h` property.</span><br><span class="line">     *</span><br><span class="line">     * Changing this value is not recommended as canvas has terrible resize quality and DOM will just clip the image.</span><br><span class="line">     * @see ._attr</span><br><span class="line">     */</span></span><br><span class="line">    _h: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.z</span><br><span class="line">     * @comp 2D</span><br><span class="line">     * The `z` index on the stage. When modified, will automatically be redrawn.</span><br><span class="line">     * Is actually a getter/setter so when using this value for calculations and not modifying it,</span><br><span class="line">     * use the `._z` property.</span><br><span class="line">     *</span><br><span class="line">     * A higher `z` value will be closer to the front of the stage. A smaller `z` value will be closer to the back.</span><br><span class="line">     * A global Z index is produced based on its `z` value as well as the GID (which entity was created first).</span><br><span class="line">     * Therefore entities will naturally maintain order depending on when it was created if same z value.</span><br><span class="line">     *</span><br><span class="line">     * `z` is required to be an integer, e.g. `z=11.2` is not allowed.</span><br><span class="line">     * @see ._attr</span><br><span class="line">     */</span></span><br><span class="line">    _z: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.rotation</span><br><span class="line">     * @comp 2D</span><br><span class="line">     * The rotation state of the entity, in clockwise degrees.</span><br><span class="line">     * `this.rotation = 0` sets it to its original orientation; `this.rotation = 10`</span><br><span class="line">     * sets it to 10 degrees clockwise from its original orientation;</span><br><span class="line">     * `this.rotation = -10` sets it to 10 degrees counterclockwise from its</span><br><span class="line">     * original orientation, etc.</span><br><span class="line">     *</span><br><span class="line">     * When modified, will automatically be redrawn. Is actually a getter/setter</span><br><span class="line">     * so when using this value for calculations and not modifying it,</span><br><span class="line">     * use the `._rotation` property.</span><br><span class="line">     *</span><br><span class="line">     * `this.rotation = 0` does the same thing as `this.rotation = 360` or `720` or</span><br><span class="line">     * `-360` or `36000` etc. So you can keep increasing or decreasing the angle for continuous</span><br><span class="line">     * rotation. (Numerical errors do not occur until you get to millions of degrees.)</span><br><span class="line">     *</span><br><span class="line">     * The default is to rotate the entity around its (initial) top-left corner; use</span><br><span class="line">     * `.origin()` to change that.</span><br><span class="line">     *</span><br><span class="line">     * @see ._attr, .origin</span><br><span class="line">     */</span></span><br><span class="line">    _rotation: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.alpha</span><br><span class="line">     * @comp 2D</span><br><span class="line">     * Transparency of an entity. Must be a decimal value between 0.0 being fully transparent to 1.0 being fully opaque.</span><br><span class="line">     */</span></span><br><span class="line">    _alpha: <span class="number">1.0</span>,</span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.visible</span><br><span class="line">     * @comp 2D</span><br><span class="line">     * If the entity is visible or not. Accepts a true or false value.</span><br><span class="line">     * Can be used for optimization by setting an entities visibility to false when not needed to be drawn.</span><br><span class="line">     *</span><br><span class="line">     * The entity will still exist and can be collided with but just won&apos;t be drawn.</span><br><span class="line">     */</span></span><br><span class="line">    _visible: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #._globalZ</span><br><span class="line">     * @comp 2D</span><br><span class="line">     * When two entities overlap, the one with the larger `_globalZ` will be on top of the other.</span><br><span class="line">     */</span></span><br><span class="line">    _globalZ: null,</span><br><span class="line"></span><br><span class="line">    _origin: null,</span><br><span class="line">    _mbr: null,</span><br><span class="line">    _entry: null,</span><br><span class="line">    _children: null,</span><br><span class="line">    _parent: null,</span><br><span class="line">    _changed: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Setup   all the properties that we need to define</span></span><br><span class="line">    _2D_property_definitions: {</span><br><span class="line">        x: {</span><br><span class="line">            <span class="built_in">set</span>: function (v) {</span><br><span class="line">                this._attr(<span class="string">&apos;_x&apos;</span>, v);</span><br><span class="line">            },</span><br><span class="line">            get: function () {</span><br><span class="line">                return this.<span class="built_in">_x</span>;</span><br><span class="line">            },</span><br><span class="line">            configurable: <span class="literal">true</span>,</span><br><span class="line">            enumerable: <span class="literal">true</span></span><br><span class="line">        },</span><br><span class="line">        <span class="built_in">_x</span>: {enumerable:<span class="literal">false</span>},</span><br><span class="line"></span><br><span class="line">        y: {</span><br><span class="line">            <span class="built_in">set</span>: function (v) {</span><br><span class="line">                this._attr(<span class="string">&apos;_y&apos;</span>, v);</span><br><span class="line">            },</span><br><span class="line">            get: function () {</span><br><span class="line">                return this._y;</span><br><span class="line">            },</span><br><span class="line">            configurable: <span class="literal">true</span>,</span><br><span class="line">            enumerable: <span class="literal">true</span></span><br><span class="line">        },</span><br><span class="line">        _y: {enumerable:<span class="literal">false</span>},</span><br><span class="line"></span><br><span class="line">        w: {</span><br><span class="line">            <span class="built_in">set</span>: function (v) {</span><br><span class="line">                this._attr(<span class="string">&apos;_w&apos;</span>, v);</span><br><span class="line">            },</span><br><span class="line">            get: function () {</span><br><span class="line">                return this._w;</span><br><span class="line">            },</span><br><span class="line">            configurable: <span class="literal">true</span>,</span><br><span class="line">            enumerable: <span class="literal">true</span></span><br><span class="line">        },</span><br><span class="line">        _w: {enumerable:<span class="literal">false</span>},</span><br><span class="line"></span><br><span class="line">        h: {</span><br><span class="line">            <span class="built_in">set</span>: function (v) {</span><br><span class="line">                this._attr(<span class="string">&apos;_h&apos;</span>, v);</span><br><span class="line">            },</span><br><span class="line">            get: function () {</span><br><span class="line">                return this._h;</span><br><span class="line">            },</span><br><span class="line">            configurable: <span class="literal">true</span>,</span><br><span class="line">            enumerable: <span class="literal">true</span></span><br><span class="line">        },</span><br><span class="line">        _h: {enumerable:<span class="literal">false</span>},</span><br><span class="line"></span><br><span class="line">        z: {</span><br><span class="line">            <span class="built_in">set</span>: function (v) {</span><br><span class="line">                this._attr(<span class="string">&apos;_z&apos;</span>, v);</span><br><span class="line">            },</span><br><span class="line">            get: function () {</span><br><span class="line">                return this._z;</span><br><span class="line">            },</span><br><span class="line">            configurable: <span class="literal">true</span>,</span><br><span class="line">            enumerable: <span class="literal">true</span></span><br><span class="line">        },</span><br><span class="line">        _z: {enumerable:<span class="literal">false</span>},</span><br><span class="line"></span><br><span class="line">        rotation: {</span><br><span class="line">            <span class="built_in">set</span>: function (v) {</span><br><span class="line">                this._attr(<span class="string">&apos;_rotation&apos;</span>, v);</span><br><span class="line">            },</span><br><span class="line">            get: function () {</span><br><span class="line">                return this._rotation;</span><br><span class="line">            },</span><br><span class="line">            configurable: <span class="literal">true</span>,</span><br><span class="line">            enumerable: <span class="literal">true</span></span><br><span class="line">        },</span><br><span class="line">        _rotation: {enumerable:<span class="literal">false</span>},</span><br><span class="line"></span><br><span class="line">        alpha: {</span><br><span class="line">            <span class="built_in">set</span>: function (v) {</span><br><span class="line">                this._attr(<span class="string">&apos;_alpha&apos;</span>, v);</span><br><span class="line">            },</span><br><span class="line">            get: function () {</span><br><span class="line">                return this._alpha;</span><br><span class="line">            },</span><br><span class="line">            configurable: <span class="literal">true</span>,</span><br><span class="line">            enumerable: <span class="literal">true</span></span><br><span class="line">        },</span><br><span class="line">        _alpha: {enumerable:<span class="literal">false</span>},</span><br><span class="line"></span><br><span class="line">        visible: {</span><br><span class="line">            <span class="built_in">set</span>: function (v) {</span><br><span class="line">                this._attr(<span class="string">&apos;_visible&apos;</span>, v);</span><br><span class="line">            },</span><br><span class="line">            get: function () {</span><br><span class="line">                return this._visible;</span><br><span class="line">            },</span><br><span class="line">            configurable: <span class="literal">true</span>,</span><br><span class="line">            enumerable: <span class="literal">true</span></span><br><span class="line">        },</span><br><span class="line">        _visible: {enumerable:<span class="literal">false</span>}</span><br><span class="line"></span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    _define2DProperties: function () {</span><br><span class="line">        <span class="keyword">for</span> (var prop <span class="built_in">in</span> this._2D_property_definitions){</span><br><span class="line">            Object.defineProperty(this, prop, this._2D_property_definitions[prop]);</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    init: function () {</span><br><span class="line">        this._globalZ = this[<span class="number">0</span>];</span><br><span class="line">        this._origin = {</span><br><span class="line">            x: <span class="number">0</span>,</span><br><span class="line">            y: <span class="number">0</span></span><br><span class="line">        };</span><br><span class="line"></span><br><span class="line">        <span class="comment">// offsets for the basic bounding box</span></span><br><span class="line">        this._bx1 = <span class="number">0</span>;</span><br><span class="line">        this._bx2 = <span class="number">0</span>;</span><br><span class="line">        this._by1 = <span class="number">0</span>;</span><br><span class="line">        this._by2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        this._children = [];</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// create setters and getters that associate properties such as x/_x</span></span><br><span class="line">        this._define2DProperties();</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="comment">//insert self into the HashMap</span></span><br><span class="line">        this._entry = Crafty.map.insert(this);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//when object changes, update HashMap</span></span><br><span class="line">        this.bind(<span class="string">&quot;Move&quot;</span>, function (e) {</span><br><span class="line">            <span class="comment">// Choose the largest bounding region that exists</span></span><br><span class="line">            var area = this._cbr || this._mbr || this;</span><br><span class="line">            this._entry.update(area);</span><br><span class="line">            <span class="comment">// Move children (if any) by the same amount</span></span><br><span class="line">            <span class="keyword">if</span> (this._children.length &gt; <span class="number">0</span>) {</span><br><span class="line">                this._cascade(e);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        this.bind(<span class="string">&quot;Rotate&quot;</span>, function (e) {</span><br><span class="line">            <span class="comment">// Choose the largest bounding region that exists</span></span><br><span class="line">            var old = this._cbr || this._mbr || this;</span><br><span class="line">            this._entry.update(old);</span><br><span class="line">            <span class="comment">// Rotate children (if any) by the same amount</span></span><br><span class="line">            <span class="keyword">if</span> (this._children.length &gt; <span class="number">0</span>) {</span><br><span class="line">                this._cascade(e);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="comment">//when object is removed, remove from HashMap and destroy attached children</span></span><br><span class="line">        this.bind(<span class="string">&quot;Remove&quot;</span>, function () {</span><br><span class="line">            <span class="keyword">if</span> (this._children) {</span><br><span class="line">                <span class="keyword">for</span> (var i = <span class="number">0</span>; i &lt; this._children.length; i++) {</span><br><span class="line">                    <span class="comment">// delete the child&apos;s _parent link, or else the child will splice itself out of</span></span><br><span class="line">                    <span class="comment">// this._children while destroying itself (which messes up this for-loop iteration).</span></span><br><span class="line">                    delete this._children[i]._parent;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Destroy child if possible (It&apos;s not always possible, e.g. the polygon attached</span></span><br><span class="line">                    <span class="comment">// by areaMap has no .destroy(), it will just get garbage-collected.)</span></span><br><span class="line">                    <span class="keyword">if</span> (this._children[i].destroy) {</span><br><span class="line">                        this._children[i].destroy();</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                this._children = [];</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (this._parent) {</span><br><span class="line">                this._parent.<span class="built_in">detach</span>(this);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            Crafty.map.remove(this);</span><br><span class="line"></span><br><span class="line">            this.<span class="built_in">detach</span>();</span><br><span class="line">        });</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.offsetBoundary</span><br><span class="line">     * @comp 2D</span><br><span class="line">     * Extends the MBR of the entity by a specified amount.</span><br><span class="line">     * </span><br><span class="line">     * @trigger BoundaryOffset - when the MBR offset changes</span><br><span class="line">     * @sign public this .offsetBoundary(Number dx1, Number dy1, Number dx2, Number dy2)</span><br><span class="line">     * @param dx1 - Extends the MBR to the left by this amount</span><br><span class="line">     * @param dy1 - Extends the MBR upward by this amount</span><br><span class="line">     * @param dx2 - Extends the MBR to the right by this amount</span><br><span class="line">     * @param dy2 - Extends the MBR downward by this amount</span><br><span class="line">     *</span><br><span class="line">     * @sign public this .offsetBoundary(Number offset)</span><br><span class="line">     * @param offset - Extend the MBR in all directions by this amount</span><br><span class="line">     *</span><br><span class="line">     * You would most likely use this function to ensure that custom canvas rendering beyond the extent of the entity&apos;s normal bounds is not clipped.</span><br><span class="line">     */</span></span><br><span class="line">    offsetBoundary: function(x1, y1, x2, y2){</span><br><span class="line">        <span class="keyword">if</span> (arguments.length === <span class="number">1</span>)</span><br><span class="line">            y1 = x2 = y2 = x1;</span><br><span class="line">        this._bx1 = x1;</span><br><span class="line">        this._bx2 = x2;</span><br><span class="line">        this._by1 = y1;</span><br><span class="line">        this._by2 = y2;</span><br><span class="line">        this.<span class="built_in">trigger</span>(<span class="string">&quot;BoundaryOffset&quot;</span>);</span><br><span class="line">        this._calculateMBR();</span><br><span class="line">        return this;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Calculates the MBR when rotated some number of radians about an origin point o.</span><br><span class="line">     * Necessary on a rotation, or a resize</span><br><span class="line">     */</span></span><br><span class="line"></span><br><span class="line">    _calculateMBR: function () {</span><br><span class="line">        var ox = this._origin.x + this.<span class="built_in">_x</span>,</span><br><span class="line">            oy = this._origin.y + this._y,</span><br><span class="line">            <span class="built_in">rad</span> = -this._rotation * DEG_TO_RAD;</span><br><span class="line">        <span class="comment">// axis-aligned (unrotated) coordinates, relative to the origin point</span></span><br><span class="line">        var dx1 = this.<span class="built_in">_x</span> - this._bx1 - ox,</span><br><span class="line">            dx2 = this.<span class="built_in">_x</span> + this._w + this._bx2 - ox,</span><br><span class="line">            dy1 = this._y - this._by1 - oy,</span><br><span class="line">            dy2 = this._y + this._h + this._by2 - oy;</span><br><span class="line"></span><br><span class="line">        var ct = Math.<span class="built_in">cos</span>(<span class="built_in">rad</span>),</span><br><span class="line">            st = Math.<span class="built_in">sin</span>(<span class="built_in">rad</span>);</span><br><span class="line">        <span class="comment">// Special case 90 degree rotations to prevent rounding problems</span></span><br><span class="line">        ct = (ct &lt; <span class="number">1</span>e-<span class="number">10</span> &amp;&amp; ct &gt; -<span class="number">1</span>e-<span class="number">10</span>) ? <span class="number">0</span> : ct;</span><br><span class="line">        st = (st &lt; <span class="number">1</span>e-<span class="number">10</span> &amp;&amp; st &gt; -<span class="number">1</span>e-<span class="number">10</span>) ? <span class="number">0</span> : st;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Calculate the new points relative to the origin, then find the new (absolute) bounding coordinates!</span></span><br><span class="line">        var x0 =   dx1 * ct + dy1 * st,</span><br><span class="line">            y0 = - dx1 * st + dy1 * ct,</span><br><span class="line">            x1 =   dx2 * ct + dy1 * st,</span><br><span class="line">            y1 = - dx2 * st + dy1 * ct,</span><br><span class="line">            x2 =   dx2 * ct + dy2 * st,</span><br><span class="line">            y2 = - dx2 * st + dy2 * ct,</span><br><span class="line">            x3 =   dx1 * ct + dy2 * st,</span><br><span class="line">            y3 = - dx1 * st + dy2 * ct,</span><br><span class="line">            minx = Math.<span class="built_in">floor</span>(Math.<span class="built_in">min</span>(x0, x1, x2, x3) + ox),</span><br><span class="line">            miny = Math.<span class="built_in">floor</span>(Math.<span class="built_in">min</span>(y0, y1, y2, y3) + oy),</span><br><span class="line">            maxx = Math.<span class="built_in">ceil</span>(Math.<span class="built_in">max</span>(x0, x1, x2, x3) + ox),</span><br><span class="line">            maxy = Math.<span class="built_in">ceil</span>(Math.<span class="built_in">max</span>(y0, y1, y2, y3) + oy);</span><br><span class="line">        <span class="keyword">if</span> (!this._mbr) {</span><br><span class="line">            this._mbr = {</span><br><span class="line">                <span class="built_in">_x</span>: minx,</span><br><span class="line">                _y: miny,</span><br><span class="line">                _w: maxx - minx,</span><br><span class="line">                _h: maxy - miny</span><br><span class="line">            };</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            this._mbr.<span class="built_in">_x</span> = minx;</span><br><span class="line">            this._mbr._y = miny;</span><br><span class="line">            this._mbr._w = maxx - minx;</span><br><span class="line">            this._mbr._h = maxy - miny;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If a collision hitbox exists AND sits outside the entity, find a bounding box for both.</span></span><br><span class="line">        <span class="comment">// `_cbr` contains information about a bounding circle of the hitbox. </span></span><br><span class="line">        <span class="comment">// The bounds of `_cbr` will be the union of the `_mbr` and the bounding box of that circle.</span></span><br><span class="line">        <span class="comment">// This will not be a minimal region, but since it&apos;s only used for the broad phase pass it&apos;s good enough. </span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// cbr is calculated by the `_checkBounds` method of the &quot;Collision&quot; component</span></span><br><span class="line">        <span class="keyword">if</span> (this._cbr) {</span><br><span class="line">            var cbr = this._cbr;</span><br><span class="line">            var cx = cbr.cx, cy = cbr.cy, r = cbr.r;</span><br><span class="line">            var cx2 = ox + (cx + this.<span class="built_in">_x</span> - ox) * ct + (cy + this._y - oy) * st;</span><br><span class="line">            var cy2 = oy - (cx + this.<span class="built_in">_x</span> - ox) * st + (cy + this._y - oy) * ct;</span><br><span class="line">            cbr.<span class="built_in">_x</span> = Math.<span class="built_in">min</span>(cx2 - r, minx);</span><br><span class="line">            cbr._y = Math.<span class="built_in">min</span>(cy2 - r, miny);</span><br><span class="line">            cbr._w = Math.<span class="built_in">max</span>(cx2 + r, maxx) - cbr.<span class="built_in">_x</span>;</span><br><span class="line">            cbr._h = Math.<span class="built_in">max</span>(cy2 + r, maxy) - cbr._y;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Handle changes that need to happen on a rotation</span><br><span class="line">     */</span></span><br><span class="line">    _rotate: function (v) {</span><br><span class="line">        var theta = -<span class="number">1</span> * (v % <span class="number">360</span>); <span class="comment">//angle always between 0 and 359</span></span><br><span class="line">        var difference = this._rotation - v;</span><br><span class="line">        <span class="comment">// skip if there&apos;s no rotation!</span></span><br><span class="line">        <span class="keyword">if</span> (difference === <span class="number">0</span>)</span><br><span class="line">            return;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            this._rotation = v;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Calculate the new MBR</span></span><br><span class="line">        var <span class="built_in">rad</span> = theta * DEG_TO_RAD,</span><br><span class="line">            o = {</span><br><span class="line">                x: this._origin.x + this.<span class="built_in">_x</span>,</span><br><span class="line">                y: this._origin.y + this._y</span><br><span class="line">            };</span><br><span class="line"></span><br><span class="line">        this._calculateMBR();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//trigger &quot;Rotate&quot; event</span></span><br><span class="line">        var drad = difference * DEG_TO_RAD,</span><br><span class="line">            <span class="comment">// ct = Math.cos(rad),</span></span><br><span class="line">            <span class="comment">// st = Math.sin(rad),</span></span><br><span class="line">            <span class="built_in">cos</span> = Math.<span class="built_in">cos</span>(drad),</span><br><span class="line">            <span class="built_in">sin</span> = Math.<span class="built_in">sin</span>(drad);</span><br><span class="line"></span><br><span class="line">        this.<span class="built_in">trigger</span>(<span class="string">&quot;Rotate&quot;</span>, {</span><br><span class="line">            <span class="built_in">cos</span>: (-<span class="number">1</span>e-<span class="number">10</span> &lt; <span class="built_in">cos</span> &amp;&amp; <span class="built_in">cos</span> &lt; <span class="number">1</span>e-<span class="number">10</span>) ? <span class="number">0</span> : <span class="built_in">cos</span>, <span class="comment">// Special case 90 degree rotations to prevent rounding problems</span></span><br><span class="line">            <span class="built_in">sin</span>: (-<span class="number">1</span>e-<span class="number">10</span> &lt; <span class="built_in">sin</span> &amp;&amp; <span class="built_in">sin</span> &lt; <span class="number">1</span>e-<span class="number">10</span>) ? <span class="number">0</span> : <span class="built_in">sin</span>, <span class="comment">// Special case 90 degree rotations to prevent rounding problems</span></span><br><span class="line">            <span class="built_in">deg</span>: difference,</span><br><span class="line">            <span class="built_in">rad</span>: drad,</span><br><span class="line">            o: o</span><br><span class="line">        });</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.area</span><br><span class="line">     * @comp 2D</span><br><span class="line">     * @sign public Number .area(void)</span><br><span class="line">     * Calculates the area of the entity</span><br><span class="line">     */</span></span><br><span class="line">    area: function () {</span><br><span class="line">        return this._w * this._h;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.intersect</span><br><span class="line">     * @comp 2D</span><br><span class="line">     * @sign public Boolean .intersect(Number x, Number y, Number w, Number h)</span><br><span class="line">     * @param x - X position of the rect</span><br><span class="line">     * @param y - Y position of the rect</span><br><span class="line">     * @param w - Width of the rect</span><br><span class="line">     * @param h - Height of the rect</span><br><span class="line">     * @sign public Boolean .intersect(Object rect)</span><br><span class="line">     * @param rect - An object that must have the `_x, _y, _w, _h` values as properties</span><br><span class="line">     *</span><br><span class="line">     * Determines if this entity intersects a rectangle.  If the entity is rotated, its MBR is used for the test.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="built_in">intersect</span>: function (x, y, w, h) {</span><br><span class="line">        var rect, mbr = this._mbr || this;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">typeof</span> x === <span class="string">&quot;object&quot;</span>) {</span><br><span class="line">            rect = x;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            rect = {</span><br><span class="line">                <span class="built_in">_x</span>: x,</span><br><span class="line">                _y: y,</span><br><span class="line">                _w: w,</span><br><span class="line">                _h: h</span><br><span class="line">            };</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        return mbr.<span class="built_in">_x</span> &lt; rect.<span class="built_in">_x</span> + rect._w &amp;&amp; mbr.<span class="built_in">_x</span> + mbr._w &gt; rect.<span class="built_in">_x</span> &amp;&amp;</span><br><span class="line">            mbr._y &lt; rect._y + rect._h &amp;&amp; mbr._y + mbr._h &gt; rect._y;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.within</span><br><span class="line">     * @comp 2D</span><br><span class="line">     * @sign public Boolean .within(Number x, Number y, Number w, Number h)</span><br><span class="line">     * @param x - X position of the rect</span><br><span class="line">     * @param y - Y position of the rect</span><br><span class="line">     * @param w - Width of the rect</span><br><span class="line">     * @param h - Height of the rect</span><br><span class="line">     * @sign public Boolean .within(Object rect)</span><br><span class="line">     * @param rect - An object that must have the `_x, _y, _w, _h` values as properties</span><br><span class="line">     *</span><br><span class="line">     * Determines if this current entity is within another rectangle.</span><br><span class="line">     */</span></span><br><span class="line">    within: function (x, y, w, h) {</span><br><span class="line">        var rect, mbr = this._mbr || this;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">typeof</span> x === <span class="string">&quot;object&quot;</span>) {</span><br><span class="line">            rect = x;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            rect = {</span><br><span class="line">                <span class="built_in">_x</span>: x,</span><br><span class="line">                _y: y,</span><br><span class="line">                _w: w,</span><br><span class="line">                _h: h</span><br><span class="line">            };</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        return rect.<span class="built_in">_x</span> &lt;= mbr.<span class="built_in">_x</span> &amp;&amp; rect.<span class="built_in">_x</span> + rect._w &gt;= mbr.<span class="built_in">_x</span> + mbr._w &amp;&amp;</span><br><span class="line">            rect._y &lt;= mbr._y &amp;&amp; rect._y + rect._h &gt;= mbr._y + mbr._h;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.contains</span><br><span class="line">     * @comp 2D</span><br><span class="line">     * @sign public Boolean .contains(Number x, Number y, Number w, Number h)</span><br><span class="line">     * @param x - X position of the rect</span><br><span class="line">     * @param y - Y position of the rect</span><br><span class="line">     * @param w - Width of the rect</span><br><span class="line">     * @param h - Height of the rect</span><br><span class="line">     * @sign public Boolean .contains(Object rect)</span><br><span class="line">     * @param rect - An object that must have the `_x, _y, _w, _h` values as properties.</span><br><span class="line">     *</span><br><span class="line">     * Determines if the rectangle is within the current entity.  If the entity is rotated, its MBR is used for the test.</span><br><span class="line">     */</span></span><br><span class="line">    contains: function (x, y, w, h) {</span><br><span class="line">        var rect, mbr = this._mbr || this;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">typeof</span> x === <span class="string">&quot;object&quot;</span>) {</span><br><span class="line">            rect = x;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            rect = {</span><br><span class="line">                <span class="built_in">_x</span>: x,</span><br><span class="line">                _y: y,</span><br><span class="line">                _w: w,</span><br><span class="line">                _h: h</span><br><span class="line">            };</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        return rect.<span class="built_in">_x</span> &gt;= mbr.<span class="built_in">_x</span> &amp;&amp; rect.<span class="built_in">_x</span> + rect._w &lt;= mbr.<span class="built_in">_x</span> + mbr._w &amp;&amp;</span><br><span class="line">            rect._y &gt;= mbr._y &amp;&amp; rect._y + rect._h &lt;= mbr._y + mbr._h;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.pos</span><br><span class="line">     * @comp 2D</span><br><span class="line">     * @sign public Object .pos([Object pos])</span><br><span class="line">     * @param pos - an object to use as output</span><br><span class="line">     *</span><br><span class="line">     * @returns An object with this entity&apos;s `_x`, `_y`, `_w`, and `_h` values. </span><br><span class="line">     *          If an object is passed in, it will be reused rather than creating a new object.</span><br><span class="line">     *</span><br><span class="line">     * @note The keys have an underscore prefix. This is due to the x, y, w, h</span><br><span class="line">     * properties being setters and getters that wrap the underlying properties with an underscore (_x, _y, _w, _h).</span><br><span class="line">     */</span></span><br><span class="line">    pos: function (pos) {</span><br><span class="line">        pos = pos || {};</span><br><span class="line">        pos.<span class="built_in">_x</span> = (this.<span class="built_in">_x</span>);</span><br><span class="line">        pos._y = (this._y);</span><br><span class="line">        pos._w = (this._w);</span><br><span class="line">        pos._h = (this._h);</span><br><span class="line">        return pos;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.mbr</span><br><span class="line">     * @comp 2D</span><br><span class="line">     * @sign public Object .mbr()</span><br><span class="line">     * Returns the minimum bounding rectangle. If there is no rotation</span><br><span class="line">     * on the entity it will return the rect.</span><br><span class="line">     */</span></span><br><span class="line">    mbr: function (mbr) {</span><br><span class="line">        mbr = mbr || {};</span><br><span class="line">		<span class="keyword">if</span> (!this._mbr) {</span><br><span class="line">			return this.pos(mbr);</span><br><span class="line">		} <span class="keyword">else</span> {</span><br><span class="line">            mbr.<span class="built_in">_x</span> = (this._mbr.<span class="built_in">_x</span>);</span><br><span class="line">            mbr._y = (this._mbr._y);</span><br><span class="line">            mbr._w = (this._mbr._w);</span><br><span class="line">            mbr._h = (this._mbr._h);</span><br><span class="line">            return mbr;</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.isAt</span><br><span class="line">     * @comp 2D</span><br><span class="line">     * @sign public Boolean .isAt(Number x, Number y)</span><br><span class="line">     * @param x - X position of the point</span><br><span class="line">     * @param y - Y position of the point</span><br><span class="line">     *</span><br><span class="line">     * Determines whether a point is contained by the entity. Unlike other methods,</span><br><span class="line">     * an object can&apos;t be passed. The arguments require the x and y value.</span><br><span class="line">     *</span><br><span class="line">     * The given point is tested against the first of the following that exists: a mapArea associated with &quot;Mouse&quot;, the hitarea associated with &quot;Collision&quot;, or the object&apos;s MBR.</span><br><span class="line">     */</span></span><br><span class="line">    isAt: function (x, y) {</span><br><span class="line">        <span class="keyword">if</span> (this.mapArea) {</span><br><span class="line">            return this.mapArea.containsPoint(x, y);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (this.map) {</span><br><span class="line">            return this.map.containsPoint(x, y);</span><br><span class="line">        }</span><br><span class="line">        var mbr = this._mbr || this;</span><br><span class="line">        return mbr.<span class="built_in">_x</span> &lt;= x &amp;&amp; mbr.<span class="built_in">_x</span> + mbr._w &gt;= x &amp;&amp;</span><br><span class="line">            mbr._y &lt;= y &amp;&amp; mbr._y + mbr._h &gt;= y;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.move</span><br><span class="line">     * @comp 2D</span><br><span class="line">     * @sign public this .move(String dir, Number by)</span><br><span class="line">     * @param dir - Direction to move (n,s,e,w,ne,nw,se,sw)</span><br><span class="line">     * @param by - Amount to move in the specified direction</span><br><span class="line">     *</span><br><span class="line">     * Quick method to move the entity in a direction (n, s, e, w, ne, nw, se, sw) by an amount of pixels.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="built_in">move</span>: function (dir, by) {</span><br><span class="line">        <span class="keyword">if</span> (dir.charAt(<span class="number">0</span>) === <span class="string">&apos;n&apos;</span>) this.y -= by;</span><br><span class="line">        <span class="keyword">if</span> (dir.charAt(<span class="number">0</span>) === <span class="string">&apos;s&apos;</span>) this.y += by;</span><br><span class="line">        <span class="keyword">if</span> (dir === <span class="string">&apos;e&apos;</span> || dir.charAt(<span class="number">1</span>) === <span class="string">&apos;e&apos;</span>) this.x += by;</span><br><span class="line">        <span class="keyword">if</span> (dir === <span class="string">&apos;w&apos;</span> || dir.charAt(<span class="number">1</span>) === <span class="string">&apos;w&apos;</span>) this.x -= by;</span><br><span class="line"></span><br><span class="line">        return this;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.shift</span><br><span class="line">     * @comp 2D</span><br><span class="line">     * @sign public this .shift(Number x, Number y, Number w, Number h)</span><br><span class="line">     * @param x - Amount to move X</span><br><span class="line">     * @param y - Amount to move Y</span><br><span class="line">     * @param w - Amount to widen</span><br><span class="line">     * @param h - Amount to increase height</span><br><span class="line">     *</span><br><span class="line">     * Shift or move the entity by an amount. Use negative values</span><br><span class="line">     * for an opposite direction.</span><br><span class="line">     */</span></span><br><span class="line">    shift: function (x, y, w, h) {</span><br><span class="line">        <span class="keyword">if</span> (x) this.x += x;</span><br><span class="line">        <span class="keyword">if</span> (y) this.y += y;</span><br><span class="line">        <span class="keyword">if</span> (w) this.w += w;</span><br><span class="line">        <span class="keyword">if</span> (h) this.h += h;</span><br><span class="line"></span><br><span class="line">        return this;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #._cascade</span><br><span class="line">     * @comp 2D</span><br><span class="line">     * @sign public void ._cascade(e)</span><br><span class="line">     * @param e - An object describing the motion</span><br><span class="line">     *</span><br><span class="line">     * Move or rotate the entity&apos;s children according to a certain motion.</span><br><span class="line">     * This method is part of a function bound to &quot;Move&quot;: It is used</span><br><span class="line">     * internally for ensuring that when a parent moves, the child also</span><br><span class="line">     * moves in the same way.</span><br><span class="line">     */</span></span><br><span class="line">    _cascade: function (e) {</span><br><span class="line">        <span class="keyword">if</span> (!e) return; <span class="comment">//no change in position</span></span><br><span class="line">        var i = <span class="number">0</span>,</span><br><span class="line">            children = this._children,</span><br><span class="line">            l = children.length,</span><br><span class="line">            obj;</span><br><span class="line">        <span class="comment">//rotation</span></span><br><span class="line">        <span class="keyword">if</span> ((<span class="string">&quot;cos&quot;</span> <span class="built_in">in</span> e) || (<span class="string">&quot;sin&quot;</span> <span class="built_in">in</span> e)) {</span><br><span class="line">            <span class="keyword">for</span> (; i &lt; l; ++i) {</span><br><span class="line">                obj = children[i];</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&apos;rotate&apos;</span> <span class="built_in">in</span> obj) obj.rotate(e);</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="comment">//use current position</span></span><br><span class="line">            var dx = this.<span class="built_in">_x</span> - e.<span class="built_in">_x</span>,</span><br><span class="line">                dy = this._y - e._y,</span><br><span class="line">                dw = this._w - e._w,</span><br><span class="line">                dh = this._h - e._h;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (; i &lt; l; ++i) {</span><br><span class="line">                obj = children[i];</span><br><span class="line">                obj.shift(dx, dy, dw, dh);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.attach</span><br><span class="line">     * @comp 2D</span><br><span class="line">     * @sign public this .attach(Entity obj[, .., Entity objN])</span><br><span class="line">     * @param obj - Child entity(s) to attach</span><br><span class="line">     *</span><br><span class="line">     * Sets one or more entities to be children, with the current entity (`this`)</span><br><span class="line">     * as the parent. When the parent moves or rotates, its children move or</span><br><span class="line">     * rotate by the same amount. (But not vice-versa: If you move a child, it</span><br><span class="line">     * will not move the parent.) When the parent is destroyed, its children are</span><br><span class="line">     * destroyed.</span><br><span class="line">     *</span><br><span class="line">     * For any entity, `this._children` is the array of its children entity</span><br><span class="line">     * objects (if any), and `this._parent` is its parent entity object (if any).</span><br><span class="line">     *</span><br><span class="line">     * As many objects as wanted can be attached, and a hierarchy of objects is</span><br><span class="line">     * possible by attaching.</span><br><span class="line">     */</span></span><br><span class="line">    attach: function () {</span><br><span class="line">        var i = <span class="number">0</span>,</span><br><span class="line">            arg = arguments,</span><br><span class="line">            l = arguments.length,</span><br><span class="line">            obj;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt; l; ++i) {</span><br><span class="line">            obj = arg[i];</span><br><span class="line">            <span class="keyword">if</span> (obj._parent) {</span><br><span class="line">                obj._parent.<span class="built_in">detach</span>(obj);</span><br><span class="line">            }</span><br><span class="line">            obj._parent = this;</span><br><span class="line">            this._children.push(obj);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        return this;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.detach</span><br><span class="line">     * @comp 2D</span><br><span class="line">     * @sign public this .detach([Entity obj])</span><br><span class="line">     * @param obj - The entity to detach. Left blank will remove all attached entities</span><br><span class="line">     *</span><br><span class="line">     * Stop an entity from following the current entity. Passing no arguments will stop</span><br><span class="line">     * every entity attached.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="built_in">detach</span>: function (obj) {</span><br><span class="line">        var i;</span><br><span class="line">        <span class="comment">//if nothing passed, remove all attached objects</span></span><br><span class="line">        <span class="keyword">if</span> (!obj) {</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; this._children.length; i++) {</span><br><span class="line">                this._children[i]._parent = null;</span><br><span class="line">            }</span><br><span class="line">            this._children = [];</span><br><span class="line">            return this;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//if obj passed, find the handler and unbind</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; this._children.length; i++) {</span><br><span class="line">            <span class="keyword">if</span> (this._children[i] == obj) {</span><br><span class="line">                this._children.splice(i, <span class="number">1</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        obj._parent = null;</span><br><span class="line"></span><br><span class="line">        return this;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.origin</span><br><span class="line">     * @comp 2D</span><br><span class="line">     *</span><br><span class="line">     * @sign public this .origin(Number x, Number y)</span><br><span class="line">     * @param x - Pixel value of origin offset on the X axis</span><br><span class="line">     * @param y - Pixel value of origin offset on the Y axis</span><br><span class="line">     *</span><br><span class="line">     * @sign public this .origin(String offset)</span><br><span class="line">     * @param offset - Combination of center, top, bottom, middle, left and right</span><br><span class="line">     *</span><br><span class="line">     * Set the origin point of an entity for it to rotate around.</span><br><span class="line">     *</span><br><span class="line">     * @example</span><br><span class="line">     *</span></span><br></pre></td></tr></table></figure>

     * this.origin(&quot;top left&quot;)
     * this.origin(&quot;center&quot;)
     * this.origin(&quot;bottom right&quot;)
     * this.origin(&quot;middle right&quot;)
     * <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"> *</span><br><span class="line"> * @see .rotation</span><br><span class="line"> */</span><br><span class="line">origin: function (x, y) {</span><br><span class="line">    <span class="comment">//text based origin</span></span><br><span class="line">    <span class="keyword">if</span> (typeof x === <span class="string">&quot;string&quot;</span>) {</span><br><span class="line">        <span class="keyword">if</span> (x === <span class="string">&quot;centre&quot;</span> || x === <span class="string">&quot;center&quot;</span> || x.indexOf(<span class="string">&apos; &apos;</span>) === -<span class="number">1</span>) {</span><br><span class="line">            x = <span class="keyword">this</span>._w / <span class="number">2</span>;</span><br><span class="line">            y = <span class="keyword">this</span>._h / <span class="number">2</span>;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            var cmd = x.split(<span class="string">&apos; &apos;</span>);</span><br><span class="line">            <span class="keyword">if</span> (cmd[<span class="number">0</span>] === <span class="string">&quot;top&quot;</span>) y = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cmd[<span class="number">0</span>] === <span class="string">&quot;bottom&quot;</span>) y = <span class="keyword">this</span>._h;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cmd[<span class="number">0</span>] === <span class="string">&quot;middle&quot;</span> || cmd[<span class="number">1</span>] === <span class="string">&quot;center&quot;</span> || cmd[<span class="number">1</span>] === <span class="string">&quot;centre&quot;</span>) y = <span class="keyword">this</span>._h / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (cmd[<span class="number">1</span>] === <span class="string">&quot;center&quot;</span> || cmd[<span class="number">1</span>] === <span class="string">&quot;centre&quot;</span> || cmd[<span class="number">1</span>] === <span class="string">&quot;middle&quot;</span>) x = <span class="keyword">this</span>._w / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cmd[<span class="number">1</span>] === <span class="string">&quot;left&quot;</span>) x = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cmd[<span class="number">1</span>] === <span class="string">&quot;right&quot;</span>) x = <span class="keyword">this</span>._w;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>._origin.x = x;</span><br><span class="line">    <span class="keyword">this</span>._origin.y = y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #.flip</span><br><span class="line"> * @comp 2D</span><br><span class="line"> * @trigger Invalidate - when the entity has flipped</span><br><span class="line"> * @sign public this .flip(String dir)</span><br><span class="line"> * @param dir - Flip direction</span><br><span class="line"> *</span><br><span class="line"> * Flip entity on passed direction</span><br><span class="line"> *</span><br><span class="line"> * @example</span><br><span class="line"> *</span></span><br></pre></td></tr></table></figure>

     * this.flip(&quot;X&quot;)
     * <figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> */</span><br><span class="line">flip: function (dir) {</span><br><span class="line">    dir = dir || <span class="string">&quot;X&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>[<span class="string">&quot;_flip&quot;</span> + dir]) {</span><br><span class="line">        <span class="keyword">this</span>[<span class="string">&quot;_flip&quot;</span> + dir] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.trigger(<span class="string">&quot;Invalidate&quot;</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #.unflip</span><br><span class="line"> * <span class="doctag">@comp</span> 2D</span><br><span class="line"> * <span class="doctag">@trigger</span> Invalidate - when the entity has unflipped</span><br><span class="line"> * <span class="doctag">@sign</span> public this .unflip(String dir)</span><br><span class="line"> * <span class="doctag">@param</span> dir - Unflip direction</span><br><span class="line"> *</span><br><span class="line"> * Unflip entity on passed direction (if it&apos;s flipped)</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@example</span></span><br><span class="line"> *</span></span><br></pre></td></tr></table></figure>

     * this.unflip(&quot;X&quot;)
     * <figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line">     */</span><br><span class="line">    unflip: function (dir) {</span><br><span class="line">        dir = dir || <span class="string">&quot;X&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>[<span class="string">&quot;_flip&quot;</span> + dir]) {</span><br><span class="line">            <span class="keyword">this</span>[<span class="string">&quot;_flip&quot;</span> + dir] = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">this</span>.trigger(<span class="string">&quot;Invalidate&quot;</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Method for rotation rather than through a setter</span><br><span class="line">     */</span></span><br><span class="line">    rotate: function (e) {</span><br><span class="line">        <span class="keyword">var</span> x2, y2;</span><br><span class="line">        x2 =  (<span class="keyword">this</span>._x + <span class="keyword">this</span>._origin.x - e.o.x) * e.cos + (<span class="keyword">this</span>._y + <span class="keyword">this</span>._origin.y - e.o.y) * e.sin + (e.o.x - <span class="keyword">this</span>._origin.x);</span><br><span class="line">        y2 =  (<span class="keyword">this</span>._y + <span class="keyword">this</span>._origin.y - e.o.y) * e.cos - (<span class="keyword">this</span>._x + <span class="keyword">this</span>._origin.x - e.o.x) * e.sin + (e.o.y - <span class="keyword">this</span>._origin.y);</span><br><span class="line">        <span class="keyword">this</span>._attr(<span class="string">&apos;_rotation&apos;</span>, <span class="keyword">this</span>._rotation - e.deg);</span><br><span class="line">        <span class="keyword">this</span>._attr(<span class="string">&apos;_x&apos;</span>, x2 );</span><br><span class="line">        <span class="keyword">this</span>._attr(<span class="string">&apos;_y&apos;</span>, y2 );</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #._attr</span><br><span class="line">     * @comp 2D</span><br><span class="line">     * Setter method for all 2D properties including</span><br><span class="line">     * x, y, w, h, alpha, rotation and visible.</span><br><span class="line">     */</span></span><br><span class="line">    _attr: function (name, <span class="keyword">value</span>) {</span><br><span class="line">        <span class="comment">// Return if there is no change</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>[name] === <span class="keyword">value</span>) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//keep a reference of the old positions</span></span><br><span class="line">        <span class="keyword">var</span> old = Crafty.rectManager._pool.copy(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> mbr;</span><br><span class="line">        <span class="comment">//if rotation, use the rotate method</span></span><br><span class="line">        <span class="keyword">if</span> (name === <span class="string">&apos;_rotation&apos;</span>) {</span><br><span class="line">            <span class="keyword">this</span>._rotate(<span class="keyword">value</span>); <span class="comment">// _rotate triggers &quot;Rotate&quot;</span></span><br><span class="line">            <span class="comment">//set the global Z and trigger reorder just in case</span></span><br><span class="line">        } <span class="function"><span class="keyword">else</span> <span class="title">if</span> (<span class="params">name === <span class="string">&apos;_z&apos;</span></span>) </span>{</span><br><span class="line">            <span class="keyword">var</span> intValue = <span class="keyword">value</span> &lt;&lt;<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">value</span> = <span class="keyword">value</span>==intValue ? intValue : intValue+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">this</span>._globalZ = <span class="keyword">value</span>*<span class="number">100000</span>+<span class="keyword">this</span>[<span class="number">0</span>]; <span class="comment">//magic number 10^5 is the max num of entities</span></span><br><span class="line">            <span class="keyword">this</span>[name] = <span class="keyword">value</span>;</span><br><span class="line">            <span class="keyword">this</span>.trigger(<span class="string">&quot;Reorder&quot;</span>);</span><br><span class="line">            <span class="comment">//if the rect bounds change, update the MBR and trigger move</span></span><br><span class="line">        } <span class="function"><span class="keyword">else</span> <span class="title">if</span> (<span class="params">name === <span class="string">&apos;_x&apos;</span> || name === <span class="string">&apos;_y&apos;</span></span>) </span>{</span><br><span class="line">            <span class="comment">// mbr is the minimal bounding rectangle of the entity</span></span><br><span class="line">            mbr = <span class="keyword">this</span>._mbr;</span><br><span class="line">            <span class="keyword">if</span> (mbr) {</span><br><span class="line">                mbr[name] -= <span class="keyword">this</span>[name] - <span class="keyword">value</span>;</span><br><span class="line">                <span class="comment">// cbr is a non-minmal bounding rectangle that contains both hitbox and mbr</span></span><br><span class="line">                <span class="comment">// It will exist only when the collision hitbox sits outside the entity</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>._cbr){</span><br><span class="line">                    <span class="keyword">this</span>._cbr[name] -= <span class="keyword">this</span>[name] - <span class="keyword">value</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">this</span>[name] = <span class="keyword">value</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.trigger(<span class="string">&quot;Move&quot;</span>, old);</span><br><span class="line"></span><br><span class="line">        } <span class="function"><span class="keyword">else</span> <span class="title">if</span> (<span class="params">name === <span class="string">&apos;_h&apos;</span> || name === <span class="string">&apos;_w&apos;</span></span>) </span>{</span><br><span class="line">            mbr = <span class="keyword">this</span>._mbr;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> oldValue = <span class="keyword">this</span>[name];</span><br><span class="line">            <span class="keyword">this</span>[name] = <span class="keyword">value</span>;</span><br><span class="line">            <span class="keyword">if</span> (mbr) {</span><br><span class="line">                <span class="keyword">this</span>._calculateMBR();</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (name === <span class="string">&apos;_w&apos;</span>) {</span><br><span class="line">                <span class="keyword">this</span>.trigger(<span class="string">&quot;Resize&quot;</span>, {</span><br><span class="line">                    axis: <span class="string">&apos;w&apos;</span>,</span><br><span class="line">                    amount: <span class="keyword">value</span> - oldValue</span><br><span class="line">                });</span><br><span class="line">            } <span class="function"><span class="keyword">else</span> <span class="title">if</span> (<span class="params">name === <span class="string">&apos;_h&apos;</span></span>) </span>{</span><br><span class="line">                <span class="keyword">this</span>.trigger(<span class="string">&quot;Resize&quot;</span>, {</span><br><span class="line">                    axis: <span class="string">&apos;h&apos;</span>,</span><br><span class="line">                    amount: <span class="keyword">value</span> - oldValue</span><br><span class="line">                });</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">this</span>.trigger(<span class="string">&quot;Move&quot;</span>, old);</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//everything will assume the value</span></span><br><span class="line">        <span class="keyword">this</span>[name] = <span class="keyword">value</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// flag for redraw</span></span><br><span class="line">        <span class="keyword">this</span>.trigger(<span class="string">&quot;Invalidate&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Crafty.rectManager._pool.recycle(old);</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Supportable</span><br><span class="line"> * @category 2D</span><br><span class="line"> * @trigger LandedOnGround - When entity has landed. This event is triggered with the object the entity landed on.</span><br><span class="line"> * @trigger LiftedOffGround - When entity has lifted off. This event is triggered with the object the entity stood on before lift-off.</span><br><span class="line"> * @trigger CheckLanding - When entity is about to land. This event is triggered with the object the entity is about to land on. Third parties can respond to this event and prevent the entity from being able to land.</span><br><span class="line"> *</span><br><span class="line"> * Component that detects if the entity collides with the ground. This component is automatically added and managed by the Gravity component.</span><br><span class="line"> * The appropriate events are fired when the entity state changes (lands on ground / lifts off ground). The current ground entity can also be accessed with `.ground`.</span><br><span class="line"> */</span></span><br><span class="line">Crafty.c(<span class="string">&quot;Supportable&quot;</span>, {</span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.ground</span><br><span class="line">     * @comp Supportable</span><br><span class="line">     *</span><br><span class="line">     * Access the ground entity (which may be the actual ground entity if it exists, or `null` if it doesn&apos;t exist) and thus whether this entity is currently on the ground or not. </span><br><span class="line">     * The ground entity is also available through the events, when the ground entity changes.</span><br><span class="line">     */</span></span><br><span class="line">    _ground: <span class="keyword">null</span>,</span><br><span class="line">    _groundComp: <span class="keyword">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.canLand</span><br><span class="line">     * @comp Supportable</span><br><span class="line">     *</span><br><span class="line">     * The canLand boolean determines if the entity is allowed to land or not (e.g. perhaps the entity should not land if it&apos;s not falling).</span><br><span class="line">     * The Supportable component will trigger a &quot;CheckLanding&quot; event. </span><br><span class="line">     * Interested parties can listen to this event and prevent the entity from landing by setting `canLand` to false.</span><br><span class="line">     *</span><br><span class="line">     * @example</span><br><span class="line">     *</span></span><br></pre></td></tr></table></figure>

     * var player = Crafty.e(&quot;2D, Gravity&quot;);
     * player.bind(&quot;CheckLanding&quot;, function(ground) {
     *     if (player.y + player.h &gt; ground.y + player.dy) { // forbid landing, if player&apos;s feet are not above ground
     *         player.canLand = false;
     *     }
     * });
     * <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> */</span><br><span class="line">canLand: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">init: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">this</span>.requires(<span class="string">&quot;2D&quot;</span>);</span><br><span class="line">    <span class="keyword">this</span>.__area = {_x: <span class="number">0</span>, _y: <span class="number">0</span>, _w: <span class="number">0</span>, _h: <span class="number">0</span>};</span><br><span class="line">    <span class="keyword">this</span>.defineField(<span class="string">&quot;ground&quot;</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{ <span class="keyword">return</span> <span class="keyword">this</span>._ground; }, <span class="function"><span class="keyword">function</span><span class="params">(newValue)</span> </span>{});</span><br><span class="line">},</span><br><span class="line">remove: <span class="function"><span class="keyword">function</span><span class="params">(destroyed)</span> </span>{</span><br><span class="line">    <span class="keyword">this</span>.unbind(<span class="string">&quot;EnterFrame&quot;</span>, <span class="keyword">this</span>._detectGroundTick);</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment">/*@</span><br><span class="line"> * #.startGroundDetection</span><br><span class="line"> * @comp Supportable</span><br><span class="line"> * @sign private this .startGroundDetection([comp])</span><br><span class="line"> * @param comp - The name of a component that will be treated as ground</span><br><span class="line"> *</span><br><span class="line"> * This method is automatically called by the Gravity component and should not be called by the user.</span><br><span class="line"> *</span><br><span class="line"> * Enable ground detection for this entity no matter whether comp parameter is specified or not.</span><br><span class="line"> * If comp parameter is specified all entities with that component will stop this entity from falling.</span><br><span class="line"> * For a player entity in a platform game this would be a component that is added to all entities</span><br><span class="line"> * that the player should be able to walk on.</span><br><span class="line"> * </span><br><span class="line"> * @example</span><br><span class="line"> *</span></span><br></pre></td></tr></table></figure>

     * Crafty.e(&quot;2D, DOM, Color, Gravity&quot;)
     *   .color(&quot;red&quot;)
     *   .attr({ w: 100, h: 100 })
     *   .gravity(&quot;platform&quot;);
     * <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">     *</span><br><span class="line">     * @see Gravity</span><br><span class="line">     */</span><br><span class="line">    startGroundDetection: <span class="function"><span class="keyword">function</span><span class="params">(ground)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (ground) <span class="keyword">this</span>._groundComp = ground;</span><br><span class="line">        <span class="keyword">this</span>.uniqueBind(<span class="string">&quot;EnterFrame&quot;</span>, <span class="keyword">this</span>._detectGroundTick);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    },</span><br><span class="line">    <span class="comment">/*@</span><br><span class="line">     * #.stopGroundDetection</span><br><span class="line">     * @comp Supportable</span><br><span class="line">     * @sign private this .stopGroundDetection()</span><br><span class="line">     *</span><br><span class="line">     * This method is automatically called by the Gravity component and should not be called by the user.</span><br><span class="line">     *</span><br><span class="line">     * Disable ground detection for this component. It can be reenabled by calling .startGroundDetection()</span><br><span class="line">     */</span></span><br><span class="line">    stopGroundDetection: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.unbind(<span class="string">&quot;EnterFrame&quot;</span>, <span class="keyword">this</span>._detectGroundTick);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    _detectGroundTick: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">var</span> groundComp = <span class="keyword">this</span>._groundComp,</span><br><span class="line">            ground = <span class="keyword">this</span>._ground,</span><br><span class="line">            overlap = Crafty.rectManager.overlap;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> pos = <span class="keyword">this</span>._cbr || <span class="keyword">this</span>._mbr || <span class="keyword">this</span>,</span><br><span class="line">            area = <span class="keyword">this</span>.__area;</span><br><span class="line">        area._x = pos._x;</span><br><span class="line">        area._y = pos._y + <span class="number">1</span>; <span class="comment">// Increase by 1 to make sure map.search() finds the floor</span></span><br><span class="line">        area._w = pos._w;</span><br><span class="line">        area._h = pos._h;</span><br><span class="line">        <span class="comment">// Decrease width by 1px from left and 1px from right, to fall more gracefully</span></span><br><span class="line">        <span class="comment">// area._x++; area._w--;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ground) {</span><br><span class="line">            <span class="keyword">var</span> garea = ground._cbr || ground._mbr || ground;</span><br><span class="line">            <span class="keyword">if</span> (!(ground.__c[groundComp] &amp;&amp; overlap(garea, area))) {</span><br><span class="line">                <span class="keyword">this</span>._ground = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">this</span>.trigger(<span class="string">&quot;LiftedOffGround&quot;</span>, ground); <span class="comment">// no collision with ground was detected for first time</span></span><br><span class="line">                ground = <span class="literal">null</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!ground) {</span><br><span class="line">            <span class="keyword">var</span> obj, oarea,</span><br><span class="line">                results = Crafty.map.search(area, <span class="literal">false</span>),</span><br><span class="line">                i = <span class="number">0</span>,</span><br><span class="line">                l = results.length;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (; i &lt; l; ++i) {</span><br><span class="line">                obj = results[i];</span><br><span class="line">                oarea = obj._cbr || obj._mbr || obj;</span><br><span class="line">                <span class="comment">// check for an intersection with the player</span></span><br><span class="line">                <span class="keyword">if</span> (obj !== <span class="keyword">this</span> &amp;&amp; obj.__c[groundComp] &amp;&amp; overlap(oarea, area)) {</span><br><span class="line">                    <span class="keyword">this</span>.canLand = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">this</span>.trigger(<span class="string">&quot;CheckLanding&quot;</span>, obj); <span class="comment">// is entity allowed to land?</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>.canLand) {</span><br><span class="line">                        <span class="keyword">this</span>._ground = ground = obj;</span><br><span class="line">                        <span class="keyword">this</span>.y = obj._y - <span class="keyword">this</span>._h; <span class="comment">// snap entity to ground object</span></span><br><span class="line">                        <span class="keyword">this</span>.trigger(<span class="string">&quot;LandedOnGround&quot;</span>, ground); <span class="comment">// collision with ground was detected for first time</span></span><br><span class="line"></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #GroundAttacher</span><br><span class="line"> * @category 2D</span><br><span class="line"> *</span><br><span class="line"> * Component that attaches the entity to the ground when it lands. Useful for platformers with moving platforms.</span><br><span class="line"> * Remove the component to disable the functionality.</span><br><span class="line"> *</span><br><span class="line"> * @see Supportable, Gravity</span><br><span class="line"> *</span><br><span class="line"> * @example</span><br><span class="line"> *</span></span><br></pre></td></tr></table></figure>

 * Crafty.e(&quot;2D, Gravity, GroundAttacher&quot;)
 *     .gravity(&quot;Platform&quot;); // entity will land on and move with entites that have the &quot;Platform&quot; component
 * <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"> */</span><br><span class="line">Crafty.c(<span class="string">&quot;GroundAttacher&quot;</span>, {</span><br><span class="line">    _groundAttach: <span class="function"><span class="keyword">function</span><span class="params">(ground)</span> </span>{</span><br><span class="line">        ground.attach(<span class="keyword">this</span>);</span><br><span class="line">    },</span><br><span class="line">    _groundDetach: <span class="function"><span class="keyword">function</span><span class="params">(ground)</span> </span>{</span><br><span class="line">        ground.detach(<span class="keyword">this</span>);</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    init: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.requires(<span class="string">&quot;Supportable&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.bind(<span class="string">&quot;LandedOnGround&quot;</span>, <span class="keyword">this</span>._groundAttach);</span><br><span class="line">        <span class="keyword">this</span>.bind(<span class="string">&quot;LiftedOffGround&quot;</span>, <span class="keyword">this</span>._groundDetach);</span><br><span class="line">    },</span><br><span class="line">    remove: <span class="function"><span class="keyword">function</span><span class="params">(destroyed)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.unbind(<span class="string">&quot;LandedOnGround&quot;</span>, <span class="keyword">this</span>._groundAttach);</span><br><span class="line">        <span class="keyword">this</span>.unbind(<span class="string">&quot;LiftedOffGround&quot;</span>, <span class="keyword">this</span>._groundDetach);</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Gravity</span><br><span class="line"> * @category 2D</span><br><span class="line"> * @trigger Moved - When entity has moved due to velocity/acceleration on either x or y axis a Moved event is triggered. If the entity has moved on both axes for diagonal movement the event is triggered twice. - { axis: &apos;x&apos; | &apos;y&apos;, oldValue: Number } - Old position</span><br><span class="line"> * @trigger NewDirection - When entity has changed direction due to velocity on either x or y axis a NewDirection event is triggered. The event is triggered once, if direction is different from last frame. - { x: -1 | 0 | 1, y: -1 | 0 | 1 } - New direction</span><br><span class="line"> * </span><br><span class="line"> * Adds gravitational pull to the entity.</span><br><span class="line"> *</span><br><span class="line"> * @see Supportable, Motion</span><br><span class="line"> */</span></span><br><span class="line">Crafty.c(<span class="string">&quot;Gravity&quot;</span>, {</span><br><span class="line">    _gravityConst: <span class="number">500</span>,</span><br><span class="line"></span><br><span class="line">    init: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.requires(<span class="string">&quot;2D, Supportable, Motion&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.bind(<span class="string">&quot;LiftedOffGround&quot;</span>, <span class="keyword">this</span>._startGravity); <span class="comment">// start gravity if we are off ground</span></span><br><span class="line">        <span class="keyword">this</span>.bind(<span class="string">&quot;LandedOnGround&quot;</span>, <span class="keyword">this</span>._stopGravity); <span class="comment">// stop gravity once landed</span></span><br><span class="line">    },</span><br><span class="line">    remove: <span class="function"><span class="keyword">function</span><span class="params">(removed)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.unbind(<span class="string">&quot;LiftedOffGround&quot;</span>, <span class="keyword">this</span>._startGravity);</span><br><span class="line">        <span class="keyword">this</span>.unbind(<span class="string">&quot;LandedOnGround&quot;</span>, <span class="keyword">this</span>._stopGravity);</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    _gravityCheckLanding: <span class="function"><span class="keyword">function</span><span class="params">(ground)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._dy &lt; <span class="number">0</span>) </span><br><span class="line">            <span class="keyword">this</span>.canLand = <span class="literal">false</span>;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.gravity</span><br><span class="line">     * @comp Gravity</span><br><span class="line">     * @sign public this .gravity([comp])</span><br><span class="line">     * @param comp - The name of a component that will stop this entity from falling</span><br><span class="line">     *</span><br><span class="line">     * Enable gravity for this entity no matter whether comp parameter is specified or not.</span><br><span class="line">     * If comp parameter is specified all entities with that component will stop this entity from falling.</span><br><span class="line">     * For a player entity in a platform game this would be a component that is added to all entities</span><br><span class="line">     * that the player should be able to walk on.</span><br><span class="line">     * See the Supportable component documentation for additional methods &amp; events that are available.</span><br><span class="line">     *</span><br><span class="line">     * @example</span><br><span class="line">     *</span></span><br></pre></td></tr></table></figure>

     * Crafty.e(&quot;2D, DOM, Color, Gravity&quot;)
     *   .color(&quot;red&quot;)
     *   .attr({ w: 100, h: 100 })
     *   .gravity(&quot;platform&quot;);
     * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@see Supportable, Motion</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">gravity: function (comp) {</span><br><span class="line">    this.bind(<span class="string">&quot;CheckLanding&quot;</span>, this._gravityCheckLanding);</span><br><span class="line">    this.startGroundDetection(comp);</span><br><span class="line">    this._startGravity();</span><br><span class="line"></span><br><span class="line">    return this;</span><br><span class="line">},</span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span>@</span><br><span class="line"> <span class="keyword">*</span> <span class="comment">#.antigravity</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@comp Gravity</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@sign public this .antigravity()</span></span><br><span class="line"> <span class="keyword">*</span> Disable gravity for this component. It can be reenabled by calling .gravity()</span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">antigravity: function () {</span><br><span class="line">    this._stopGravity();</span><br><span class="line">    this.stopGroundDetection();</span><br><span class="line">    this.unbind(<span class="string">&quot;CheckLanding&quot;</span>, this._gravityCheckLanding);</span><br><span class="line"></span><br><span class="line">    return this;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span>@</span><br><span class="line"> <span class="keyword">*</span> <span class="comment">#.gravityConst</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@comp Gravity</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@sign public this .gravityConst(g)</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param g - gravitational constant in pixels per second squared</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> Set the gravitational constant to g for this entity. The default is 500. The greater g, the stronger the downwards acceleration.</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@example</span></span><br><span class="line"> <span class="keyword">*</span></span><br></pre></td></tr></table></figure>

     * Crafty.e(&quot;2D, DOM, Color, Gravity&quot;)
     *   .color(&quot;red&quot;)
     *   .attr({ w: 100, h: 100 })
     *   .gravityConst(5)
     *   .gravity(&quot;platform&quot;);
     * <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">     */</span><br><span class="line">    gravityConst: <span class="function"><span class="keyword">function</span> <span class="params">(g)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (this._gravityActive) { <span class="comment">// gravity active, change acceleration</span></span><br><span class="line">            this.ay -= this._gravityConst;</span><br><span class="line">            this.ay += g;</span><br><span class="line">        }</span><br><span class="line">        this._gravityConst = g;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> this;</span><br><span class="line">    },</span><br><span class="line">    _startGravity: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</span><br><span class="line">        this._gravityActive = <span class="keyword">true</span>;</span><br><span class="line">        this.ay += this._gravityConst;</span><br><span class="line">    },</span><br><span class="line">    _stopGravity: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</span><br><span class="line">        this.ay = <span class="number">0</span>;</span><br><span class="line">        this.vy = <span class="number">0</span>;</span><br><span class="line">        this._gravityActive = <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// This is used to define getters and setters for Motion properties</span></span><br><span class="line"><span class="comment">// For instance</span></span><br><span class="line"><span class="comment">//      __motionProp(entity, &quot;a&quot;, &quot;x&quot;, true) </span></span><br><span class="line"><span class="comment">// will define a getter for `ax` which accesses an underlying private property `_ax`</span></span><br><span class="line"><span class="comment">// If the `setter` property is false, setting a value will be a null-op</span></span><br><span class="line"><span class="keyword">var</span> __motionProp = <span class="function"><span class="keyword">function</span><span class="params">(self, prefix, prop, setter)</span> </span>{</span><br><span class="line">    <span class="keyword">var</span> publicProp = prefix + prop;</span><br><span class="line">    <span class="keyword">var</span> privateProp = <span class="string">&quot;_&quot;</span> + publicProp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> motionEvent = { key: <span class="string">&quot;&quot;</span>, oldValue: <span class="number">0</span>};</span><br><span class="line">    <span class="comment">// getters &amp; setters for public property</span></span><br><span class="line">    <span class="keyword">if</span> (setter) {</span><br><span class="line">        Crafty.defineField(<span class="keyword">self</span>, publicProp, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{ <span class="keyword">return</span> this[privateProp]; }, <span class="function"><span class="keyword">function</span><span class="params">(newValue)</span> </span>{</span><br><span class="line">            <span class="keyword">var</span> oldValue = this[privateProp];</span><br><span class="line">            <span class="keyword">if</span> (newValue !== oldValue) {</span><br><span class="line">                this[privateProp] = newValue;</span><br><span class="line"></span><br><span class="line">                motionEvent.key = publicProp;</span><br><span class="line">                motionEvent.oldValue = oldValue;</span><br><span class="line">                this.trigger(<span class="string">&quot;MotionChange&quot;</span>, motionEvent);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        Crafty.defineField(<span class="keyword">self</span>, publicProp, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{ <span class="keyword">return</span> this[privateProp]; }, <span class="function"><span class="keyword">function</span><span class="params">(newValue)</span> </span>{});</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// hide private property</span></span><br><span class="line">    Object.defineProperty(<span class="keyword">self</span>, privateProp, {</span><br><span class="line">        value : <span class="number">0</span>,</span><br><span class="line">        writable : <span class="keyword">true</span>,</span><br><span class="line">        enumerable : <span class="keyword">false</span>,</span><br><span class="line">        configurable : <span class="keyword">false</span></span><br><span class="line">    });</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">// This defines an alias for a pair of underlying properties which represent the components of a vector</span></span><br><span class="line"><span class="comment">// It takes an object with vector methods, and redefines its x/y properties as getters and setters to properties of self</span></span><br><span class="line"><span class="comment">// This allows you to use the vector&apos;s special methods to manipulate the entity&apos;s properties, </span></span><br><span class="line"><span class="comment">// while still allowing you to manipulate those properties directly if performance matters</span></span><br><span class="line"><span class="keyword">var</span> __motionVector = <span class="function"><span class="keyword">function</span><span class="params">(self, prefix, setter, vector)</span> </span>{</span><br><span class="line">    <span class="keyword">var</span> publicX = prefix + <span class="string">&quot;x&quot;</span>,</span><br><span class="line">        publicY = prefix + <span class="string">&quot;y&quot;</span>,</span><br><span class="line">        privateX = <span class="string">&quot;_&quot;</span> + publicX,</span><br><span class="line">        privateY = <span class="string">&quot;_&quot;</span> + publicY;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (setter) {</span><br><span class="line">        Crafty.defineField(vector, <span class="string">&quot;x&quot;</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{ <span class="keyword">return</span> <span class="keyword">self</span>[privateX]; }, <span class="function"><span class="keyword">function</span><span class="params">(v)</span> </span>{ <span class="keyword">self</span>[publicX] = v; });</span><br><span class="line">        Crafty.defineField(vector, <span class="string">&quot;y&quot;</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{ <span class="keyword">return</span> <span class="keyword">self</span>[privateY]; }, <span class="function"><span class="keyword">function</span><span class="params">(v)</span> </span>{ <span class="keyword">self</span>[publicY] = v; });</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        Crafty.defineField(vector, <span class="string">&quot;x&quot;</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{ <span class="keyword">return</span> <span class="keyword">self</span>[privateX]; }, <span class="function"><span class="keyword">function</span><span class="params">(v)</span> </span>{});</span><br><span class="line">        Crafty.defineField(vector, <span class="string">&quot;y&quot;</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{ <span class="keyword">return</span> <span class="keyword">self</span>[privateY]; }, <span class="function"><span class="keyword">function</span><span class="params">(v)</span> </span>{});</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (Object.seal) { Object.seal(vector); }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> vector;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #AngularMotion</span><br><span class="line"> * <span class="doctag">@category</span> 2D</span><br><span class="line"> * <span class="doctag">@trigger</span> Rotated - When entity has rotated due to angular velocity/acceleration a Rotated event is triggered. - Number - Old rotation</span><br><span class="line"> * <span class="doctag">@trigger</span> NewRotationDirection - When entity has changed rotational direction due to rotational velocity a NewRotationDirection event is triggered. The event is triggered once, if direction is different from last frame. - -1 | 0 | 1 - New direction</span><br><span class="line"> * <span class="doctag">@trigger</span> MotionChange - When a motion property has changed a MotionChange event is triggered. - { key: String, oldValue: Number } - Motion property name and old value</span><br><span class="line"> *</span><br><span class="line"> * Component that allows rotating an entity by applying angular velocity and acceleration.</span><br><span class="line"> * All angular motion values are expressed in degrees per second (e.g. an entity with `vrotation` of 10 will rotate 10 degrees each second).</span><br><span class="line"> */</span></span><br><span class="line">Crafty.c(<span class="string">&quot;AngularMotion&quot;</span>, {</span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.vrotation</span><br><span class="line">     * <span class="doctag">@comp</span> AngularMotion</span><br><span class="line">     * </span><br><span class="line">     * A property for accessing/modifying the angular(rotational) velocity. </span><br><span class="line">     * The velocity remains constant over time, unless the acceleration increases the velocity.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@example</span></span><br><span class="line">     *</span></span><br></pre></td></tr></table></figure>

     * var ent = Crafty.e(&quot;2D, AngularMotion&quot;);
     *
     * var vrotation = ent.vrotation; // retrieve the angular velocity
     * ent.vrotation += 1; // increase the angular velocity
     * ent.vrotation = 0; // reset the angular velocity
     * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">_vrotation: 0,</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span>@</span><br><span class="line"> <span class="keyword">*</span> <span class="comment">#.arotation</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@comp AngularMotion</span></span><br><span class="line"> <span class="keyword">*</span> </span><br><span class="line"> <span class="keyword">*</span> A property for accessing/modifying the angular(rotational) acceleration. </span><br><span class="line"> <span class="keyword">*</span> The acceleration increases the velocity over time, resulting in ever increasing speed.</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@example</span></span><br><span class="line"> <span class="keyword">*</span></span><br></pre></td></tr></table></figure>

     * var ent = Crafty.e(&quot;2D, AngularMotion&quot;);
     *
     * var arotation = ent.arotation; // retrieve the angular acceleration
     * ent.arotation += 1; // increase the angular acceleration
     * ent.arotation = 0; // reset the angular acceleration
     * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">_arotation: 0,</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span>@</span><br><span class="line"> <span class="keyword">*</span> <span class="comment">#.drotation</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@comp AngularMotion</span></span><br><span class="line"> <span class="keyword">*</span> </span><br><span class="line"> <span class="keyword">*</span> A number that reflects the change in rotation (difference between the old &amp; new rotation) that was applied in the last frame.</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@example</span></span><br><span class="line"> <span class="keyword">*</span></span><br></pre></td></tr></table></figure>

     * var ent = Crafty.e(&quot;2D, AngularMotion&quot;);
     *
     * var drotation = ent.drotation; // the change of rotation in the last frame
     * <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">     */</span><br><span class="line">    _drotation: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    init: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.requires(<span class="string">&quot;2D&quot;</span>);</span><br><span class="line"></span><br><span class="line">        __motionProp(<span class="keyword">this</span>, <span class="string">&quot;v&quot;</span>, <span class="string">&quot;rotation&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        __motionProp(<span class="keyword">this</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;rotation&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        __motionProp(<span class="keyword">this</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;rotation&quot;</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.__oldRotationDirection = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.bind(<span class="string">&quot;EnterFrame&quot;</span>, <span class="keyword">this</span>._angularMotionTick);</span><br><span class="line">    },</span><br><span class="line">    remove: <span class="function"><span class="keyword">function</span><span class="params">(destroyed)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.unbind(<span class="string">&quot;EnterFrame&quot;</span>, <span class="keyword">this</span>._angularMotionTick);</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.resetAngularMotion</span><br><span class="line">     * @comp AngularMotion</span><br><span class="line">     * @sign public this .resetAngularMotion()</span><br><span class="line">     * </span><br><span class="line">     * Reset all motion (resets velocity, acceleration, motionDelta).</span><br><span class="line">     */</span></span><br><span class="line">    resetAngularMotion: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>._drotation = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.vrotation = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.arotation = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span><br><span class="line">     * s += v * &#x394;t + (0.5 * a) * &#x394;t * &#x394;t</span><br><span class="line">     * v += a * &#x394;t</span><br><span class="line">     */</span></span><br><span class="line">    _angularMotionTick: <span class="function"><span class="keyword">function</span><span class="params">(frameData)</span> </span>{</span><br><span class="line">        <span class="keyword">var</span> dt = frameData.dt / <span class="number">1000</span>; <span class="comment">// Time in s</span></span><br><span class="line">        <span class="keyword">var</span> oldR = <span class="keyword">this</span>._rotation,</span><br><span class="line">            vr = <span class="keyword">this</span>._vrotation,</span><br><span class="line">            ar = <span class="keyword">this</span>._arotation;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// s += v * &#x394;t + (0.5 * a) * &#x394;t * &#x394;t</span></span><br><span class="line">        <span class="keyword">var</span> newR = oldR + vr * dt + <span class="number">0.5</span> * ar * dt * dt;</span><br><span class="line">        <span class="comment">// v += a * &#x394;t</span></span><br><span class="line">        <span class="keyword">this</span>.vrotation = vr + ar * dt;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check if direction of velocity has changed</span></span><br><span class="line">        <span class="keyword">var</span> _vr = <span class="keyword">this</span>._vrotation, dvr = _vr ? (_vr&lt;<span class="number">0</span> ? -<span class="number">1</span>:<span class="number">1</span>):<span class="number">0</span>; <span class="comment">// Quick implementation of Math.sign</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.__oldRotationDirection !== dvr) {</span><br><span class="line">            <span class="keyword">this</span>.__oldRotationDirection = dvr;</span><br><span class="line">            <span class="keyword">this</span>.trigger(<span class="string">&apos;NewRotationDirection&apos;</span>, dvr);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check if velocity has changed</span></span><br><span class="line">        <span class="comment">// &#x394;s = s[t] - s[t-1]</span></span><br><span class="line">        <span class="keyword">this</span>._drotation = newR - oldR;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._drotation !== <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">this</span>.rotation = newR;</span><br><span class="line">            <span class="keyword">this</span>.trigger(<span class="string">&apos;Rotated&apos;</span>, oldR);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Motion</span><br><span class="line"> * @category 2D</span><br><span class="line"> * @trigger Moved - When entity has moved due to velocity/acceleration on either x or y axis a Moved event is triggered. If the entity has moved on both axes for diagonal movement the event is triggered twice. - { axis: &apos;x&apos; | &apos;y&apos;, oldValue: Number } - Old position</span><br><span class="line"> * @trigger NewDirection - When entity has changed direction due to velocity on either x or y axis a NewDirection event is triggered. The event is triggered once, if direction is different from last frame. - { x: -1 | 0 | 1, y: -1 | 0 | 1 } - New direction</span><br><span class="line"> * @trigger MotionChange - When a motion property has changed a MotionChange event is triggered. - { key: String, oldValue: Number } - Motion property name and old value</span><br><span class="line"> *</span><br><span class="line"> * Component that allows moving an entity by applying linear velocity and acceleration.</span><br><span class="line"> * All linear motion values are expressed in pixels per second (e.g. an entity with `vx` of 1 will move 1px on the x axis each second).</span><br><span class="line"> *</span><br><span class="line"> * @note Several methods return Vector2D objects that dynamically reflect the entity&apos;s underlying properties.  If you want a static copy instead, use the vector&apos;s `clone()` method.</span><br><span class="line"> */</span></span><br><span class="line">Crafty.c(<span class="string">&quot;Motion&quot;</span>, {</span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.vx</span><br><span class="line">     * @comp Motion</span><br><span class="line">     * </span><br><span class="line">     * A property for accessing/modifying the linear velocity in the x axis.</span><br><span class="line">     * The velocity remains constant over time, unless the acceleration changes the velocity.</span><br><span class="line">     *</span><br><span class="line">     * @example</span><br><span class="line">     *</span></span><br></pre></td></tr></table></figure>

     * var ent = Crafty.e(&quot;2D, Motion&quot;);
     *
     * var vx = ent.vx; // retrieve the linear velocity in the x axis
     * ent.vx += 1; // increase the linear velocity in the x axis
     * ent.vx = 0; // reset the linear velocity in the x axis
     * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">_vx: 0,</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span>@</span><br><span class="line"> <span class="keyword">*</span> <span class="comment">#.vy</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@comp Motion</span></span><br><span class="line"> <span class="keyword">*</span> </span><br><span class="line"> <span class="keyword">*</span> A property for accessing/modifying the linear velocity in the y axis.</span><br><span class="line"> <span class="keyword">*</span> The velocity remains constant over time, unless the acceleration changes the velocity.</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@example</span></span><br><span class="line"> <span class="keyword">*</span></span><br></pre></td></tr></table></figure>

     * var ent = Crafty.e(&quot;2D, Motion&quot;);
     *
     * var vy = ent.vy; // retrieve the linear velocity in the y axis
     * ent.vy += 1; // increase the linear velocity in the y axis
     * ent.vy = 0; // reset the linear velocity in the y axis
     * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">_vy: 0,</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span>@</span><br><span class="line"> <span class="keyword">*</span> <span class="comment">#.ax</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@comp Motion</span></span><br><span class="line"> <span class="keyword">*</span> </span><br><span class="line"> <span class="keyword">*</span> A property for accessing/modifying the linear acceleration in the x axis.</span><br><span class="line"> <span class="keyword">*</span> The acceleration changes the velocity over time.</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@example</span></span><br><span class="line"> <span class="keyword">*</span></span><br></pre></td></tr></table></figure>

     * var ent = Crafty.e(&quot;2D, Motion&quot;);
     *
     * var ax = ent.ax; // retrieve the linear acceleration in the x axis
     * ent.ax += 1; // increase the linear acceleration in the x axis
     * ent.ax = 0; // reset the linear acceleration in the x axis
     * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">_ax: 0,</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span>@</span><br><span class="line"> <span class="keyword">*</span> <span class="comment">#.ay</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@comp Motion</span></span><br><span class="line"> <span class="keyword">*</span> </span><br><span class="line"> <span class="keyword">*</span> A property for accessing/modifying the linear acceleration in the y axis.</span><br><span class="line"> <span class="keyword">*</span> The acceleration changes the velocity over time.</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@example</span></span><br><span class="line"> <span class="keyword">*</span></span><br></pre></td></tr></table></figure>

     * var ent = Crafty.e(&quot;2D, Motion&quot;);
     *
     * var ay = ent.ay; // retrieve the linear acceleration in the y axis
     * ent.ay += 1; // increase the linear acceleration in the y axis
     * ent.ay = 0; // reset the linear acceleration in the y axis
     * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">_ay: 0,</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span>@</span><br><span class="line"> <span class="keyword">*</span> <span class="comment">#.dx</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@comp Motion</span></span><br><span class="line"> <span class="keyword">*</span> </span><br><span class="line"> <span class="keyword">*</span> A number that reflects the change in x (difference between the old &amp; new x) that was applied in the last frame.</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@example</span></span><br><span class="line"> <span class="keyword">*</span></span><br></pre></td></tr></table></figure>

     * var ent = Crafty.e(&quot;2D, Motion&quot;);
     *
     * var dx = ent.dx; // the change of x in the last frame
     * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">_dx: 0,</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span>@</span><br><span class="line"> <span class="keyword">*</span> <span class="comment">#.dy</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@comp Motion</span></span><br><span class="line"> <span class="keyword">*</span> </span><br><span class="line"> <span class="keyword">*</span> A number that reflects the change in y (difference between the old &amp; new y) that was applied in the last frame.</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@example</span></span><br><span class="line"> <span class="keyword">*</span></span><br></pre></td></tr></table></figure>

     * var ent = Crafty.e(&quot;2D, Motion&quot;);
     *
     * var dy = ent.dy; // the change of y in the last frame
     * <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"> */</span><br><span class="line"><span class="string">_dy:</span> <span class="number">0</span>,</span><br><span class="line"><span class="label"></span><br><span class="line">init:</span> function () {</span><br><span class="line">    <span class="keyword">this</span>.requires(<span class="string">&quot;2D&quot;</span>);</span><br><span class="line"></span><br><span class="line">    __motionProp(<span class="keyword">this</span>, <span class="string">&quot;v&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    __motionProp(<span class="keyword">this</span>, <span class="string">&quot;v&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">this</span>._velocity = __motionVector(<span class="keyword">this</span>, <span class="string">&quot;v&quot;</span>, <span class="literal">true</span>, <span class="keyword">new</span> Crafty.math.Vector2D());</span><br><span class="line">    __motionProp(<span class="keyword">this</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    __motionProp(<span class="keyword">this</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">this</span>._acceleration = __motionVector(<span class="keyword">this</span>, <span class="string">&quot;a&quot;</span>, <span class="literal">true</span>, <span class="keyword">new</span> Crafty.math.Vector2D());</span><br><span class="line">    __motionProp(<span class="keyword">this</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    __motionProp(<span class="keyword">this</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">this</span>._motionDelta = __motionVector(<span class="keyword">this</span>, <span class="string">&quot;d&quot;</span>, <span class="literal">false</span>, <span class="keyword">new</span> Crafty.math.Vector2D());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.__movedEvent = {<span class="string">axis:</span> <span class="string">&apos;&apos;</span>, <span class="string">oldValue:</span> <span class="number">0</span>};</span><br><span class="line">    <span class="keyword">this</span>.__oldDirection = {<span class="string">x:</span> <span class="number">0</span>, <span class="string">y:</span> <span class="number">0</span>};</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.bind(<span class="string">&quot;EnterFrame&quot;</span>, <span class="keyword">this</span>._linearMotionTick);</span><br><span class="line">},</span><br><span class="line"><span class="string">remove:</span> function(destroyed) {</span><br><span class="line">    <span class="keyword">this</span>.unbind(<span class="string">&quot;EnterFrame&quot;</span>, <span class="keyword">this</span>._linearMotionTick);</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #.resetMotion</span><br><span class="line"> * <span class="doctag">@comp</span> Motion</span><br><span class="line"> * <span class="doctag">@sign</span> public this .resetMotion()</span><br><span class="line"> * <span class="doctag">@return</span> this</span><br><span class="line"> * </span><br><span class="line"> * Reset all linear motion (resets velocity, acceleration, motionDelta).</span><br><span class="line"> */</span></span><br><span class="line"><span class="string">resetMotion:</span> function() {</span><br><span class="line">    <span class="keyword">this</span>.vx = <span class="number">0</span>; <span class="keyword">this</span>.vy = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.ax = <span class="number">0</span>; <span class="keyword">this</span>.ay = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>._dx = <span class="number">0</span>; <span class="keyword">this</span>._dy = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #.motionDelta</span><br><span class="line"> * <span class="doctag">@comp</span> Motion</span><br><span class="line"> * <span class="doctag">@sign</span> public Vector2D .motionDelta()</span><br><span class="line"> * <span class="doctag">@return</span> A Vector2D with the properties {x, y} that reflect the change in x &amp; y.</span><br><span class="line"> * </span><br><span class="line"> * Returns the difference between the old &amp; new position that was applied in the last frame.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@example</span></span><br><span class="line"> *</span></span><br></pre></td></tr></table></figure>

     * var ent = Crafty.e(&quot;2D, Motion&quot;);
     *
     * var deltaY = ent.motionDelta().y; // the change of y in the last frame
     * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">*</span> <span class="comment">@see Crafty.math.Vector2D</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">motionDelta: function() {</span><br><span class="line">    return this._motionDelta;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span>@</span><br><span class="line"> <span class="keyword">*</span> <span class="comment">#.velocity</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@comp Motion</span></span><br><span class="line"> <span class="keyword">*</span> Method for accessing/modifying the linear(x,y) velocity. </span><br><span class="line"> <span class="keyword">*</span> The velocity remains constant over time, unless the acceleration increases the velocity.</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@sign public Vector2D .velocity()</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@return The velocity Vector2D with the properties {x, y} that reflect the velocities in the &lt;x, y&gt; direction of the entity.</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> Returns the current velocity. You can access/modify the properties in order to retrieve/change the velocity.</span><br><span class="line"></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@example</span></span><br><span class="line"> <span class="keyword">*</span></span><br></pre></td></tr></table></figure>

     * var ent = Crafty.e(&quot;2D, Motion&quot;);
     *
     * var vel = ent.velocity(); //returns the velocity vector
     * vel.x;       // retrieve the velocity in the x direction
     * vel.x = 0;   // set the velocity in the x direction
     * vel.x += 4   // add to the velocity in the x direction
     * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">*</span> <span class="comment">@see Crafty.math.Vector2D</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">velocity: function() {</span><br><span class="line">    return this._velocity;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span>@</span><br><span class="line"> <span class="keyword">*</span> <span class="comment">#.acceleration</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@comp Motion</span></span><br><span class="line"> <span class="keyword">*</span> Method for accessing/modifying the linear(x,y) acceleration. </span><br><span class="line"> <span class="keyword">*</span> The acceleration increases the velocity over time, resulting in ever increasing speed.</span><br><span class="line"> <span class="keyword">*</span> </span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@sign public Vector2D .acceleration()</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@return The acceleration Vector2D with the properties {x, y} that reflects the acceleration in the &lt;x, y&gt; direction of the entity.</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> Returns the current acceleration. You can access/modify the properties in order to retrieve/change the acceleration.</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@example</span></span><br><span class="line"> <span class="keyword">*</span></span><br></pre></td></tr></table></figure>

     * var ent = Crafty.e(&quot;2D, Motion&quot;);
     *
     * var acc = ent.acceleration(); //returns the acceleration object
     * acc.x;       // retrieve the acceleration in the x direction
     * acc.x = 0;   // set the acceleration in the x direction
     * acc.x += 4   // add to the acceleration in the x direction
     * <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">     * @see Crafty.math.Vector2D</span><br><span class="line">     */</span><br><span class="line">    acceleration: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._acceleration;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span><br><span class="line">     * s += v * &#x394;t + (0.5 * a) * &#x394;t * &#x394;t</span><br><span class="line">     * v += a * &#x394;t</span><br><span class="line">     */</span></span><br><span class="line">    _linearMotionTick: <span class="function"><span class="keyword">function</span><span class="params">(frameData)</span> </span>{</span><br><span class="line">        <span class="keyword">var</span> dt = frameData.dt / <span class="number">1000</span>; <span class="comment">// time in s</span></span><br><span class="line">        <span class="keyword">var</span> oldX = <span class="keyword">this</span>._x, vx = <span class="keyword">this</span>._vx, ax = <span class="keyword">this</span>._ax,</span><br><span class="line">            oldY = <span class="keyword">this</span>._y, vy = <span class="keyword">this</span>._vy, ay = <span class="keyword">this</span>._ay;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// s += v * &#x394;t + (0.5 * a) * &#x394;t * &#x394;t</span></span><br><span class="line">        <span class="keyword">var</span> newX = oldX + vx * dt + <span class="number">0.5</span> * ax * dt * dt;</span><br><span class="line">        <span class="keyword">var</span> newY = oldY + vy * dt + <span class="number">0.5</span> * ay * dt * dt;</span><br><span class="line">        <span class="comment">// v += a * &#x394;t</span></span><br><span class="line">        <span class="keyword">this</span>.vx = vx + ax * dt;</span><br><span class="line">        <span class="keyword">this</span>.vy = vy + ay * dt;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check if direction of velocity has changed</span></span><br><span class="line">        <span class="keyword">var</span> oldDirection = <span class="keyword">this</span>.__oldDirection,</span><br><span class="line">            _vx = <span class="keyword">this</span>._vx, dvx = _vx ? (_vx&lt;<span class="number">0</span> ? -<span class="number">1</span>:<span class="number">1</span>):<span class="number">0</span>, <span class="comment">// A quick implementation of Math.sign</span></span><br><span class="line">            _vy = <span class="keyword">this</span>._vy, dvy = _vy ? (_vy&lt;<span class="number">0</span> ? -<span class="number">1</span>:<span class="number">1</span>):<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (oldDirection.x !== dvx || oldDirection.y !== dvy) {</span><br><span class="line">            oldDirection.x = dvx;</span><br><span class="line">            oldDirection.y = dvy;</span><br><span class="line">            <span class="keyword">this</span>.trigger(<span class="string">&apos;NewDirection&apos;</span>, oldDirection);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check if velocity has changed</span></span><br><span class="line">        <span class="keyword">var</span> movedEvent = <span class="keyword">this</span>.__movedEvent;</span><br><span class="line">        <span class="comment">// &#x394;s = s[t] - s[t-1]</span></span><br><span class="line">        <span class="keyword">this</span>._dx = newX - oldX;</span><br><span class="line">        <span class="keyword">this</span>._dy = newY - oldY;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._dx !== <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">this</span>.x = newX;</span><br><span class="line">            movedEvent.axis = <span class="string">&apos;x&apos;</span>;</span><br><span class="line">            movedEvent.oldValue = oldX;</span><br><span class="line">            <span class="keyword">this</span>.trigger(<span class="string">&apos;Moved&apos;</span>, movedEvent);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._dy !== <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">this</span>.y = newY;</span><br><span class="line">            movedEvent.axis = <span class="string">&apos;y&apos;</span>;</span><br><span class="line">            movedEvent.oldValue = oldY;</span><br><span class="line">            <span class="keyword">this</span>.trigger(<span class="string">&apos;Moved&apos;</span>, movedEvent);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Crafty.polygon</span><br><span class="line"> * @category 2D</span><br><span class="line"> *</span><br><span class="line"> * The constructor for a polygon object used for hitboxes and click maps. Takes a set of points as an</span><br><span class="line"> * argument, giving alternately the x and y coordinates of the polygon&apos;s vertices in order.</span><br><span class="line"> *</span><br><span class="line"> * The constructor accepts the coordinates as either a single array or as a set of individual arguments.</span><br><span class="line"> * If passed an array, the current implementation will use that array internally -- do not attempt to reuse it.</span><br><span class="line"> *</span><br><span class="line"> * When creating a polygon for an entity, each point should be offset or relative from the entities `x` and `y`</span><br><span class="line"> * (don&apos;t include the absolute values as it will automatically calculate this).</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> * @example</span><br><span class="line"> * Two ways to create a triangle with vertices at `(50, 0)`, `(100, 100)` and `(0, 100)`.</span><br><span class="line"> *</span></span><br></pre></td></tr></table></figure>

 * new Crafty.polygon([50, 0, 100, 100, 0, 100]);
 * new Crafty.polygon(50, 0, 100, 100, 0, 100);
 * <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">Crafty.polygon = function (poly) {</span><br><span class="line">    if (arguments.length &gt; 1) {</span><br><span class="line">        poly = Array.prototype.slice.call(arguments, 0);</span><br><span class="line">    }</span><br><span class="line">    this.points = poly;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">Crafty.polygon.prototype = {</span><br><span class="line">    /<span class="keyword">*</span><span class="keyword">*</span>@</span><br><span class="line">     <span class="keyword">*</span> <span class="comment">#.containsPoint</span></span><br><span class="line">     <span class="keyword">*</span> <span class="comment">@comp Crafty.polygon</span></span><br><span class="line">     <span class="keyword">*</span> <span class="comment">@sign public Boolean .containsPoint(Number x, Number y)</span></span><br><span class="line">     <span class="keyword">*</span> <span class="comment">@param x - X position of the point</span></span><br><span class="line">     <span class="keyword">*</span> <span class="comment">@param y - Y position of the point</span></span><br><span class="line">     <span class="keyword">*</span></span><br><span class="line">     <span class="keyword">*</span> Method is used to determine if a given point is contained by the polygon.</span><br><span class="line">     <span class="keyword">*</span></span><br><span class="line">     <span class="keyword">*</span> <span class="comment">@example</span></span><br><span class="line">     <span class="keyword">*</span></span><br></pre></td></tr></table></figure>

     * var poly = new Crafty.polygon([50, 0, 100, 100, 0, 100]);
     * poly.containsPoint(50, 50); //TRUE
     * poly.containsPoint(0, 0); //FALSE
     * <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> */</span><br><span class="line">containsPoint: function (x, y) {</span><br><span class="line">    var p = <span class="keyword">this</span>.points, l = p.length/<span class="number">2</span>,</span><br><span class="line">        i, j, c = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, j = l - <span class="number">1</span>; i &lt; l; j = i++) {</span><br><span class="line">        <span class="keyword">if</span> (((p[<span class="number">2</span>*i+<span class="number">1</span>] &gt; y) != (p[<span class="number">2</span>*j+<span class="number">1</span>] &gt; y)) &amp;&amp; (x &lt; (p[<span class="number">2</span>*j] - p[<span class="number">2</span>*i]) * (y - p[<span class="number">2</span>*i+<span class="number">1</span>]) / (p[<span class="number">2</span>*j+<span class="number">1</span>] - p[<span class="number">2</span>*i+<span class="number">1</span>]) + p[<span class="number">2</span>*i])) {</span><br><span class="line">            c = !c;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #.shift</span><br><span class="line"> * @comp Crafty.polygon</span><br><span class="line"> * @sign public void .shift(Number x, Number y)</span><br><span class="line"> * @param x - Amount to shift the `x` axis</span><br><span class="line"> * @param y - Amount to shift the `y` axis</span><br><span class="line"> *</span><br><span class="line"> * Shifts every single point in the polygon by the specified amount.</span><br><span class="line"> *</span><br><span class="line"> * @example</span><br><span class="line"> *</span></span><br></pre></td></tr></table></figure>

     * var poly = new Crafty.polygon([50, 0, 100, 100, 0, 100]);
     * poly.shift(5,5);
     * //[[55, 5, 105, 5, 5, 105];
     * <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> */</span><br><span class="line">shift: <span class="function"><span class="keyword">function</span> <span class="params">(x, y)</span> </span>{</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>, p =this.points,</span><br><span class="line">        l = p.length;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; l; i+=<span class="number">2</span>) {</span><br><span class="line">        p[i] += x;</span><br><span class="line">        p[i+<span class="number">1</span>] += y;</span><br><span class="line">    }</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #.clone</span><br><span class="line"> * <span class="doctag">@comp</span> Crafty.polygon</span><br><span class="line"> * <span class="doctag">@sign</span> public void .clone()</span><br><span class="line"> * </span><br><span class="line"> * Returns a clone of the polygon.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@example</span></span><br><span class="line"> *</span></span><br></pre></td></tr></table></figure>

     * var poly = new Crafty.polygon([50, 0, 100, 100, 0, 100]);
     * var shiftedpoly = poly.clone().shift(5,5);
     * //[55, 5, 105, 5, 5, 105], but the original polygon is unchanged
     * <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">     */</span></span><br><span class="line">    clone: function() {</span><br><span class="line">        <span class="comment">//Shallow clone, but points should be full of Number primitives that are copied</span></span><br><span class="line">        <span class="keyword">return</span> new Crafty.polygon(this.points.slice(0));</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="keyword">rotate</span>: function (<span class="keyword">e</span>) {</span><br><span class="line">        <span class="keyword">var</span> i = 0, p = this.points,</span><br><span class="line">            <span class="keyword">l</span> = p.length,</span><br><span class="line">            x, y;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (; i &lt; <span class="keyword">l</span>; i+=2) {</span><br><span class="line"></span><br><span class="line">            x = <span class="keyword">e</span>.o.x + (p[i] - <span class="keyword">e</span>.o.x) * <span class="keyword">e</span>.cos + (p[i+1] - <span class="keyword">e</span>.o.y) * <span class="keyword">e</span>.sin;</span><br><span class="line">            y = <span class="keyword">e</span>.o.y - (p[i] - <span class="keyword">e</span>.o.x) * <span class="keyword">e</span>.sin + (p[i+1] - <span class="keyword">e</span>.o.y) * <span class="keyword">e</span>.cos;</span><br><span class="line"></span><br><span class="line">            p[i] = x;</span><br><span class="line">            p[i+1] = y;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Crafty.circle</span><br><span class="line"> * @category 2D</span><br><span class="line"> * Circle object used for hitboxes and click maps. Must pass a `x`, a `y` and a `radius` value.</span><br><span class="line"> *</span><br><span class="line"> *@example</span><br><span class="line"> *</span></span><br></pre></td></tr></table></figure>

 * var centerX = 5,
 *     centerY = 10,
 *     radius = 25;
 *
 * new Crafty.circle(centerX, centerY, radius);
 * <figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> *</span><br><span class="line"> * <span class="type">When</span> creating a circle <span class="keyword">for</span> an entity, each point should be offset or relative from the entities `x` and `y`</span><br><span class="line"> * (don<span class="symbol">&apos;t</span> include the absolute values as it will automatically calculate <span class="keyword">this</span>).</span><br><span class="line"> */</span><br><span class="line"><span class="type">Crafty</span>.circle = function (x, y, radius) {</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">    <span class="keyword">this</span>.radius = radius;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Creates an octagon that approximate the circle for backward compatibility.</span></span><br><span class="line">    <span class="keyword">this</span>.points = [];</span><br><span class="line">    <span class="keyword">var</span> theta;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i+=<span class="number">2</span>) {</span><br><span class="line">        theta = i * <span class="type">Math</span>.<span class="type">PI</span> / <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">this</span>.points[i] = <span class="keyword">this</span>.x + (<span class="type">Math</span>.sin(theta) * radius);</span><br><span class="line">        <span class="keyword">this</span>.points[i+<span class="number">1</span>] = <span class="keyword">this</span>.y + (<span class="type">Math</span>.cos(theta) * radius);</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="type">Crafty</span>.circle.prototype = {</span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.containsPoint</span><br><span class="line">     * @comp Crafty.circle</span><br><span class="line">     * @sign public Boolean .containsPoint(Number x, Number y)</span><br><span class="line">     * @param x - X position of the point</span><br><span class="line">     * @param y - Y position of the point</span><br><span class="line">     *</span><br><span class="line">     * Method is used to determine if a given point is contained by the circle.</span><br><span class="line">     *</span><br><span class="line">     * @example</span><br><span class="line">     *</span></span><br></pre></td></tr></table></figure>

     * var circle = new Crafty.circle(0, 0, 10);
     * circle.containsPoint(0, 0); //TRUE
     * circle.containsPoint(50, 50); //FALSE
     * <figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> */</span><br><span class="line">containsPoint: function (x, y) {</span><br><span class="line">    var radius = <span class="keyword">this</span>.radius,</span><br><span class="line">        sqrt = Math.sqrt,</span><br><span class="line">        deltaX = <span class="keyword">this</span>.x - x,</span><br><span class="line">        deltaY = <span class="keyword">this</span>.y - y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (deltaX * deltaX + deltaY * deltaY) &lt; (radius * radius);</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #.shift</span><br><span class="line"> * <span class="doctag">@comp</span> Crafty.circle</span><br><span class="line"> * <span class="doctag">@sign</span> public void .shift(Number x, Number y)</span><br><span class="line"> * <span class="doctag">@param</span> x - Amount to shift the `x` axis</span><br><span class="line"> * <span class="doctag">@param</span> y - Amount to shift the `y` axis</span><br><span class="line"> *</span><br><span class="line"> * Shifts the circle by the specified amount.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@example</span></span><br><span class="line"> *</span></span><br></pre></td></tr></table></figure>

     * var circle = new Crafty.circle(0, 0, 10);
     * circle.shift(5,5);
     * //{x: 5, y: 5, radius: 10};
     * <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">     */</span><br><span class="line">    shift: <span class="function"><span class="keyword">function</span> <span class="params">(x, y)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.x += x;</span><br><span class="line">        <span class="keyword">this</span>.y += y;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>, p = <span class="keyword">this</span>.points,</span><br><span class="line">            l = p.length,</span><br><span class="line">            current;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt; l; i+=<span class="number">2</span>) {</span><br><span class="line">            p[i] += x;</span><br><span class="line">            p[i+<span class="number">1</span>] += y;</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    rotate: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">// We are a circle, we don&apos;t have to rotate :)</span></span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Crafty.matrix = <span class="function"><span class="keyword">function</span> <span class="params">(m)</span> </span>{</span><br><span class="line">    <span class="keyword">this</span>.mtx = m;</span><br><span class="line">    <span class="keyword">this</span>.width = m[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">this</span>.height = m.length;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">Crafty.matrix.prototype = {</span><br><span class="line">    x: <span class="function"><span class="keyword">function</span> <span class="params">(other)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.width != other.height) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> result = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.height; i++) {</span><br><span class="line">            result[i] = [];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; other.width; j++) {</span><br><span class="line">                <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; <span class="keyword">this</span>.width; k++) {</span><br><span class="line">                    sum += <span class="keyword">this</span>.mtx[i][k] * other.mtx[k][j];</span><br><span class="line">                }</span><br><span class="line">                result[i][j] = sum;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Crafty.matrix(result);</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    e: <span class="function"><span class="keyword">function</span> <span class="params">(row, col)</span> </span>{</span><br><span class="line">        <span class="comment">//test if out of bounds</span></span><br><span class="line">        <span class="keyword">if</span> (row &lt; <span class="number">1</span> || row &gt; <span class="keyword">this</span>.mtx.length || col &lt; <span class="number">1</span> || col &gt; <span class="keyword">this</span>.mtx[<span class="number">0</span>].length) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.mtx[row - <span class="number">1</span>][col - <span class="number">1</span>];</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">},{<span class="string">&quot;../core/core.js&quot;</span>:<span class="number">7</span>,<span class="string">&quot;./spatial-grid.js&quot;</span>:<span class="number">43</span>}],<span class="number">40</span>:[<span class="function"><span class="keyword">function</span><span class="params">(require,module,exports)</span></span>{</span><br><span class="line"><span class="keyword">var</span> Crafty = require(<span class="string">&apos;../core/core.js&apos;</span>),</span><br><span class="line">    DEG_TO_RAD = Math.PI / <span class="number">180</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Collision</span><br><span class="line"> * @category 2D</span><br><span class="line"> * @trigger HitOn - Triggered when collisions occur. Will not trigger again until collisions of this type cease, or an event is requested once more (using `resetHitChecks(component)`). - { hitData }</span><br><span class="line"> * @trigger HitOff - Triggered when collision with a specific component type ceases - String - componentName</span><br><span class="line"> *</span><br><span class="line"> * Component to detect collision between any two convex polygons.</span><br><span class="line"> *</span><br><span class="line"> * If collision checks are registered for multiple component and collisions with</span><br><span class="line"> * multiple types occur simultaniously, each collision will cause an individual</span><br><span class="line"> * event to fire.</span><br><span class="line"> *</span><br><span class="line"> * @note All data received from events is only valid for the duration of the event&apos;s callback.</span><br><span class="line"> * If you wish to preserve the data, make a copy of it.</span><br><span class="line"> *</span><br><span class="line"> * For a description of collision event data (hitData above), see the documentation for</span><br><span class="line"> * `.hit()`.</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br><span class="line">Crafty.c(<span class="string">&quot;Collision&quot;</span>, {</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.requires(<span class="string">&quot;2D&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>._collisionData = {};</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.collision();</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Run by Crafty when the component is removed</span></span><br><span class="line">    remove: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>._cbr = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.unbind(<span class="string">&quot;Resize&quot;</span>, <span class="keyword">this</span>._resizeMap);</span><br><span class="line">        <span class="keyword">this</span>.unbind(<span class="string">&quot;Resize&quot;</span>, <span class="keyword">this</span>._checkBounds);</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.collision</span><br><span class="line">     * @comp Collision</span><br><span class="line">     *</span><br><span class="line">     * @trigger NewHitbox - when a new hitbox is assigned - Crafty.polygon</span><br><span class="line">     *</span><br><span class="line">     * @sign public this .collision([Crafty.polygon polygon])</span><br><span class="line">     * @param polygon - Optional Crafty.polygon object that will act as the hit area.</span><br><span class="line">     *</span><br><span class="line">     * @sign public this .collision([Array coordinatePairs])</span><br><span class="line">     * @param coordinatePairs - Optional array of x, y coordinate pairs to generate a hit area polygon.</span><br><span class="line">     *</span><br><span class="line">     * @sign public this .collision([x1, y1,.., xN, yN])</span><br><span class="line">     * @param point# - Optional list of x, y coordinate pairs to generate a hit area polygon.</span><br><span class="line">     *</span><br><span class="line">     * Constructor that takes a polygon, an array of points or a list of points to use as the hit area,</span><br><span class="line">     * with points being relative to the object&apos;s position in its unrotated state.</span><br><span class="line">     *</span><br><span class="line">     * The hit area must be a convex shape and not concave for collision detection to work properly.</span><br><span class="line">     *</span><br><span class="line">     * If no parameter is passed, the x, y, w, h properties of the entity will be used, and the hitbox will be resized when the entity is.</span><br><span class="line">     *</span><br><span class="line">     * If a hitbox is set that is outside of the bounds of the entity itself, there will be a small performance penalty as it is tracked separately.</span><br><span class="line">     *</span><br><span class="line">     * In order for your custom hitbox to have any effect, you have to add the `Collision` component to all other entities this entity needs to collide with using this custom hitbox.</span><br><span class="line">     * On the contrary the collisions will be resolved using the default hitbox. See `.hit()` - `MBR` represents default hitbox collision, `SAT` represents custom hitbox collision.</span><br><span class="line">     *</span><br><span class="line">     * @example</span><br><span class="line">     *</span></span><br></pre></td></tr></table></figure>

     * Crafty.e(&quot;2D, Collision&quot;).collision(
     *     new Crafty.polygon([50, 0,  100, 100,  0, 100])
     * );
     *
     * Crafty.e(&quot;2D, Collision&quot;).collision([50, 0,  100, 100,  0, 100]);
     *
     * Crafty.e(&quot;2D, Collision&quot;).collision(50, 0,  100, 100,  0, 100);
     * <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"> *</span><br><span class="line"> * @see Crafty.polygon</span><br><span class="line"> */</span><br><span class="line">collision: function (polygon) {</span><br><span class="line">    <span class="comment">// Unbind anything bound to &quot;Resize&quot;</span></span><br><span class="line">    <span class="keyword">this</span>.unbind(<span class="string">&quot;Resize&quot;</span>, <span class="keyword">this</span>._resizeMap);</span><br><span class="line">    <span class="keyword">this</span>.unbind(<span class="string">&quot;Resize&quot;</span>, <span class="keyword">this</span>._checkBounds);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!polygon) {</span><br><span class="line">        <span class="comment">// If no polygon is specified, then a polygon is created that matches the bounds of the entity</span></span><br><span class="line">        <span class="comment">// It will be adjusted on a &quot;Resize&quot; event</span></span><br><span class="line">        polygon = <span class="keyword">new</span> Crafty.polygon([<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>._w, <span class="number">0</span>, <span class="keyword">this</span>._w, <span class="keyword">this</span>._h, <span class="number">0</span>, <span class="keyword">this</span>._h]);</span><br><span class="line">        <span class="keyword">this</span>.bind(<span class="string">&quot;Resize&quot;</span>, <span class="keyword">this</span>._resizeMap);</span><br><span class="line">        <span class="keyword">this</span>._cbr = null;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="comment">// Otherwise, we set the specified hitbox, converting from a list of arguments to a polygon if necessary</span></span><br><span class="line">        <span class="keyword">if</span> (arguments.length &gt; <span class="number">1</span>) {</span><br><span class="line">            <span class="comment">//convert args to array to create polygon</span></span><br><span class="line">            var args = Array.prototype.slice.call(arguments, <span class="number">0</span>);</span><br><span class="line">            polygon = <span class="keyword">new</span> Crafty.polygon(args);</span><br><span class="line">        <span class="comment">// Otherwise, we set the specified hitbox, converting from an array of points to a polygon if necessary</span></span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (polygon.constructor === Array) {</span><br><span class="line">            <span class="comment">//Clone the array so we don&apos;t modify it for anything else that might be using it</span></span><br><span class="line">            polygon = <span class="keyword">new</span> Crafty.polygon(polygon.slice());</span><br><span class="line">        <span class="comment">// Otherwise, we set the specified hitbox</span></span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="comment">//Clone the polygon so we don&apos;t modify it for anything else that might be using it</span></span><br><span class="line">            polygon = polygon.clone();</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// Check to see if the polygon sits outside the entity, and set _cbr appropriately</span></span><br><span class="line">        <span class="comment">// On resize, the new bounds will be checked if necessary</span></span><br><span class="line">        <span class="keyword">this</span>._findBounds(polygon.points);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the entity is currently rotated, the points in the hitbox must also be rotated</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.rotation) {</span><br><span class="line">        polygon.rotate({</span><br><span class="line">            <span class="built_in">cos</span>: Math.<span class="built_in">cos</span>(-<span class="keyword">this</span>.rotation * DEG_TO_RAD),</span><br><span class="line">            <span class="built_in">sin</span>: Math.<span class="built_in">sin</span>(-<span class="keyword">this</span>.rotation * DEG_TO_RAD),</span><br><span class="line">            o: {</span><br><span class="line">                x: <span class="keyword">this</span>._origin.x,</span><br><span class="line">                y: <span class="keyword">this</span>._origin.y</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Finally, assign the hitbox, and attach it to the &quot;Collision&quot; entity</span></span><br><span class="line">    <span class="keyword">this</span>.<span class="built_in">map</span> = polygon;</span><br><span class="line">    <span class="keyword">this</span>.attach(<span class="keyword">this</span>.<span class="built_in">map</span>);</span><br><span class="line">    <span class="keyword">this</span>.<span class="built_in">map</span>.shift(<span class="keyword">this</span>._x, <span class="keyword">this</span>._y);</span><br><span class="line">    <span class="keyword">this</span>.trigger(<span class="string">&quot;NewHitbox&quot;</span>, polygon);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment">// If the hitbox is set by hand, it might extend beyond the entity.</span></span><br><span class="line"><span class="comment">// In such a case, we need to track this separately.</span></span><br><span class="line"><span class="comment">// This function finds a (non-minimal) bounding circle around the hitbox.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// It uses a pretty naive algorithm to do so, for more complicated options see [wikipedia](http://en.wikipedia.org/wiki/Bounding_sphere).</span></span><br><span class="line">_findBounds: function(points) {</span><br><span class="line">    var minX = Infinity, maxX = -Infinity, minY=Infinity, maxY=-Infinity;</span><br><span class="line">    var l = points.length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Calculate the MBR of the points by finding the min/max x and y</span></span><br><span class="line">    <span class="keyword">for</span> (var i=<span class="number">0</span>; i&lt;l; i+=<span class="number">2</span>) {</span><br><span class="line">        <span class="keyword">if</span> (points[i] &lt; minX)</span><br><span class="line">            minX = points[i];</span><br><span class="line">        <span class="keyword">if</span> (points[i] &gt; maxX)</span><br><span class="line">            maxX = points[i];</span><br><span class="line">        <span class="keyword">if</span> (points[i+<span class="number">1</span>] &lt; minY)</span><br><span class="line">            minY = points[i+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (points[i+<span class="number">1</span>] &gt; maxY)</span><br><span class="line">            maxY = points[i+<span class="number">1</span>];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This describes a circle centered on the MBR of the points, with a diameter equal to its diagonal</span></span><br><span class="line">    <span class="comment">// It will be used to find a rough bounding box round the points, even if they&apos;ve been rotated</span></span><br><span class="line">    var cbr = {</span><br><span class="line">        cx: (minX + maxX) / <span class="number">2</span>,</span><br><span class="line">        cy: (minY + maxY) / <span class="number">2</span>,</span><br><span class="line">        r: Math.<span class="built_in">sqrt</span>((maxX - minX)*(maxX - minX) + (maxY - minY)*(maxY - minY)) / <span class="number">2</span></span><br><span class="line">    };</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We need to worry about resizing, but only if resizing could possibly change whether the hitbox is in or out of bounds</span></span><br><span class="line">    <span class="comment">// Thus if the upper-left corner is out of bounds, then there&apos;s no need to recheck on resize</span></span><br><span class="line">    <span class="keyword">if</span> (minX &gt;= <span class="number">0</span> &amp;&amp; minY &gt;= <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">this</span>._checkBounds = function() {</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>._cbr === null &amp;&amp; <span class="keyword">this</span>._w &lt; maxX || <span class="keyword">this</span>._h &lt; maxY) {</span><br><span class="line">               <span class="keyword">this</span>._cbr = cbr;</span><br><span class="line">               <span class="keyword">this</span>._calculateMBR();</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>._cbr) {</span><br><span class="line">                <span class="keyword">this</span>._cbr = null;</span><br><span class="line">                <span class="keyword">this</span>._calculateMBR();</span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line">        <span class="keyword">this</span>.bind(<span class="string">&quot;Resize&quot;</span>, <span class="keyword">this</span>._checkBounds);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the hitbox is within the entity, _cbr is null</span></span><br><span class="line">    <span class="comment">// Otherwise, set it, and immediately calculate the bounding box.</span></span><br><span class="line">    <span class="keyword">if</span> (minX &gt;= <span class="number">0</span> &amp;&amp; minY &gt;= <span class="number">0</span> &amp;&amp; maxX &lt;= <span class="keyword">this</span>._w &amp;&amp; maxY &lt;= <span class="keyword">this</span>._h) {</span><br><span class="line">        <span class="keyword">this</span>._cbr = null;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">this</span>._cbr = cbr;</span><br><span class="line">        <span class="keyword">this</span>._calculateMBR();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment">// The default behavior is to match the hitbox to the entity.</span></span><br><span class="line"><span class="comment">// This function will change the hitbox when a &quot;Resize&quot; event triggers.</span></span><br><span class="line">_resizeMap: function (e) {</span><br><span class="line">    var dx, dy, rot = <span class="keyword">this</span>.rotation * DEG_TO_RAD,</span><br><span class="line">        points = <span class="keyword">this</span>.<span class="built_in">map</span>.points;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Depending on the change of axis, move the corners of the rectangle appropriately</span></span><br><span class="line">    <span class="keyword">if</span> (e.axis === <span class="string">&apos;w&apos;</span>) {</span><br><span class="line">        <span class="keyword">if</span> (rot) {</span><br><span class="line">            dx = e.amount * Math.<span class="built_in">cos</span>(rot);</span><br><span class="line">            dy = e.amount * Math.<span class="built_in">sin</span>(rot);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            dx = e.amount;</span><br><span class="line">            dy = <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &quot;top right&quot; point shifts on change of w</span></span><br><span class="line">        points[<span class="number">2</span>] += dx;</span><br><span class="line">        points[<span class="number">3</span>] += dy;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">if</span> (rot) {</span><br><span class="line">            dy = e.amount * Math.<span class="built_in">cos</span>(rot);</span><br><span class="line">            dx = -e.amount * Math.<span class="built_in">sin</span>(rot);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            dx = <span class="number">0</span>;</span><br><span class="line">            dy = e.amount;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &quot;bottom left&quot; point shifts on change of h</span></span><br><span class="line">        points[<span class="number">6</span>] += dx;</span><br><span class="line">        points[<span class="number">7</span>] += dy;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &quot;bottom right&quot; point shifts on either change</span></span><br><span class="line">    points[<span class="number">4</span>] += dx;</span><br><span class="line">    points[<span class="number">5</span>] += dy;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #.hit</span><br><span class="line"> * @comp Collision</span><br><span class="line"> * @sign public Boolean/Array hit(String component)</span><br><span class="line"> * @param component - Check collision with entities that have this component</span><br><span class="line"> * applied to them.</span><br><span class="line"> * @return `false` if there is no collision. If a collision is detected,</span><br><span class="line"> * returns an Array of collision data objects (see below).</span><br><span class="line"> *</span><br><span class="line"> * Tests for collisions with entities that have the specified component</span><br><span class="line"> * applied to them.</span><br><span class="line"> * If a collision is detected, data regarding the collision will be present in</span><br><span class="line"> * the array returned by this method.</span><br><span class="line"> * If no collisions occur, this method returns false.</span><br><span class="line"> *</span><br><span class="line"> * Following is a description of a collision data object that this method may</span><br><span class="line"> * return: The returned collision data will be an Array of Objects with the</span><br><span class="line"> * type of collision used, the object collided and if the type used was SAT (a polygon was used as the hitbox) then an amount of overlap.</span><br><span class="line"> *</span></span><br></pre></td></tr></table></figure>

     * [{
     *    obj: [entity],
     *    type: [&quot;MBR&quot; or &quot;SAT&quot;],
     *    overlap: [number]
     * }]
     * <figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"> *</span><br><span class="line"> * - **obj:** <span class="type">The</span> entity <span class="keyword">with</span> which the collision occured.</span><br><span class="line"> * - **<span class="keyword">type</span>:** <span class="type">Collision</span> detection <span class="keyword">method</span> used. <span class="type">One</span> <span class="keyword">of</span>:</span><br><span class="line"> *   - *<span class="type">MBR</span>:* <span class="type">Standard</span> axis aligned rectangle intersection (`.intersect` <span class="keyword">in</span> the <span class="number">2</span>D component).</span><br><span class="line"> *   - *<span class="type">SAT</span>:* <span class="type">Collision</span> between <span class="type">any</span> two convex polygons. <span class="type">Used</span> <span class="keyword">when</span> both colliding entities have the `<span class="type">Collision</span>` component applied to them.</span><br><span class="line"> * - **overlap:** <span class="type">If</span> <span class="type">SAT</span> collision was used, this will signify the overlap percentage between the colliding entities.</span><br><span class="line"> *</span><br><span class="line"> * <span class="type">Keep</span> <span class="keyword">in</span> mind that both entities need to have the `<span class="type">Collision</span>` component, <span class="keyword">if</span> you want to check <span class="keyword">for</span> `<span class="type">SAT</span>` (custom hitbox) collisions between them.</span><br><span class="line"> *</span><br><span class="line"> * <span class="type">If</span> you want more fine-grained control consider <span class="keyword">using</span> `<span class="type">Crafty</span>.map.search()`.</span><br><span class="line"> *</span><br><span class="line"> * @see <span class="number">2</span>D</span><br><span class="line"> */</span><br><span class="line">hit: function (component) {</span><br><span class="line">    <span class="keyword">var</span> area = this._cbr || this._mbr || this,</span><br><span class="line">        results = <span class="type">Crafty</span>.map.search(area, <span class="literal">false</span>),</span><br><span class="line">        i = <span class="number">0</span>,</span><br><span class="line">        l = results.length,</span><br><span class="line">        dupes = {},</span><br><span class="line">        id, obj, oarea, key,</span><br><span class="line">        overlap = <span class="type">Crafty</span>.rectManager.overlap,</span><br><span class="line">        hasMap = (&apos;map&apos; <span class="keyword">in</span> this &amp;&amp; &apos;containsPoint&apos; <span class="keyword">in</span> this.map),</span><br><span class="line">        finalresult = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!l) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (; i &lt; l; ++i) {</span><br><span class="line">        obj = results[i];</span><br><span class="line">        oarea = obj._cbr || obj._mbr || obj; //use the mbr</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!obj) <span class="keyword">continue</span>;</span><br><span class="line">        id = obj[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        //check <span class="keyword">if</span> <span class="keyword">not</span> added to hash <span class="keyword">and</span> that actually intersects</span><br><span class="line">        <span class="keyword">if</span> (!dupes[id] &amp;&amp; this[<span class="number">0</span>] !== id &amp;&amp; obj.__c[component] &amp;&amp; overlap(oarea, area))</span><br><span class="line">            dupes[id] = obj;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> dupes) {</span><br><span class="line">        obj = dupes[key];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (hasMap &amp;&amp; &apos;map&apos; <span class="keyword">in</span> obj) {</span><br><span class="line">            <span class="keyword">var</span> <span class="type">SAT</span> = this._SAT(this.map, obj.map);</span><br><span class="line">            <span class="type">SAT</span>.obj = obj;</span><br><span class="line">            <span class="type">SAT</span>.<span class="keyword">type</span> = <span class="string">&quot;SAT&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="type">SAT</span>) finalresult.push(<span class="type">SAT</span>);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            finalresult.push({</span><br><span class="line">                obj: obj,</span><br><span class="line">                <span class="keyword">type</span>: <span class="string">&quot;MBR&quot;</span></span><br><span class="line">            });</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!finalresult.length) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> finalresult;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">/**@</span><br><span class="line"> * <span class="comment">#.onHit</span></span><br><span class="line"> * @comp <span class="type">Collision</span></span><br><span class="line"> * @sign public this .onHit(<span class="type">String</span> component, <span class="type">Function</span> callbackOn[, <span class="type">Function</span> callbackOff])</span><br><span class="line"> * @param component - <span class="type">Component</span> to check collisions <span class="keyword">for</span>.</span><br><span class="line"> * @param callbackOn - <span class="type">Callback</span> <span class="keyword">method</span> to execute upon collision <span class="keyword">with</span> component. <span class="type">Will</span> be passed the results <span class="keyword">of</span> the collision check <span class="keyword">in</span> the same format documented <span class="keyword">for</span> hit().</span><br><span class="line"> * @param callbackOff - <span class="type">Callback</span> <span class="keyword">method</span> executed once <span class="keyword">as</span> soon <span class="keyword">as</span> collision stops.</span><br><span class="line"> *</span><br><span class="line"> * <span class="type">Creates</span> an <span class="type">EnterFrame</span> event calling `.hit()` each frame.  <span class="type">When</span> a collision <span class="keyword">is</span> detected the `callbackOn` will be invoked.</span><br><span class="line"> * <span class="type">Note</span> that the `callbackOn` will be invoked every frame the collision <span class="keyword">is</span> active, <span class="keyword">not</span> just the first time the collision occurs.</span><br><span class="line"> *</span><br><span class="line"> * <span class="type">If</span> you want more fine-grained control consider <span class="keyword">using</span> `.checkHits()`, `.hit()` <span class="keyword">or</span> even `<span class="type">Crafty</span>.map.search()`.</span><br><span class="line"> *</span><br><span class="line"> * @see .checkHits</span><br><span class="line"> * @see .hit</span><br><span class="line"> */</span><br><span class="line">onHit: function (component, callbackOn, callbackOff) {</span><br><span class="line">    <span class="keyword">var</span> justHit = <span class="literal">false</span>;</span><br><span class="line">    this.<span class="keyword">bind</span>(<span class="string">&quot;EnterFrame&quot;</span>, function () {</span><br><span class="line">        <span class="keyword">var</span> hitData = this.hit(component);</span><br><span class="line">        <span class="keyword">if</span> (hitData) {</span><br><span class="line">            justHit = <span class="literal">true</span>;</span><br><span class="line">            callbackOn.call(this, hitData);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (justHit) {</span><br><span class="line">            <span class="keyword">if</span> (typeof callbackOff == &apos;function&apos;) {</span><br><span class="line">                callbackOff.call(this);</span><br><span class="line">            }</span><br><span class="line">            justHit = <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line">    <span class="keyword">return</span> this;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * <span class="type">This</span> <span class="keyword">is</span> a helper <span class="keyword">method</span> <span class="keyword">for</span> creating collisions handlers <span class="type">set</span> up by `checkHits`. <span class="type">Do</span> <span class="keyword">not</span> call this directly.</span><br><span class="line"> *</span><br><span class="line"> * @param {<span class="type">String</span>} component - <span class="type">The</span> name <span class="keyword">of</span> the component <span class="keyword">for</span> which this handler checks <span class="keyword">for</span> collisions.</span><br><span class="line"> * @param {<span class="type">Object</span>} collisionData - <span class="type">Collision</span> data <span class="keyword">object</span> used to track collisions <span class="keyword">with</span> the specified component.</span><br><span class="line"> *</span><br><span class="line"> * @see .checkHits</span><br><span class="line"> */</span><br><span class="line">_createCollisionHandler: function(component, collisionData) {</span><br><span class="line">    <span class="keyword">return</span> function() {</span><br><span class="line">        <span class="keyword">var</span> hitData = this.hit(component);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (collisionData.occurring === <span class="literal">true</span>) {</span><br><span class="line">            <span class="keyword">if</span> (hitData !== <span class="literal">false</span>) {</span><br><span class="line">                // <span class="type">The</span> collision <span class="keyword">is</span> still <span class="keyword">in</span> progress</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            collisionData.occurring = <span class="literal">false</span>;</span><br><span class="line">            this.trigger(<span class="string">&quot;HitOff&quot;</span>, component);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (hitData !== <span class="literal">false</span>) {</span><br><span class="line">            collisionData.occurring = <span class="literal">true</span>;</span><br><span class="line">            this.trigger(<span class="string">&quot;HitOn&quot;</span>, hitData);</span><br><span class="line">        }</span><br><span class="line">    };</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">/**@</span><br><span class="line"> * <span class="comment">#.checkHits</span></span><br><span class="line"> * @comp <span class="type">Collision</span></span><br><span class="line"> * @sign public this .checkHits(<span class="type">String</span> componentList)</span><br><span class="line"> * @param componentList - A comma seperated list <span class="keyword">of</span> components to check <span class="keyword">for</span> collisions <span class="keyword">with</span>.</span><br><span class="line"> * @sign public this .checkHits(<span class="type">String</span> component1[, .., <span class="type">String</span> componentN])</span><br><span class="line"> * @param component<span class="comment"># - A component to check for collisions with.</span></span><br><span class="line"> *</span><br><span class="line"> * <span class="type">Performs</span> collision checks against all entities that have at least one <span class="keyword">of</span></span><br><span class="line"> * the components specified <span class="keyword">when</span> calling this <span class="keyword">method</span>. <span class="type">If</span> collisions occur,</span><br><span class="line"> * a <span class="string">&quot;HitOn&quot;</span> event containing the collision information will be fired <span class="keyword">for</span> the</span><br><span class="line"> * entity on which this <span class="keyword">method</span> was invoked. <span class="type">See</span> the documentation <span class="keyword">for</span> `.hit()`</span><br><span class="line"> * <span class="keyword">for</span> a description <span class="keyword">of</span> collision data contained <span class="keyword">in</span> the event.</span><br><span class="line"> * <span class="type">When</span> a collision that was reported ends, a corresponding <span class="string">&quot;HitOff&quot;</span> event</span><br><span class="line"> * will be fired.</span><br><span class="line"> *</span><br><span class="line"> * <span class="type">Calling</span> this <span class="keyword">method</span> more than once <span class="keyword">for</span> the same component <span class="keyword">type</span> will <span class="keyword">not</span></span><br><span class="line"> * cause redundant hit checks.</span><br><span class="line"> *</span><br><span class="line"> * <span class="type">If</span> you want more fine-grained control consider <span class="keyword">using</span> `.hit()` <span class="keyword">or</span> even `<span class="type">Crafty</span>.map.search()`.</span><br><span class="line"> *</span><br><span class="line"> * @note <span class="type">Hit</span> checks are performed upon entering each new frame (<span class="keyword">using</span></span><br><span class="line"> * the *<span class="type">EnterFrame</span>* event). <span class="type">It</span> <span class="keyword">is</span> entirely possible <span class="keyword">for</span> <span class="keyword">object</span> to move <span class="keyword">in</span></span><br><span class="line"> * said frame after the checks were performed (even <span class="keyword">if</span> the more <span class="keyword">is</span> the</span><br><span class="line"> * <span class="literal">result</span> <span class="keyword">of</span> *<span class="type">EnterFrame</span>*, <span class="keyword">as</span> handlers run <span class="keyword">in</span> no particular order). <span class="type">In</span> such</span><br><span class="line"> * a <span class="keyword">case</span>, the hit events will <span class="keyword">not</span> fire until the next check <span class="keyword">is</span> performed <span class="keyword">in</span></span><br><span class="line"> * the following frame.</span><br><span class="line"> *</span><br><span class="line"> * @example</span><br><span class="line"> *</span><br></pre></td></tr></table></figure>

     * Crafty.e(&quot;2D, Collision&quot;)
     *     .checkHits(&apos;Solid&apos;) // check for collisions with entities that have the Solid component in each frame
     *     .bind(&quot;HitOn&quot;, function(hitData) {
     *         Crafty.log(&quot;Collision with Solid entity occurred for the first time.&quot;);
     *     })
     *     .bind(&quot;HitOff&quot;, function(comp) {
     *         Crafty.log(&quot;Collision with Solid entity ended.&quot;);
     *     });
     * <figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"> *</span><br><span class="line"> * @see .hit</span><br><span class="line"> */</span><br><span class="line">checkHits: function () {</span><br><span class="line">    <span class="keyword">var</span> components = arguments;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (components.length === <span class="number">1</span>) {</span><br><span class="line">        components = components[<span class="number">0</span>].split(/\s*,\s*/);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (; i &lt; components.length; ++i) {</span><br><span class="line">        <span class="keyword">var</span> component = components[i];</span><br><span class="line">        <span class="keyword">var</span> collisionData = this._collisionData[component];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (collisionData !== undefined) {</span><br><span class="line">            // <span class="type">There</span> <span class="keyword">is</span> already a handler <span class="keyword">for</span> collision <span class="keyword">with</span> this component</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        this._collisionData[component] = collisionData = { occurring: <span class="literal">false</span>, handler: null };</span><br><span class="line">        collisionData.handler = this._createCollisionHandler(component, collisionData);</span><br><span class="line"></span><br><span class="line">        this.<span class="keyword">bind</span>(<span class="string">&quot;EnterFrame&quot;</span>, collisionData.handler);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> this;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">/**@</span><br><span class="line"> * <span class="comment">#.ignoreHits</span></span><br><span class="line"> * @comp <span class="type">Collision</span></span><br><span class="line"> *</span><br><span class="line"> * @sign public this .ignoreHits()</span><br><span class="line"> *</span><br><span class="line"> * @sign public this .ignoreHits(<span class="type">String</span> componentList)</span><br><span class="line"> * @param componentList - A comma separated list <span class="keyword">of</span> components to stop checking</span><br><span class="line"> * <span class="keyword">for</span> collisions <span class="keyword">with</span>.</span><br><span class="line"> *</span><br><span class="line"> * @sign public this .ignoreHits(<span class="type">String</span> component1[, .., <span class="type">String</span> componentN])</span><br><span class="line"> * @param component<span class="comment"># - A component to stop checking for collisions with.</span></span><br><span class="line"> *</span><br><span class="line"> * <span class="type">Stops</span> checking <span class="keyword">for</span> collisions <span class="keyword">with</span> all, <span class="keyword">or</span> certain, components. <span class="type">If</span> called</span><br><span class="line"> * <span class="keyword">without</span> arguments, this <span class="keyword">method</span> will cause all collision checks on the</span><br><span class="line"> * entity to cease. <span class="type">To</span> disable checks <span class="keyword">for</span> collisions <span class="keyword">with</span> specific</span><br><span class="line"> * components, specify the components <span class="keyword">as</span> a comma separated <span class="type">string</span> <span class="keyword">or</span> <span class="keyword">as</span></span><br><span class="line"> * a <span class="type">set</span> <span class="keyword">of</span> arguments.</span><br><span class="line"> *</span><br><span class="line"> * <span class="type">Calling</span> this <span class="keyword">method</span> <span class="keyword">with</span> component names <span class="keyword">for</span> which there are no collision</span><br><span class="line"> * checks has no effect.</span><br><span class="line"> *</span><br><span class="line"> * @example</span><br><span class="line"> *</span><br></pre></td></tr></table></figure>

     * Crafty.e(&quot;2D, Collision&quot;)
     *     .checkHits(&apos;Solid&apos;)
     *     ...
     *     .ignoreHits(&apos;Solid&apos;); // stop checking for collisions with entities that have the Solid component
     * <figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"> */</span><br><span class="line">ignoreHits: function () {</span><br><span class="line">    <span class="keyword">var</span> components = arguments;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> collisionData;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (components.length === <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">for</span> (collisionData <span class="keyword">in</span> this._collisionData) {</span><br><span class="line">            this.unbind(<span class="string">&quot;EnterFrame&quot;</span>, collisionData.handler);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        this._collisionData = {};</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (components.length === <span class="number">1</span>) {</span><br><span class="line">        components = components[<span class="number">0</span>].split(/\s*,\s*/);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (; i &lt; components.length; ++i) {</span><br><span class="line">        <span class="keyword">var</span> component = components[i];</span><br><span class="line">        collisionData = this._collisionData[component];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (collisionData === undefined) {</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        this.unbind(<span class="string">&quot;EnterFrame&quot;</span>, collisionData.handler);</span><br><span class="line">        delete this._collisionData[component];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> this;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">/**@</span><br><span class="line"> * <span class="comment">#.resetHitChecks</span></span><br><span class="line"> * @comp <span class="type">Collision</span></span><br><span class="line"> * @sign public this .resetHitChecks()</span><br><span class="line"> * @sign public this .resetHitChecks(<span class="type">String</span> componentList)</span><br><span class="line"> * @param componentList - A comma seperated list <span class="keyword">of</span> components to re-check</span><br><span class="line"> * <span class="keyword">for</span> collisions <span class="keyword">with</span>.</span><br><span class="line"> * @sign public this .resetHitChecks(<span class="type">String</span> component1[, .., <span class="type">String</span> componentN])</span><br><span class="line"> * @param component<span class="comment"># - A component to re-check for collisions with.</span></span><br><span class="line"> *</span><br><span class="line"> * <span class="type">Causes</span> collision events to be received <span class="keyword">for</span> collisions that are already</span><br><span class="line"> * taking place (normally, an additional event would <span class="keyword">not</span> fire before said</span><br><span class="line"> * collisions cease <span class="keyword">and</span> happen another time).</span><br><span class="line"> * <span class="type">If</span> called <span class="keyword">without</span> arguments, this <span class="keyword">method</span> will cause all collision checks on the</span><br><span class="line"> * entity to fire events once more. <span class="type">To</span> re-check <span class="keyword">for</span> collisions <span class="keyword">with</span> specific</span><br><span class="line"> * components, specify the components <span class="keyword">as</span> a comma separated <span class="type">string</span> <span class="keyword">or</span> <span class="keyword">as</span></span><br><span class="line"> * a <span class="type">set</span> <span class="keyword">of</span> arguments.</span><br><span class="line"> *</span><br><span class="line"> * <span class="type">Calling</span> this <span class="keyword">method</span> <span class="keyword">with</span> component names <span class="keyword">for</span> which there are no collision</span><br><span class="line"> * checks has no effect.</span><br><span class="line"> *</span><br><span class="line"> * @example</span><br><span class="line"> *</span><br></pre></td></tr></table></figure>

     * // this example fires the HitOn event each frame the collision with the Solid entity is active, instead of just the first time the collision occurs.
     * Crafty.e(&quot;2D, Collision&quot;)
     *     .checkHits(&apos;Solid&apos;)
     *     .bind(&quot;HitOn&quot;, function(hitData) {
     *         Crafty.log(&quot;Collision with Solid entity was reported in this frame again!&quot;);
     *         this.resetHitChecks(&apos;Solid&apos;); // fire the HitOn event in the next frame also, if the collision is still active.
     *     })
     * <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br><span class="line">1308</span><br><span class="line">1309</span><br><span class="line">1310</span><br><span class="line">1311</span><br><span class="line">1312</span><br><span class="line">1313</span><br><span class="line">1314</span><br><span class="line">1315</span><br><span class="line">1316</span><br><span class="line">1317</span><br><span class="line">1318</span><br><span class="line">1319</span><br><span class="line">1320</span><br><span class="line">1321</span><br><span class="line">1322</span><br><span class="line">1323</span><br><span class="line">1324</span><br><span class="line">1325</span><br><span class="line">1326</span><br><span class="line">1327</span><br><span class="line">1328</span><br><span class="line">1329</span><br><span class="line">1330</span><br><span class="line">1331</span><br><span class="line">1332</span><br><span class="line">1333</span><br><span class="line">1334</span><br><span class="line">1335</span><br><span class="line">1336</span><br><span class="line">1337</span><br><span class="line">1338</span><br><span class="line">1339</span><br><span class="line">1340</span><br><span class="line">1341</span><br><span class="line">1342</span><br><span class="line">1343</span><br><span class="line">1344</span><br><span class="line">1345</span><br><span class="line">1346</span><br><span class="line">1347</span><br><span class="line">1348</span><br><span class="line">1349</span><br><span class="line">1350</span><br><span class="line">1351</span><br><span class="line">1352</span><br><span class="line">1353</span><br><span class="line">1354</span><br><span class="line">1355</span><br><span class="line">1356</span><br><span class="line">1357</span><br><span class="line">1358</span><br><span class="line">1359</span><br><span class="line">1360</span><br><span class="line">1361</span><br><span class="line">1362</span><br><span class="line">1363</span><br><span class="line">1364</span><br><span class="line">1365</span><br><span class="line">1366</span><br><span class="line">1367</span><br><span class="line">1368</span><br><span class="line">1369</span><br><span class="line">1370</span><br><span class="line">1371</span><br><span class="line">1372</span><br><span class="line">1373</span><br><span class="line">1374</span><br><span class="line">1375</span><br><span class="line">1376</span><br><span class="line">1377</span><br><span class="line">1378</span><br><span class="line">1379</span><br><span class="line">1380</span><br><span class="line">1381</span><br><span class="line">1382</span><br><span class="line">1383</span><br><span class="line">1384</span><br><span class="line">1385</span><br><span class="line">1386</span><br><span class="line">1387</span><br><span class="line">1388</span><br><span class="line">1389</span><br><span class="line">1390</span><br><span class="line">1391</span><br><span class="line">1392</span><br><span class="line">1393</span><br><span class="line">1394</span><br><span class="line">1395</span><br><span class="line">1396</span><br><span class="line">1397</span><br><span class="line">1398</span><br><span class="line">1399</span><br><span class="line">1400</span><br><span class="line">1401</span><br><span class="line">1402</span><br><span class="line">1403</span><br><span class="line">1404</span><br><span class="line">1405</span><br><span class="line">1406</span><br><span class="line">1407</span><br><span class="line">1408</span><br><span class="line">1409</span><br><span class="line">1410</span><br><span class="line">1411</span><br><span class="line">1412</span><br><span class="line">1413</span><br><span class="line">1414</span><br><span class="line">1415</span><br><span class="line">1416</span><br><span class="line">1417</span><br><span class="line">1418</span><br><span class="line">1419</span><br><span class="line">1420</span><br><span class="line">1421</span><br><span class="line">1422</span><br><span class="line">1423</span><br><span class="line">1424</span><br><span class="line">1425</span><br><span class="line">1426</span><br><span class="line">1427</span><br><span class="line">1428</span><br><span class="line">1429</span><br><span class="line">1430</span><br><span class="line">1431</span><br><span class="line">1432</span><br><span class="line">1433</span><br><span class="line">1434</span><br><span class="line">1435</span><br><span class="line">1436</span><br><span class="line">1437</span><br><span class="line">1438</span><br><span class="line">1439</span><br><span class="line">1440</span><br><span class="line">1441</span><br><span class="line">1442</span><br><span class="line">1443</span><br><span class="line">1444</span><br><span class="line">1445</span><br><span class="line">1446</span><br><span class="line">1447</span><br><span class="line">1448</span><br><span class="line">1449</span><br><span class="line">1450</span><br><span class="line">1451</span><br><span class="line">1452</span><br><span class="line">1453</span><br><span class="line">1454</span><br><span class="line">1455</span><br><span class="line">1456</span><br><span class="line">1457</span><br></pre></td><td class="code"><pre><span class="line">     */</span><br><span class="line">    resetHitChecks: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">var</span> components = arguments;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> collisionData;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (components.length === <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">for</span> (collisionData in this._collisionData) {</span><br><span class="line">                this._collisionData[collisionData].occurring = <span class="keyword">false</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (components.length === <span class="number">1</span>) {</span><br><span class="line">            components = components[<span class="number">0</span>].split(/\s*,\s*/);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (; i &lt; components.length; ++i) {</span><br><span class="line">            <span class="keyword">var</span> component = components[i];</span><br><span class="line">            collisionData = this._collisionData[component];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (collisionData === undefined) {</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            collisionData.occurring = <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> this;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    _SAT: <span class="function"><span class="keyword">function</span> <span class="params">(poly1, poly2)</span> </span>{</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>,</span><br><span class="line">            points1 = poly1.points, points2 = poly2.points,</span><br><span class="line">            l = points1.length/<span class="number">2</span>,</span><br><span class="line">            j, k = points2.length/<span class="number">2</span>,</span><br><span class="line">            nx=<span class="number">0</span>, ny=<span class="number">0</span>,</span><br><span class="line">            length,</span><br><span class="line">            min1, min2,</span><br><span class="line">            max1, max2,</span><br><span class="line">            interval,</span><br><span class="line">            MTV = -Infinity,</span><br><span class="line">            MNx = <span class="keyword">null</span>,</span><br><span class="line">            MNy = <span class="keyword">null</span>,</span><br><span class="line">            dot,</span><br><span class="line">            np;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//loop through the edges of Polygon 1</span></span><br><span class="line">        <span class="keyword">for</span> (; i &lt; l; i++) {</span><br><span class="line">            np = (i == l - <span class="number">1</span> ? <span class="number">0</span> : i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//generate the normal for the current edge</span></span><br><span class="line">            nx = -(points1[<span class="number">2</span>*i+<span class="number">1</span>] - points1[<span class="number">2</span>*np+<span class="number">1</span>]);</span><br><span class="line">            ny = (points1[<span class="number">2</span>*i] - points1[<span class="number">2</span>*np]);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//normalize the vector</span></span><br><span class="line">            length = Math.sqrt(nx * nx + ny * ny);</span><br><span class="line">            nx /= length;</span><br><span class="line">            ny /= length;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//default min max</span></span><br><span class="line">            min1 = min2 = Infinity;</span><br><span class="line">            max1 = max2 = -Infinity;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//project all vertices from poly1 onto axis</span></span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; l; ++j) {</span><br><span class="line">                dot = points1[<span class="number">2</span>*j] * nx + points1[<span class="number">2</span>*j+<span class="number">1</span>] * ny;</span><br><span class="line">                <span class="keyword">if</span> (dot &gt; max1) max1 = dot;</span><br><span class="line">                <span class="keyword">if</span> (dot &lt; min1) min1 = dot;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">//project all vertices from poly2 onto axis</span></span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; k; ++j) {</span><br><span class="line">                dot = points2[<span class="number">2</span>*j] * nx + points2[<span class="number">2</span>*j+<span class="number">1</span>] * ny;</span><br><span class="line">                <span class="keyword">if</span> (dot &gt; max2) max2 = dot;</span><br><span class="line">                <span class="keyword">if</span> (dot &lt; min2 ) min2 = dot;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">//calculate the minimum translation vector should be negative</span></span><br><span class="line">            <span class="keyword">if</span> (min1 &lt; min2) {</span><br><span class="line">                interval = min2 - max1;</span><br><span class="line">                nx = -nx;</span><br><span class="line">                ny = -ny;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                interval = min1 - max2;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">//exit early if positive</span></span><br><span class="line">            <span class="keyword">if</span> (interval &gt;= <span class="number">0</span>) {</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (interval &gt; MTV) {</span><br><span class="line">                MTV = interval;</span><br><span class="line">                MNx = nx;</span><br><span class="line">                MNy = ny;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//loop through the edges of Polygon 2</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; k; i++) {</span><br><span class="line">            np = (i == k - <span class="number">1</span> ? <span class="number">0</span> : i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//generate the normal for the current edge</span></span><br><span class="line">            nx = -(points2[<span class="number">2</span>*i+<span class="number">1</span>] - points2[<span class="number">2</span>*np+<span class="number">1</span>]);</span><br><span class="line">            ny = (points2[<span class="number">2</span>*i] - points2[<span class="number">2</span>*np]);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//normalize the vector</span></span><br><span class="line">            length = Math.sqrt(nx * nx + ny * ny);</span><br><span class="line">            nx /= length;</span><br><span class="line">            ny /= length;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//default min max</span></span><br><span class="line">            min1 = min2 = Infinity;</span><br><span class="line">            max1 = max2 = -Infinity;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//project all vertices from poly1 onto axis</span></span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; l; ++j) {</span><br><span class="line">                dot = points1[<span class="number">2</span>*j] * nx + points1[<span class="number">2</span>*j+<span class="number">1</span>] * ny;</span><br><span class="line">                <span class="keyword">if</span> (dot &gt; max1) max1 = dot;</span><br><span class="line">                <span class="keyword">if</span> (dot &lt; min1) min1 = dot;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">//project all vertices from poly2 onto axis</span></span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; k; ++j) {</span><br><span class="line">                dot = points2[<span class="number">2</span>*j] * nx + points2[<span class="number">2</span>*j+<span class="number">1</span>] * ny;</span><br><span class="line">                <span class="keyword">if</span> (dot &gt; max2) max2 = dot;</span><br><span class="line">                <span class="keyword">if</span> (dot &lt; min2) min2 = dot;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">//calculate the minimum translation vector should be negative</span></span><br><span class="line">            <span class="keyword">if</span> (min1 &lt; min2) {</span><br><span class="line">                interval = min2 - max1;</span><br><span class="line">                nx = -nx;</span><br><span class="line">                ny = -ny;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                interval = min1 - max2;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">//exit early if positive</span></span><br><span class="line">            <span class="keyword">if</span> (interval &gt;= <span class="number">0</span>) {</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (interval &gt; MTV) {</span><br><span class="line">                MTV = interval;</span><br><span class="line">                MNx = nx;</span><br><span class="line">                MNy = ny;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            overlap: MTV,</span><br><span class="line">            normal: {</span><br><span class="line">                x: MNx,</span><br><span class="line">                y: MNy</span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">},{<span class="string">&quot;../core/core.js&quot;</span>:<span class="number">7</span>}],<span class="number">41</span>:[<span class="function"><span class="keyword">function</span><span class="params">(require,module,exports)</span></span>{</span><br><span class="line"><span class="keyword">var</span> Crafty = <span class="keyword">require</span>(<span class="string">&apos;../core/core.js&apos;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Crafty.math</span><br><span class="line"> * <span class="doctag">@category</span> Utilities</span><br><span class="line"> *</span><br><span class="line"> * A set of utility functions for common (and not so common) operations.</span><br><span class="line"> */</span></span><br><span class="line">Crafty.math = {</span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #Crafty.math.abs</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math</span><br><span class="line">     * <span class="doctag">@sign</span> public this Crafty.math.abs(Number n)</span><br><span class="line">     * <span class="doctag">@param</span> n - Some value.</span><br><span class="line">     * <span class="doctag">@return</span> Absolute value.</span><br><span class="line">     *</span><br><span class="line">     * Returns the absolute value.</span><br><span class="line">     */</span></span><br><span class="line">    abs: <span class="function"><span class="keyword">function</span> <span class="params">(x)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> x &lt; <span class="number">0</span> ? -x : x;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #Crafty.math.amountOf</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math</span><br><span class="line">     * <span class="doctag">@sign</span> public Number Crafty.math.amountOf(Number checkValue, Number minValue, Number maxValue)</span><br><span class="line">     * <span class="doctag">@param</span> checkValue - Value that should checked with minimum and maximum.</span><br><span class="line">     * <span class="doctag">@param</span> minValue - Bottom of the range</span><br><span class="line">     * <span class="doctag">@param</span> maxValue - Top of the range</span><br><span class="line">     * <span class="doctag">@return</span> The position of the checked value in a coordinate system normalized such that `minValue` is 0 and `maxValue` is 1.</span><br><span class="line">     *</span><br><span class="line">     * If checkValue is within the range, this will return a number between 0 and 1.</span><br><span class="line">     */</span></span><br><span class="line">    amountOf: <span class="function"><span class="keyword">function</span> <span class="params">(checkValue, minValue, maxValue)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (minValue &lt; maxValue)</span><br><span class="line">            <span class="keyword">return</span> (checkValue - minValue) / (maxValue - minValue);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> (checkValue - maxValue) / (minValue - maxValue);</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #Crafty.math.clamp</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math</span><br><span class="line">     * <span class="doctag">@sign</span> public Number Crafty.math.clamp(Number value, Number min, Number max)</span><br><span class="line">     * <span class="doctag">@param</span> value - A value.</span><br><span class="line">     * <span class="doctag">@param</span> max - Maximum that value can be.</span><br><span class="line">     * <span class="doctag">@param</span> min - Minimum that value can be.</span><br><span class="line">     * <span class="doctag">@return</span> The value between minimum and maximum.</span><br><span class="line">     *</span><br><span class="line">     * Restricts a value to be within a specified range.</span><br><span class="line">     */</span></span><br><span class="line">    clamp: <span class="function"><span class="keyword">function</span> <span class="params">(value, min, max)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (value &gt; max)</span><br><span class="line">            <span class="keyword">return</span> max;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (value &lt; min)</span><br><span class="line">            <span class="keyword">return</span> min;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #Crafty.math.degToRad</span><br><span class="line">     * Converts angle from degree to radian.</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math</span><br><span class="line">     * <span class="doctag">@sign</span> public Number degToRad(angleInDeg)</span><br><span class="line">     * <span class="doctag">@param</span> angleInDeg - The angle in degrees.</span><br><span class="line">     * <span class="doctag">@return</span> The angle in radians.</span><br><span class="line">     */</span></span><br><span class="line">    degToRad: <span class="function"><span class="keyword">function</span> <span class="params">(angleInDeg)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> angleInDeg * Math.PI / <span class="number">180</span>;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #Crafty.math.distance</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math</span><br><span class="line">     * <span class="doctag">@sign</span> public Number Crafty.math.distance(Number x1, Number y1, Number x2, Number y2)</span><br><span class="line">     * <span class="doctag">@param</span> x1 - First x coordinate.</span><br><span class="line">     * <span class="doctag">@param</span> y1 - First y coordinate.</span><br><span class="line">     * <span class="doctag">@param</span> x2 - Second x coordinate.</span><br><span class="line">     * <span class="doctag">@param</span> y2 - Second y coordinate.</span><br><span class="line">     * <span class="doctag">@return</span> The distance between the two points.</span><br><span class="line">     *</span><br><span class="line">     * Distance between two points.</span><br><span class="line">     */</span></span><br><span class="line">    distance: <span class="function"><span class="keyword">function</span> <span class="params">(x1, y1, x2, y2)</span> </span>{</span><br><span class="line">        <span class="keyword">var</span> squaredDistance = Crafty.math.squaredDistance(x1, y1, x2, y2);</span><br><span class="line">        <span class="keyword">return</span> Math.sqrt(parseFloat(squaredDistance));</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #Crafty.math.lerp</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math</span><br><span class="line">     * <span class="doctag">@sign</span> public Number Crafty.math.lerp(Number value1, Number value2, Number amount)</span><br><span class="line">     * <span class="doctag">@param</span> value1 - One value.</span><br><span class="line">     * <span class="doctag">@param</span> value2 - Another value.</span><br><span class="line">     * <span class="doctag">@param</span> amount - Amount of value2 to value1.</span><br><span class="line">     * <span class="doctag">@return</span> Linear interpolated value.</span><br><span class="line">     *</span><br><span class="line">     * Linear interpolation. Passing amount with a value of 0 will cause value1 to be returned,</span><br><span class="line">     * a value of 1 will cause value2 to be returned.</span><br><span class="line">     */</span></span><br><span class="line">    lerp: <span class="function"><span class="keyword">function</span> <span class="params">(value1, value2, amount)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> value1 + (value2 - value1) * amount;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #Crafty.math.negate</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math</span><br><span class="line">     * <span class="doctag">@sign</span> public Number Crafty.math.negate(Number percent)</span><br><span class="line">     * <span class="doctag">@param</span> percent - The probability of returning `-1`</span><br><span class="line">     * <span class="doctag">@return</span> 1 or -1.</span><br><span class="line">     *</span><br><span class="line">     * Returns `1` or `-1` randomly.</span><br><span class="line">     */</span></span><br><span class="line">    negate: <span class="function"><span class="keyword">function</span> <span class="params">(percent)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (Math.random() &lt; percent)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #Crafty.math.radToDeg</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math</span><br><span class="line">     * <span class="doctag">@sign</span> public Number Crafty.math.radToDeg(Number angle)</span><br><span class="line">     * <span class="doctag">@param</span> angleInRad - The angle in radian.</span><br><span class="line">     * <span class="doctag">@return</span> The angle in degree.</span><br><span class="line">     *</span><br><span class="line">     * Converts angle from radian to degree.</span><br><span class="line">     */</span></span><br><span class="line">    radToDeg: <span class="function"><span class="keyword">function</span> <span class="params">(angleInRad)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> angleInRad * <span class="number">180</span> / Math.PI;</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #Crafty.math.randomElementOfArray</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math</span><br><span class="line">     * <span class="doctag">@sign</span> public Object Crafty.math.randomElementOfArray(Array array)</span><br><span class="line">     * <span class="doctag">@param</span> array - A specific array.</span><br><span class="line">     * <span class="doctag">@return</span> A random element of a specific array.</span><br><span class="line">     *</span><br><span class="line">     * Returns a random element of a specific array.</span><br><span class="line">     */</span></span><br><span class="line">    randomElementOfArray: <span class="function"><span class="keyword">function</span> <span class="params">(array)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>[Math.floor(<span class="keyword">array</span>.length * Math.random())];</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #Crafty.math.randomInt</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math</span><br><span class="line">     * <span class="doctag">@sign</span> public Number Crafty.math.randomInt(Number start, Number end)</span><br><span class="line">     * <span class="doctag">@param</span> start - Smallest int value that can be returned.</span><br><span class="line">     * <span class="doctag">@param</span> end - Biggest int value that can be returned.</span><br><span class="line">     * <span class="doctag">@return</span> A random int.</span><br><span class="line">     *</span><br><span class="line">     * Returns a random int within a specific range.</span><br><span class="line">     */</span></span><br><span class="line">    randomInt: <span class="function"><span class="keyword">function</span> <span class="params">(start, end)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> start + Math.floor((<span class="number">1</span> + end - start) * Math.random());</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #Crafty.math.randomNumber</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math</span><br><span class="line">     * <span class="doctag">@sign</span> public Number Crafty.math.randomInt(Number start, Number end)</span><br><span class="line">     * <span class="doctag">@param</span> start - Smallest number value that can be returned.</span><br><span class="line">     * <span class="doctag">@param</span> end - Biggest number value that can be returned.</span><br><span class="line">     * <span class="doctag">@return</span> A random number.</span><br><span class="line">     *</span><br><span class="line">     * Returns a random number in within a specific range.</span><br><span class="line">     */</span></span><br><span class="line">    randomNumber: <span class="function"><span class="keyword">function</span> <span class="params">(start, end)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> start + (end - start) * Math.random();</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #Crafty.math.squaredDistance</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math</span><br><span class="line">     * <span class="doctag">@sign</span> public Number Crafty.math.squaredDistance(Number x1, Number y1, Number x2, Number y2)</span><br><span class="line">     * <span class="doctag">@param</span> x1 - First x coordinate.</span><br><span class="line">     * <span class="doctag">@param</span> y1 - First y coordinate.</span><br><span class="line">     * <span class="doctag">@param</span> x2 - Second x coordinate.</span><br><span class="line">     * <span class="doctag">@param</span> y2 - Second y coordinate.</span><br><span class="line">     * <span class="doctag">@return</span> The squared distance between the two points.</span><br><span class="line">     *</span><br><span class="line">     * Squared distance between two points.</span><br><span class="line">     */</span></span><br><span class="line">    squaredDistance: <span class="function"><span class="keyword">function</span> <span class="params">(x1, y1, x2, y2)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #Crafty.math.withinRange</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math</span><br><span class="line">     * <span class="doctag">@sign</span> public Boolean Crafty.math.withinRange(Number value, Number min, Number max)</span><br><span class="line">     * <span class="doctag">@param</span> value - The specific value.</span><br><span class="line">     * <span class="doctag">@param</span> min - Minimum value.</span><br><span class="line">     * <span class="doctag">@param</span> max - Maximum value.</span><br><span class="line">     * <span class="doctag">@return</span> Returns true if value is within a specific range.</span><br><span class="line">     *</span><br><span class="line">     * Check if a value is within a specific range.</span><br><span class="line">     */</span></span><br><span class="line">    withinRange: <span class="function"><span class="keyword">function</span> <span class="params">(value, min, max)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> (value &gt;= min &amp;&amp; value &lt;= max);</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">Crafty.math.Vector2D = (<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #Crafty.math.Vector2D</span><br><span class="line">     * <span class="doctag">@category</span> 2D</span><br><span class="line">     * <span class="doctag">@class</span> This is a general purpose 2D vector class</span><br><span class="line">     *</span><br><span class="line">     * Vector2D uses the following form:</span><br><span class="line">     * &lt;x, y&gt;</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@public</span></span><br><span class="line">     * <span class="doctag">@sign</span> public {Vector2D} Vector2D();</span><br><span class="line">     * <span class="doctag">@sign</span> public {Vector2D} Vector2D(Vector2D);</span><br><span class="line">     * <span class="doctag">@sign</span> public {Vector2D} Vector2D(Number, Number);</span><br><span class="line">     * <span class="doctag">@param</span> {Vector2D|Number=0} x</span><br><span class="line">     * <span class="doctag">@param</span> {Number=0} y</span><br><span class="line">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Vector2D</span><span class="params">(x, y)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (x <span class="keyword">instanceof</span> Vector2D) {</span><br><span class="line">            this.x = x.x;</span><br><span class="line">            this.y = x.y;</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (arguments.length === <span class="number">2</span>) {</span><br><span class="line">            this.x = x;</span><br><span class="line">            this.y = y;</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (arguments.length &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="string">&quot;Unexpected number of arguments for Vector2D()&quot;</span>;</span><br><span class="line">    } <span class="comment">// class Vector2D</span></span><br><span class="line"></span><br><span class="line">    Vector2D.prototype.x = <span class="number">0</span>;</span><br><span class="line">    Vector2D.prototype.y = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.add</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math.Vector2D</span><br><span class="line">     *</span><br><span class="line">     * Adds the passed vector to this vector</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@public</span></span><br><span class="line">     * <span class="doctag">@sign</span> public {Vector2D} add(Vector2D);</span><br><span class="line">     * <span class="doctag">@param</span> {vector2D} vecRH</span><br><span class="line">     * <span class="doctag">@returns</span> {Vector2D} this after adding</span><br><span class="line">     */</span></span><br><span class="line">    Vector2D.prototype.add = <span class="function"><span class="keyword">function</span> <span class="params">(vecRH)</span> </span>{</span><br><span class="line">        this.x += vecRH.x;</span><br><span class="line">        this.y += vecRH.y;</span><br><span class="line">        <span class="keyword">return</span> this;</span><br><span class="line">    }; <span class="comment">// add</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.angleBetween</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math.Vector2D</span><br><span class="line">     *</span><br><span class="line">     * Calculates the angle between the passed vector and this vector, using &lt;0,0&gt; as the point of reference.</span><br><span class="line">     * Angles returned have the range (&#x2212;&#x3C0;, &#x3C0;].</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@public</span></span><br><span class="line">     * <span class="doctag">@sign</span> public {Number} angleBetween(Vector2D);</span><br><span class="line">     * <span class="doctag">@param</span> {Vector2D} vecRH</span><br><span class="line">     * <span class="doctag">@returns</span> {Number} the angle between the two vectors in radians</span><br><span class="line">     */</span></span><br><span class="line">    Vector2D.prototype.angleBetween = <span class="function"><span class="keyword">function</span> <span class="params">(vecRH)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> Math.atan2(this.x * vecRH.y - this.y * vecRH.x, this.x * vecRH.x + this.y * vecRH.y);</span><br><span class="line">    }; <span class="comment">// angleBetween</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.angleTo</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math.Vector2D</span><br><span class="line">     *</span><br><span class="line">     * Calculates the angle to the passed vector from this vector, using this vector as the point of reference.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@public</span></span><br><span class="line">     * <span class="doctag">@sign</span> public {Number} angleTo(Vector2D);</span><br><span class="line">     * <span class="doctag">@param</span> {Vector2D} vecRH</span><br><span class="line">     * <span class="doctag">@returns</span> {Number} the angle to the passed vector in radians</span><br><span class="line">     */</span></span><br><span class="line">    Vector2D.prototype.angleTo = <span class="function"><span class="keyword">function</span> <span class="params">(vecRH)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> Math.atan2(vecRH.y - this.y, vecRH.x - this.x);</span><br><span class="line">    };</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.clone</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math.Vector2D</span><br><span class="line">     *</span><br><span class="line">     * Creates and exact, numeric copy of this vector</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@public</span></span><br><span class="line">     * <span class="doctag">@sign</span> public {Vector2D} clone();</span><br><span class="line">     * <span class="doctag">@returns</span> {Vector2D} the new vector</span><br><span class="line">     */</span></span><br><span class="line">    Vector2D.prototype.<span class="keyword">clone</span> = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Vector2D(this);</span><br><span class="line">    }; <span class="comment">// clone</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.distance</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math.Vector2D</span><br><span class="line">     *</span><br><span class="line">     * Calculates the distance from this vector to the passed vector.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@public</span></span><br><span class="line">     * <span class="doctag">@sign</span> public {Number} distance(Vector2D);</span><br><span class="line">     * <span class="doctag">@param</span> {Vector2D} vecRH</span><br><span class="line">     * <span class="doctag">@returns</span> {Number} the distance between the two vectors</span><br><span class="line">     */</span></span><br><span class="line">    Vector2D.prototype.distance = <span class="function"><span class="keyword">function</span> <span class="params">(vecRH)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> Math.sqrt((vecRH.x - this.x) * (vecRH.x - this.x) + (vecRH.y - this.y) * (vecRH.y - this.y));</span><br><span class="line">    }; <span class="comment">// distance</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.distanceSq</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math.Vector2D</span><br><span class="line">     *</span><br><span class="line">     * Calculates the squared distance from this vector to the passed vector.</span><br><span class="line">     * This function avoids calculating the square root, thus being slightly faster than .distance( ).</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@public</span></span><br><span class="line">     * <span class="doctag">@sign</span> public {Number} distanceSq(Vector2D);</span><br><span class="line">     * <span class="doctag">@param</span> {Vector2D} vecRH</span><br><span class="line">     * <span class="doctag">@returns</span> {Number} the squared distance between the two vectors</span><br><span class="line">     * <span class="doctag">@see</span> .distance</span><br><span class="line">     */</span></span><br><span class="line">    Vector2D.prototype.distanceSq = <span class="function"><span class="keyword">function</span> <span class="params">(vecRH)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> (vecRH.x - this.x) * (vecRH.x - this.x) + (vecRH.y - this.y) * (vecRH.y - this.y);</span><br><span class="line">    }; <span class="comment">// distanceSq</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.divide</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math.Vector2D</span><br><span class="line">     *</span><br><span class="line">     * Divides this vector by the passed vector.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@public</span></span><br><span class="line">     * <span class="doctag">@sign</span> public {Vector2D} divide(Vector2D);</span><br><span class="line">     * <span class="doctag">@param</span> {Vector2D} vecRH</span><br><span class="line">     * <span class="doctag">@returns</span> {Vector2D} this vector after dividing</span><br><span class="line">     */</span></span><br><span class="line">    Vector2D.prototype.divide = <span class="function"><span class="keyword">function</span> <span class="params">(vecRH)</span> </span>{</span><br><span class="line">        this.x /= vecRH.x;</span><br><span class="line">        this.y /= vecRH.y;</span><br><span class="line">        <span class="keyword">return</span> this;</span><br><span class="line">    }; <span class="comment">// divide</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.dotProduct</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math.Vector2D</span><br><span class="line">     *</span><br><span class="line">     * Calculates the dot product of this and the passed vectors</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@public</span></span><br><span class="line">     * <span class="doctag">@sign</span> public {Number} dotProduct(Vector2D);</span><br><span class="line">     * <span class="doctag">@param</span> {Vector2D} vecRH</span><br><span class="line">     * <span class="doctag">@returns</span> {Number} the resultant dot product</span><br><span class="line">     */</span></span><br><span class="line">    Vector2D.prototype.dotProduct = <span class="function"><span class="keyword">function</span> <span class="params">(vecRH)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> this.x * vecRH.x + this.y * vecRH.y;</span><br><span class="line">    }; <span class="comment">// dotProduct</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.crossProduct</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math.Vector2D</span><br><span class="line">     *</span><br><span class="line">     * Calculates the z component of the cross product of the two vectors augmented to 3D.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@public</span></span><br><span class="line">     * <span class="doctag">@sign</span> public {Number} crossProduct(Vector2D);</span><br><span class="line">     * <span class="doctag">@param</span> {Vector2D} vecRH</span><br><span class="line">     * <span class="doctag">@returns</span> {Number} the resultant cross product</span><br><span class="line">     */</span></span><br><span class="line">    Vector2D.prototype.crossProduct = <span class="function"><span class="keyword">function</span> <span class="params">(vecRH)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> this.x * vecRH.y - this.y * vecRH.x;</span><br><span class="line">    }; <span class="comment">// crossProduct</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.equals</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math.Vector2D</span><br><span class="line">     *</span><br><span class="line">     * Determines if this vector is numerically equivalent to the passed vector.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@public</span></span><br><span class="line">     * <span class="doctag">@sign</span> public {Boolean} equals(Vector2D);</span><br><span class="line">     * <span class="doctag">@param</span> {Vector2D} vecRH</span><br><span class="line">     * <span class="doctag">@returns</span> {Boolean} true if the vectors are equivalent</span><br><span class="line">     */</span></span><br><span class="line">    Vector2D.prototype.equals = <span class="function"><span class="keyword">function</span> <span class="params">(vecRH)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> vecRH <span class="keyword">instanceof</span> Vector2D &amp;&amp;</span><br><span class="line">            this.x == vecRH.x &amp;&amp; this.y == vecRH.y;</span><br><span class="line">    }; <span class="comment">// equals</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.perpendicular</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math.Vector2D</span><br><span class="line">     *</span><br><span class="line">     * Calculates a new vector that is perpendicular to this vector.</span><br><span class="line">     * The perpendicular vector has the same magnitude as this vector and is obtained by a counter-clockwise rotation of 90&#xB0; of this vector.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@public</span></span><br><span class="line">     * <span class="doctag">@sign</span> public {Vector2D} perpendicular([Vector2D]);</span><br><span class="line">     * <span class="doctag">@param</span> {Vector2D} [result] - An optional parameter to save the result in</span><br><span class="line">     * <span class="doctag">@returns</span> {Vector2D} the perpendicular vector</span><br><span class="line">     */</span></span><br><span class="line">    Vector2D.prototype.perpendicular = <span class="function"><span class="keyword">function</span> <span class="params">(result)</span> </span>{</span><br><span class="line">        result = result || <span class="keyword">new</span> Vector2D();</span><br><span class="line">        <span class="keyword">return</span> result.setValues(-this.y, this.x);</span><br><span class="line">    }; <span class="comment">// perpendicular</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.getNormal</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math.Vector2D</span><br><span class="line">     *</span><br><span class="line">     * Calculates a new right-handed unit vector that is perpendicular to the line created by this and the passed vector.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@public</span></span><br><span class="line">     * <span class="doctag">@sign</span> public {Vector2D} getNormal(Vector2D[, Vector2D]);</span><br><span class="line">     * <span class="doctag">@param</span> {Vector2D} vecRH</span><br><span class="line">     * <span class="doctag">@param</span> {Vector2D} [result] - An optional parameter to save the result in</span><br><span class="line">     * <span class="doctag">@returns</span> {Vector2D} the new normal vector</span><br><span class="line">     */</span></span><br><span class="line">    Vector2D.prototype.getNormal = <span class="function"><span class="keyword">function</span> <span class="params">(vecRH, result)</span> </span>{</span><br><span class="line">        result = result || <span class="keyword">new</span> Vector2D();</span><br><span class="line">        <span class="keyword">return</span> result.setValues(vecRH.y - this.y, this.x - vecRH.x).normalize();</span><br><span class="line">    }; <span class="comment">// getNormal</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.isZero</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math.Vector2D</span><br><span class="line">     *</span><br><span class="line">     * Determines if this vector is equal to &lt;0,0&gt;</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@public</span></span><br><span class="line">     * <span class="doctag">@sign</span> public {Boolean} isZero();</span><br><span class="line">     * <span class="doctag">@returns</span> {Boolean} true if this vector is equal to &lt;0,0&gt;</span><br><span class="line">     */</span></span><br><span class="line">    Vector2D.prototype.isZero = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> this.x === <span class="number">0</span> &amp;&amp; this.y === <span class="number">0</span>;</span><br><span class="line">    }; <span class="comment">// isZero</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.magnitude</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math.Vector2D</span><br><span class="line">     *</span><br><span class="line">     * Calculates the magnitude of this vector.</span><br><span class="line">     * <span class="doctag">Note:</span> Function objects in JavaScript already have a &apos;length&apos; member, hence the use of magnitude instead.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@public</span></span><br><span class="line">     * <span class="doctag">@sign</span> public {Number} magnitude();</span><br><span class="line">     * <span class="doctag">@returns</span> {Number} the magnitude of this vector</span><br><span class="line">     */</span></span><br><span class="line">    Vector2D.prototype.magnitude = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> Math.sqrt(this.x * this.x + this.y * this.y);</span><br><span class="line">    }; <span class="comment">// magnitude</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.magnitudeSq</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math.Vector2D</span><br><span class="line">     *</span><br><span class="line">     * Calculates the square of the magnitude of this vector.</span><br><span class="line">     * This function avoids calculating the square root, thus being slightly faster than .magnitude( ).</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@public</span></span><br><span class="line">     * <span class="doctag">@sign</span> public {Number} magnitudeSq();</span><br><span class="line">     * <span class="doctag">@returns</span> {Number} the square of the magnitude of this vector</span><br><span class="line">     * <span class="doctag">@see</span> .magnitude</span><br><span class="line">     */</span></span><br><span class="line">    Vector2D.prototype.magnitudeSq = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> this.x * this.x + this.y * this.y;</span><br><span class="line">    }; <span class="comment">// magnitudeSq</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.multiply</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math.Vector2D</span><br><span class="line">     *</span><br><span class="line">     * Multiplies this vector by the passed vector</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@public</span></span><br><span class="line">     * <span class="doctag">@sign</span> public {Vector2D} multiply(Vector2D);</span><br><span class="line">     * <span class="doctag">@param</span> {Vector2D} vecRH</span><br><span class="line">     * <span class="doctag">@returns</span> {Vector2D} this vector after multiplying</span><br><span class="line">     */</span></span><br><span class="line">    Vector2D.prototype.multiply = <span class="function"><span class="keyword">function</span> <span class="params">(vecRH)</span> </span>{</span><br><span class="line">        this.x *= vecRH.x;</span><br><span class="line">        this.y *= vecRH.y;</span><br><span class="line">        <span class="keyword">return</span> this;</span><br><span class="line">    }; <span class="comment">// multiply</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.negate</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math.Vector2D</span><br><span class="line">     *</span><br><span class="line">     * Negates this vector (ie. &lt;-x,-y&gt;)</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@public</span></span><br><span class="line">     * <span class="doctag">@sign</span> public {Vector2D} negate();</span><br><span class="line">     * <span class="doctag">@returns</span> {Vector2D} this vector after negation</span><br><span class="line">     */</span></span><br><span class="line">    Vector2D.prototype.negate = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        this.x = -this.x;</span><br><span class="line">        this.y = -this.y;</span><br><span class="line">        <span class="keyword">return</span> this;</span><br><span class="line">    }; <span class="comment">// negate</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.normalize</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math.Vector2D</span><br><span class="line">     *</span><br><span class="line">     * Normalizes this vector (scales the vector so that its new magnitude is 1)</span><br><span class="line">     * For vectors where magnitude is 0, &lt;1,0&gt; is returned.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@public</span></span><br><span class="line">     * <span class="doctag">@sign</span> public {Vector2D} normalize();</span><br><span class="line">     * <span class="doctag">@returns</span> {Vector2D} this vector after normalization</span><br><span class="line">     */</span></span><br><span class="line">    Vector2D.prototype.normalize = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">var</span> lng = Math.sqrt(this.x * this.x + this.y * this.y);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (lng === <span class="number">0</span>) {</span><br><span class="line">            <span class="comment">// default due East</span></span><br><span class="line">            this.x = <span class="number">1</span>;</span><br><span class="line">            this.y = <span class="number">0</span>;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            this.x /= lng;</span><br><span class="line">            this.y /= lng;</span><br><span class="line">        } <span class="comment">// else</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> this;</span><br><span class="line">    }; <span class="comment">// normalize</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.scale</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math.Vector2D</span><br><span class="line">     *</span><br><span class="line">     * Scales this vector by the passed amount(s)</span><br><span class="line">     * If scalarY is omitted, scalarX is used for both axes</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@public</span></span><br><span class="line">     * <span class="doctag">@sign</span> public {Vector2D} scale(Number[, Number]);</span><br><span class="line">     * <span class="doctag">@param</span> {Number} scalarX</span><br><span class="line">     * <span class="doctag">@param</span> {Number} [scalarY]</span><br><span class="line">     * <span class="doctag">@returns</span> {Vector2D} this after scaling</span><br><span class="line">     */</span></span><br><span class="line">    Vector2D.prototype.scale = <span class="function"><span class="keyword">function</span> <span class="params">(scalarX, scalarY)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (scalarY === undefined)</span><br><span class="line">            scalarY = scalarX;</span><br><span class="line"></span><br><span class="line">        this.x *= scalarX;</span><br><span class="line">        this.y *= scalarY;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> this;</span><br><span class="line">    }; <span class="comment">// scale</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.scaleToMagnitude</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math.Vector2D</span><br><span class="line">     *</span><br><span class="line">     * Scales this vector such that its new magnitude is equal to the passed value.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@public</span></span><br><span class="line">     * <span class="doctag">@sign</span> public {Vector2D} scaleToMagnitude(Number);</span><br><span class="line">     * <span class="doctag">@param</span> {Number} mag</span><br><span class="line">     * <span class="doctag">@returns</span> {Vector2D} this vector after scaling</span><br><span class="line">     */</span></span><br><span class="line">    Vector2D.prototype.scaleToMagnitude = <span class="function"><span class="keyword">function</span> <span class="params">(mag)</span> </span>{</span><br><span class="line">        <span class="keyword">var</span> k = mag / this.magnitude();</span><br><span class="line">        this.x *= k;</span><br><span class="line">        this.y *= k;</span><br><span class="line">        <span class="keyword">return</span> this;</span><br><span class="line">    }; <span class="comment">// scaleToMagnitude</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.setValues</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math.Vector2D</span><br><span class="line">     *</span><br><span class="line">     * Sets the values of this vector using a passed vector or pair of numbers.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@public</span></span><br><span class="line">     * <span class="doctag">@sign</span> public {Vector2D} setValues(Vector2D);</span><br><span class="line">     * <span class="doctag">@sign</span> public {Vector2D} setValues(Number, Number);</span><br><span class="line">     * <span class="doctag">@param</span> {Number|Vector2D} x</span><br><span class="line">     * <span class="doctag">@param</span> {Number} y</span><br><span class="line">     * <span class="doctag">@returns</span> {Vector2D} this vector after setting of values</span><br><span class="line">     */</span></span><br><span class="line">    Vector2D.prototype.setValues = <span class="function"><span class="keyword">function</span> <span class="params">(x, y)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (x <span class="keyword">instanceof</span> Vector2D) {</span><br><span class="line">            this.x = x.x;</span><br><span class="line">            this.y = x.y;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            this.x = x;</span><br><span class="line">            this.y = y;</span><br><span class="line">        } <span class="comment">// else</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> this;</span><br><span class="line">    }; <span class="comment">// setValues</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.subtract</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math.Vector2D</span><br><span class="line">     *</span><br><span class="line">     * Subtracts the passed vector from this vector.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@public</span></span><br><span class="line">     * <span class="doctag">@sign</span> public {Vector2D} subtract(Vector2D);</span><br><span class="line">     * <span class="doctag">@param</span> {Vector2D} vecRH</span><br><span class="line">     * <span class="doctag">@returns</span> {vector2D} this vector after subtracting</span><br><span class="line">     */</span></span><br><span class="line">    Vector2D.prototype.subtract = <span class="function"><span class="keyword">function</span> <span class="params">(vecRH)</span> </span>{</span><br><span class="line">        this.x -= vecRH.x;</span><br><span class="line">        this.y -= vecRH.y;</span><br><span class="line">        <span class="keyword">return</span> this;</span><br><span class="line">    }; <span class="comment">// subtract</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.toString</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math.Vector2D</span><br><span class="line">     *</span><br><span class="line">     * Returns a string representation of this vector.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@public</span></span><br><span class="line">     * <span class="doctag">@sign</span> public {String} toString();</span><br><span class="line">     * <span class="doctag">@returns</span> {String}</span><br><span class="line">     */</span></span><br><span class="line">    Vector2D.prototype.toString = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Vector2D(&quot;</span> + this.x + <span class="string">&quot;, &quot;</span> + this.y + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    }; <span class="comment">// toString</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.translate</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math.Vector2D</span><br><span class="line">     *</span><br><span class="line">     * Translates (moves) this vector by the passed amounts.</span><br><span class="line">     * If dy is omitted, dx is used for both axes.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@public</span></span><br><span class="line">     * <span class="doctag">@sign</span> public {Vector2D} translate(Number[, Number]);</span><br><span class="line">     * <span class="doctag">@param</span> {Number} dx</span><br><span class="line">     * <span class="doctag">@param</span> {Number} [dy]</span><br><span class="line">     * <span class="doctag">@returns</span> {Vector2D} this vector after translating</span><br><span class="line">     */</span></span><br><span class="line">    Vector2D.prototype.translate = <span class="function"><span class="keyword">function</span> <span class="params">(dx, dy)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (dy === undefined)</span><br><span class="line">            dy = dx;</span><br><span class="line"></span><br><span class="line">        this.x += dx;</span><br><span class="line">        this.y += dy;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> this;</span><br><span class="line">    }; <span class="comment">// translate</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.tripleProduct</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math.Vector2D</span><br><span class="line">     *</span><br><span class="line">     * Calculates the triple product of three vectors.</span><br><span class="line">     * triple vector product = b(a&#x2022;c) - a(b&#x2022;c)</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@public</span></span><br><span class="line">     * <span class="doctag">@static</span></span><br><span class="line">     * <span class="doctag">@sign</span> public {Vector2D} tripleProduct(Vector2D, Vector2D, Vector2D, [Vector2D]);</span><br><span class="line">     * <span class="doctag">@param</span> {Vector2D} a</span><br><span class="line">     * <span class="doctag">@param</span> {Vector2D} b</span><br><span class="line">     * <span class="doctag">@param</span> {Vector2D} c</span><br><span class="line">     * <span class="doctag">@param</span> {Vector2D} [result] - An optional parameter to save the result in</span><br><span class="line">     * <span class="doctag">@return</span> {Vector2D} the triple product as a new vector</span><br><span class="line">     */</span></span><br><span class="line">    Vector2D.tripleProduct = <span class="function"><span class="keyword">function</span> <span class="params">(a, b, c, result)</span> </span>{</span><br><span class="line">        result = result || <span class="keyword">new</span> Crafty.math.Vector2D();</span><br><span class="line">        <span class="keyword">var</span> ac = a.dotProduct(c);</span><br><span class="line">        <span class="keyword">var</span> bc = b.dotProduct(c);</span><br><span class="line">        <span class="keyword">return</span> result.setValues(b.x * ac - a.x * bc, b.y * ac - a.y * bc);</span><br><span class="line">    };</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Vector2D;</span><br><span class="line">})();</span><br><span class="line"></span><br><span class="line">Crafty.math.Matrix2D = (<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #Crafty.math.Matrix2D</span><br><span class="line">     * <span class="doctag">@category</span> 2D</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@class</span> This is a 2D Matrix2D class. It is 3x3 to allow for affine transformations in 2D space.</span><br><span class="line">     * The third row is always assumed to be [0, 0, 1].</span><br><span class="line">     *</span><br><span class="line">     * Matrix2D uses the following form, as per the whatwg.org specifications for canvas.transform():</span><br><span class="line">     * [a, c, e]</span><br><span class="line">     * [b, d, f]</span><br><span class="line">     * [0, 0, 1]</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@public</span></span><br><span class="line">     * <span class="doctag">@sign</span> public {Matrix2D} new Matrix2D();</span><br><span class="line">     * <span class="doctag">@sign</span> public {Matrix2D} new Matrix2D(Matrix2D);</span><br><span class="line">     * <span class="doctag">@sign</span> public {Matrix2D} new Matrix2D(Number, Number, Number, Number, Number, Number);</span><br><span class="line">     * <span class="doctag">@param</span> {Matrix2D|Number=1} a</span><br><span class="line">     * <span class="doctag">@param</span> {Number=0} b</span><br><span class="line">     * <span class="doctag">@param</span> {Number=0} c</span><br><span class="line">     * <span class="doctag">@param</span> {Number=1} d</span><br><span class="line">     * <span class="doctag">@param</span> {Number=0} e</span><br><span class="line">     * <span class="doctag">@param</span> {Number=0} f</span><br><span class="line">     */</span></span><br><span class="line">    Matrix2D = <span class="function"><span class="keyword">function</span> <span class="params">(a, b, c, d, e, f)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Matrix2D) {</span><br><span class="line">            this.a = a.a;</span><br><span class="line">            this.b = a.b;</span><br><span class="line">            this.c = a.c;</span><br><span class="line">            this.d = a.d;</span><br><span class="line">            this.e = a.e;</span><br><span class="line">            this.f = a.f;</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (arguments.length === <span class="number">6</span>) {</span><br><span class="line">            this.a = a;</span><br><span class="line">            this.b = b;</span><br><span class="line">            this.c = c;</span><br><span class="line">            this.d = d;</span><br><span class="line">            this.e = e;</span><br><span class="line">            this.f = f;</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (arguments.length &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="string">&quot;Unexpected number of arguments for Matrix2D()&quot;</span>;</span><br><span class="line">    }; <span class="comment">// class Matrix2D</span></span><br><span class="line"></span><br><span class="line">    Matrix2D.prototype.a = <span class="number">1</span>;</span><br><span class="line">    Matrix2D.prototype.b = <span class="number">0</span>;</span><br><span class="line">    Matrix2D.prototype.c = <span class="number">0</span>;</span><br><span class="line">    Matrix2D.prototype.d = <span class="number">1</span>;</span><br><span class="line">    Matrix2D.prototype.e = <span class="number">0</span>;</span><br><span class="line">    Matrix2D.prototype.f = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.apply</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math.Matrix2D</span><br><span class="line">     *</span><br><span class="line">     * Applies the matrix transformations to the passed object</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@public</span></span><br><span class="line">     * <span class="doctag">@sign</span> public {Vector2D} apply(Vector2D);</span><br><span class="line">     * <span class="doctag">@param</span> {Vector2D} vecRH - vector to be transformed</span><br><span class="line">     * <span class="doctag">@returns</span> {Vector2D} the passed vector object after transforming</span><br><span class="line">     */</span></span><br><span class="line">    Matrix2D.prototype.apply = <span class="function"><span class="keyword">function</span> <span class="params">(vecRH)</span> </span>{</span><br><span class="line">        <span class="comment">// I&apos;m not sure of the best way for this function to be implemented. Ideally</span></span><br><span class="line">        <span class="comment">// support for other objects (rectangles, polygons, etc) should be easily</span></span><br><span class="line">        <span class="comment">// addable in the future. Maybe a function (apply) is not the best way to do</span></span><br><span class="line">        <span class="comment">// this...?</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> tmpX = vecRH.x;</span><br><span class="line">        vecRH.x = tmpX * this.a + vecRH.y * this.c + this.e;</span><br><span class="line">        vecRH.y = tmpX * this.b + vecRH.y * this.d + this.f;</span><br><span class="line">        <span class="comment">// no need to homogenize since the third row is always [0, 0, 1]</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> vecRH;</span><br><span class="line">    }; <span class="comment">// apply</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.clone</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math.Matrix2D</span><br><span class="line">     *</span><br><span class="line">     * Creates an exact, numeric copy of the current matrix</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@public</span></span><br><span class="line">     * <span class="doctag">@sign</span> public {Matrix2D} clone();</span><br><span class="line">     * <span class="doctag">@returns</span> {Matrix2D}</span><br><span class="line">     */</span></span><br><span class="line">    Matrix2D.prototype.<span class="keyword">clone</span> = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Matrix2D(this);</span><br><span class="line">    }; <span class="comment">// clone</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.combine</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math.Matrix2D</span><br><span class="line">     *</span><br><span class="line">     * Multiplies this matrix with another, overriding the values of this matrix.</span><br><span class="line">     * The passed matrix is assumed to be on the right-hand side.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@public</span></span><br><span class="line">     * <span class="doctag">@sign</span> public {Matrix2D} combine(Matrix2D);</span><br><span class="line">     * <span class="doctag">@param</span> {Matrix2D} mtrxRH</span><br><span class="line">     * <span class="doctag">@returns</span> {Matrix2D} this matrix after combination</span><br><span class="line">     */</span></span><br><span class="line">    Matrix2D.prototype.combine = <span class="function"><span class="keyword">function</span> <span class="params">(mtrxRH)</span> </span>{</span><br><span class="line">        <span class="keyword">var</span> tmp = this.a;</span><br><span class="line">        this.a = tmp * mtrxRH.a + this.b * mtrxRH.c;</span><br><span class="line">        this.b = tmp * mtrxRH.b + this.b * mtrxRH.d;</span><br><span class="line">        tmp = this.c;</span><br><span class="line">        this.c = tmp * mtrxRH.a + this.d * mtrxRH.c;</span><br><span class="line">        this.d = tmp * mtrxRH.b + this.d * mtrxRH.d;</span><br><span class="line">        tmp = this.e;</span><br><span class="line">        this.e = tmp * mtrxRH.a + this.f * mtrxRH.c + mtrxRH.e;</span><br><span class="line">        this.f = tmp * mtrxRH.b + this.f * mtrxRH.d + mtrxRH.f;</span><br><span class="line">        <span class="keyword">return</span> this;</span><br><span class="line">    }; <span class="comment">// combine</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.equals</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math.Matrix2D</span><br><span class="line">     *</span><br><span class="line">     * Checks for the numeric equality of this matrix versus another.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@public</span></span><br><span class="line">     * <span class="doctag">@sign</span> public {Boolean} equals(Matrix2D);</span><br><span class="line">     * <span class="doctag">@param</span> {Matrix2D} mtrxRH</span><br><span class="line">     * <span class="doctag">@returns</span> {Boolean} true if the two matrices are numerically equal</span><br><span class="line">     */</span></span><br><span class="line">    Matrix2D.prototype.equals = <span class="function"><span class="keyword">function</span> <span class="params">(mtrxRH)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> mtrxRH <span class="keyword">instanceof</span> Matrix2D &amp;&amp;</span><br><span class="line">            this.a == mtrxRH.a &amp;&amp; this.b == mtrxRH.b &amp;&amp; this.c == mtrxRH.c &amp;&amp;</span><br><span class="line">            this.d == mtrxRH.d &amp;&amp; this.e == mtrxRH.e &amp;&amp; this.f == mtrxRH.f;</span><br><span class="line">    }; <span class="comment">// equals</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.determinant</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math.Matrix2D</span><br><span class="line">     *</span><br><span class="line">     * Calculates the determinant of this matrix</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@public</span></span><br><span class="line">     * <span class="doctag">@sign</span> public {Number} determinant();</span><br><span class="line">     * <span class="doctag">@returns</span> {Number} det(this matrix)</span><br><span class="line">     */</span></span><br><span class="line">    Matrix2D.prototype.determinant = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> this.a * this.d - this.b * this.c;</span><br><span class="line">    }; <span class="comment">// determinant</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.invert</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math.Matrix2D</span><br><span class="line">     *</span><br><span class="line">     * Inverts this matrix if possible</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@public</span></span><br><span class="line">     * <span class="doctag">@sign</span> public {Matrix2D} invert();</span><br><span class="line">     * <span class="doctag">@returns</span> {Matrix2D} this inverted matrix or the original matrix on failure</span><br><span class="line">     * <span class="doctag">@see</span> .isInvertible</span><br><span class="line">     */</span></span><br><span class="line">    Matrix2D.prototype.invert = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">var</span> det = this.determinant();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// matrix is invertible if its determinant is non-zero</span></span><br><span class="line">        <span class="keyword">if</span> (det !== <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">var</span> old = {</span><br><span class="line">                a: this.a,</span><br><span class="line">                b: this.b,</span><br><span class="line">                c: this.c,</span><br><span class="line">                d: this.d,</span><br><span class="line">                e: this.e,</span><br><span class="line">                f: this.f</span><br><span class="line">            };</span><br><span class="line">            this.a = old.d / det;</span><br><span class="line">            this.b = -old.b / det;</span><br><span class="line">            this.c = -old.c / det;</span><br><span class="line">            this.d = old.a / det;</span><br><span class="line">            this.e = (old.c * old.f - old.e * old.d) / det;</span><br><span class="line">            this.f = (old.e * old.b - old.a * old.f) / det;</span><br><span class="line">        } <span class="comment">// if</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> this;</span><br><span class="line">    }; <span class="comment">// invert</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.isIdentity</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math.Matrix2D</span><br><span class="line">     *</span><br><span class="line">     * Returns true if this matrix is the identity matrix</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@public</span></span><br><span class="line">     * <span class="doctag">@sign</span> public {Boolean} isIdentity();</span><br><span class="line">     * <span class="doctag">@returns</span> {Boolean}</span><br><span class="line">     */</span></span><br><span class="line">    Matrix2D.prototype.isIdentity = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> this.a === <span class="number">1</span> &amp;&amp; this.b === <span class="number">0</span> &amp;&amp; this.c === <span class="number">0</span> &amp;&amp; this.d === <span class="number">1</span> &amp;&amp; this.e === <span class="number">0</span> &amp;&amp; this.f === <span class="number">0</span>;</span><br><span class="line">    }; <span class="comment">// isIdentity</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.isInvertible</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math.Matrix2D</span><br><span class="line">     *</span><br><span class="line">     * Determines is this matrix is invertible.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@public</span></span><br><span class="line">     * <span class="doctag">@sign</span> public {Boolean} isInvertible();</span><br><span class="line">     * <span class="doctag">@returns</span> {Boolean} true if this matrix is invertible</span><br><span class="line">     * <span class="doctag">@see</span> .invert</span><br><span class="line">     */</span></span><br><span class="line">    Matrix2D.prototype.isInvertible = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> this.determinant() !== <span class="number">0</span>;</span><br><span class="line">    }; <span class="comment">// isInvertible</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.preRotate</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math.Matrix2D</span><br><span class="line">     *</span><br><span class="line">     * Applies a counter-clockwise pre-rotation to this matrix</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@public</span></span><br><span class="line">     * <span class="doctag">@sign</span> public {Matrix2D} preRotate(Number);</span><br><span class="line">     * <span class="doctag">@param</span> {number} rads - angle to rotate in radians</span><br><span class="line">     * <span class="doctag">@returns</span> {Matrix2D} this matrix after pre-rotation</span><br><span class="line">     */</span></span><br><span class="line">    Matrix2D.prototype.preRotate = <span class="function"><span class="keyword">function</span> <span class="params">(rads)</span> </span>{</span><br><span class="line">        <span class="keyword">var</span> nCos = Math.cos(rads);</span><br><span class="line">        <span class="keyword">var</span> nSin = Math.sin(rads);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> tmp = this.a;</span><br><span class="line">        this.a = nCos * tmp - nSin * this.b;</span><br><span class="line">        this.b = nSin * tmp + nCos * this.b;</span><br><span class="line">        tmp = this.c;</span><br><span class="line">        this.c = nCos * tmp - nSin * this.d;</span><br><span class="line">        this.d = nSin * tmp + nCos * this.d;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> this;</span><br><span class="line">    }; <span class="comment">// preRotate</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.preScale</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math.Matrix2D</span><br><span class="line">     *</span><br><span class="line">     * Applies a pre-scaling to this matrix</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@public</span></span><br><span class="line">     * <span class="doctag">@sign</span> public {Matrix2D} preScale(Number[, Number]);</span><br><span class="line">     * <span class="doctag">@param</span> {Number} scalarX</span><br><span class="line">     * <span class="doctag">@param</span> {Number} [scalarY] scalarX is used if scalarY is undefined</span><br><span class="line">     * <span class="doctag">@returns</span> {Matrix2D} this after pre-scaling</span><br><span class="line">     */</span></span><br><span class="line">    Matrix2D.prototype.preScale = <span class="function"><span class="keyword">function</span> <span class="params">(scalarX, scalarY)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (scalarY === undefined)</span><br><span class="line">            scalarY = scalarX;</span><br><span class="line"></span><br><span class="line">        this.a *= scalarX;</span><br><span class="line">        this.b *= scalarY;</span><br><span class="line">        this.c *= scalarX;</span><br><span class="line">        this.d *= scalarY;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> this;</span><br><span class="line">    }; <span class="comment">// preScale</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.preTranslate</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math.Matrix2D</span><br><span class="line">     *</span><br><span class="line">     * Applies a pre-translation to this matrix</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@public</span></span><br><span class="line">     * <span class="doctag">@sign</span> public {Matrix2D} preTranslate(Vector2D);</span><br><span class="line">     * <span class="doctag">@sign</span> public {Matrix2D} preTranslate(Number, Number);</span><br><span class="line">     * <span class="doctag">@param</span> {Number|Vector2D} dx</span><br><span class="line">     * <span class="doctag">@param</span> {Number} dy</span><br><span class="line">     * <span class="doctag">@returns</span> {Matrix2D} this matrix after pre-translation</span><br><span class="line">     */</span></span><br><span class="line">    Matrix2D.prototype.preTranslate = <span class="function"><span class="keyword">function</span> <span class="params">(dx, dy)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (typeof dx === <span class="string">&quot;number&quot;</span>) {</span><br><span class="line">            this.e += dx;</span><br><span class="line">            this.f += dy;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            this.e += dx.x;</span><br><span class="line">            this.f += dx.y;</span><br><span class="line">        } <span class="comment">// else</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> this;</span><br><span class="line">    }; <span class="comment">// preTranslate</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.rotate</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math.Matrix2D</span><br><span class="line">     *</span><br><span class="line">     * Applies a counter-clockwise post-rotation to this matrix</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@public</span></span><br><span class="line">     * <span class="doctag">@sign</span> public {Matrix2D} rotate(Number);</span><br><span class="line">     * <span class="doctag">@param</span> {Number} rads - angle to rotate in radians</span><br><span class="line">     * <span class="doctag">@returns</span> {Matrix2D} this matrix after rotation</span><br><span class="line">     */</span></span><br><span class="line">    Matrix2D.prototype.rotate = <span class="function"><span class="keyword">function</span> <span class="params">(rads)</span> </span>{</span><br><span class="line">        <span class="keyword">var</span> nCos = Math.cos(rads);</span><br><span class="line">        <span class="keyword">var</span> nSin = Math.sin(rads);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> tmp = this.a;</span><br><span class="line">        this.a = nCos * tmp - nSin * this.b;</span><br><span class="line">        this.b = nSin * tmp + nCos * this.b;</span><br><span class="line">        tmp = this.c;</span><br><span class="line">        this.c = nCos * tmp - nSin * this.d;</span><br><span class="line">        this.d = nSin * tmp + nCos * this.d;</span><br><span class="line">        tmp = this.e;</span><br><span class="line">        this.e = nCos * tmp - nSin * this.f;</span><br><span class="line">        this.f = nSin * tmp + nCos * this.f;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> this;</span><br><span class="line">    }; <span class="comment">// rotate</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.scale</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math.Matrix2D</span><br><span class="line">     *</span><br><span class="line">     * Applies a post-scaling to this matrix</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@public</span></span><br><span class="line">     * <span class="doctag">@sign</span> public {Matrix2D} scale(Number[, Number]);</span><br><span class="line">     * <span class="doctag">@param</span> {Number} scalarX</span><br><span class="line">     * <span class="doctag">@param</span> {Number} [scalarY] scalarX is used if scalarY is undefined</span><br><span class="line">     * <span class="doctag">@returns</span> {Matrix2D} this after post-scaling</span><br><span class="line">     */</span></span><br><span class="line">    Matrix2D.prototype.scale = <span class="function"><span class="keyword">function</span> <span class="params">(scalarX, scalarY)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (scalarY === undefined)</span><br><span class="line">            scalarY = scalarX;</span><br><span class="line"></span><br><span class="line">        this.a *= scalarX;</span><br><span class="line">        this.b *= scalarY;</span><br><span class="line">        this.c *= scalarX;</span><br><span class="line">        this.d *= scalarY;</span><br><span class="line">        this.e *= scalarX;</span><br><span class="line">        this.f *= scalarY;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> this;</span><br><span class="line">    }; <span class="comment">// scale</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.setValues</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math.Matrix2D</span><br><span class="line">     *</span><br><span class="line">     * Sets the values of this matrix</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@public</span></span><br><span class="line">     * <span class="doctag">@sign</span> public {Matrix2D} setValues(Matrix2D);</span><br><span class="line">     * <span class="doctag">@sign</span> public {Matrix2D} setValues(Number, Number, Number, Number, Number, Number);</span><br><span class="line">     * <span class="doctag">@param</span> {Matrix2D|Number} a</span><br><span class="line">     * <span class="doctag">@param</span> {Number} b</span><br><span class="line">     * <span class="doctag">@param</span> {Number} c</span><br><span class="line">     * <span class="doctag">@param</span> {Number} d</span><br><span class="line">     * <span class="doctag">@param</span> {Number} e</span><br><span class="line">     * <span class="doctag">@param</span> {Number} f</span><br><span class="line">     * <span class="doctag">@returns</span> {Matrix2D} this matrix containing the new values</span><br><span class="line">     */</span></span><br><span class="line">    Matrix2D.prototype.setValues = <span class="function"><span class="keyword">function</span> <span class="params">(a, b, c, d, e, f)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Matrix2D) {</span><br><span class="line">            this.a = a.a;</span><br><span class="line">            this.b = a.b;</span><br><span class="line">            this.c = a.c;</span><br><span class="line">            this.d = a.d;</span><br><span class="line">            this.e = a.e;</span><br><span class="line">            this.f = a.f;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            this.a = a;</span><br><span class="line">            this.b = b;</span><br><span class="line">            this.c = c;</span><br><span class="line">            this.d = d;</span><br><span class="line">            this.e = e;</span><br><span class="line">            this.f = f;</span><br><span class="line">        } <span class="comment">// else</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> this;</span><br><span class="line">    }; <span class="comment">// setValues</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.toString</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math.Matrix2D</span><br><span class="line">     *</span><br><span class="line">     * Returns the string representation of this matrix.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@public</span></span><br><span class="line">     * <span class="doctag">@sign</span> public {String} toString();</span><br><span class="line">     * <span class="doctag">@returns</span> {String}</span><br><span class="line">     */</span></span><br><span class="line">    Matrix2D.prototype.toString = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Matrix2D([&quot;</span> + this.a + <span class="string">&quot;, &quot;</span> + this.c + <span class="string">&quot;, &quot;</span> + this.e +</span><br><span class="line">            <span class="string">&quot;] [&quot;</span> + this.b + <span class="string">&quot;, &quot;</span> + this.d + <span class="string">&quot;, &quot;</span> + this.f + <span class="string">&quot;] [0, 0, 1])&quot;</span>;</span><br><span class="line">    }; <span class="comment">// toString</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #.translate</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.math.Matrix2D</span><br><span class="line">     *</span><br><span class="line">     * Applies a post-translation to this matrix</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@public</span></span><br><span class="line">     * <span class="doctag">@sign</span> public {Matrix2D} translate(Vector2D);</span><br><span class="line">     * <span class="doctag">@sign</span> public {Matrix2D} translate(Number, Number);</span><br><span class="line">     * <span class="doctag">@param</span> {Number|Vector2D} dx</span><br><span class="line">     * <span class="doctag">@param</span> {Number} dy</span><br><span class="line">     * <span class="doctag">@returns</span> {Matrix2D} this matrix after post-translation</span><br><span class="line">     */</span></span><br><span class="line">    Matrix2D.prototype.translate = <span class="function"><span class="keyword">function</span> <span class="params">(dx, dy)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (typeof dx === <span class="string">&quot;number&quot;</span>) {</span><br><span class="line">            this.e += this.a * dx + this.c * dy;</span><br><span class="line">            this.f += this.b * dx + this.d * dy;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            this.e += this.a * dx.x + this.c * dx.y;</span><br><span class="line">            this.f += this.b * dx.x + this.d * dx.y;</span><br><span class="line">        } <span class="comment">// else</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> this;</span><br><span class="line">    }; <span class="comment">// translate</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Matrix2D;</span><br><span class="line">})();</span><br><span class="line">},{<span class="string">&quot;../core/core.js&quot;</span>:<span class="number">7</span>}],<span class="number">42</span>:[<span class="function"><span class="keyword">function</span><span class="params">(require,module,exports)</span></span>{</span><br><span class="line"><span class="keyword">var</span> Crafty = <span class="keyword">require</span>(<span class="string">&apos;../core/core.js&apos;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Crafty.rectManager</span><br><span class="line"> * <span class="doctag">@category</span> 2D</span><br><span class="line"> *</span><br><span class="line"> * Collection of methods for handling rectangles</span><br><span class="line"> */</span></span><br><span class="line">Crafty.extend({</span><br><span class="line">    <span class="comment">/** recManager: an object for managing dirty rectangles. */</span></span><br><span class="line">   rectManager: {</span><br><span class="line">       <span class="comment">/** Finds smallest rectangles that overlaps a and b, merges them into target */</span></span><br><span class="line">       merge: <span class="function"><span class="keyword">function</span> <span class="params">(a, b, target)</span> </span>{</span><br><span class="line">           <span class="keyword">if</span> (typeof target === <span class="string">&apos;undefined&apos;</span>)</span><br><span class="line">               target = {};</span><br><span class="line">           <span class="comment">// Doing it in this order means we can use either a or b as the target, with no conflict</span></span><br><span class="line">           target._h = Math.max(a._y + a._h, b._y + b._h);</span><br><span class="line">           target._w = Math.max(a._x + a._w, b._x + b._w);</span><br><span class="line">           target._x = Math.min(a._x, b._x);</span><br><span class="line">           target._y = Math.min(a._y, b._y);</span><br><span class="line">           target._w -= target._x;</span><br><span class="line">           target._h -= target._y;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> target;</span><br><span class="line">       },</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**@</span><br><span class="line">       * #Crafty.rectManager.overlap</span><br><span class="line">       * <span class="doctag">@comp</span> Crafty.rectManager</span><br><span class="line">       * <span class="doctag">@sign</span> public Boolean Crafty.rectManager.overlap(Object rectA, Object rectA)</span><br><span class="line">       * <span class="doctag">@param</span> rectA - An object that must have the `_x, _y, _w, _h` values as properties</span><br><span class="line">       * <span class="doctag">@param</span> rectB - An object that must have the `_x, _y, _w, _h` values as properties</span><br><span class="line">       * <span class="doctag">@return</span> true if the rectangles overlap; false otherwise</span><br><span class="line">       *</span><br><span class="line">       * Checks whether two rectangles overlap.</span><br><span class="line">       */</span></span><br><span class="line">      overlap: <span class="function"><span class="keyword">function</span> <span class="params">(rectA, rectB)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> (rectA._x &lt; rectB._x + rectB._w &amp;&amp; rectA._x + rectA._w &gt; rectB._x &amp;&amp;</span><br><span class="line">                rectA._y &lt; rectB._y + rectB._h &amp;&amp; rectA._y + rectA._h &gt; rectB._y);</span><br><span class="line">      },</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**@</span><br><span class="line">      * #Crafty.rectManager.mergeSet</span><br><span class="line">      * <span class="doctag">@comp</span> Crafty.rectManager</span><br><span class="line">      * <span class="doctag">@sign</span> public Object Crafty.rectManager.mergeSet(Object set)</span><br><span class="line">      * <span class="doctag">@param</span> set - an array of rectangular regions</span><br><span class="line">      *</span><br><span class="line">      * Merge any consecutive, overlapping rects into each other.</span><br><span class="line">      * Its an optimization for the redraw regions.</span><br><span class="line">      *</span><br><span class="line">      * The order of set isn&apos;t strictly meaningful,</span><br><span class="line">      * but overlapping objects will often cause each other to change,</span><br><span class="line">      * and so might be consecutive.</span><br><span class="line">      */</span></span><br><span class="line">      mergeSet: <span class="function"><span class="keyword">function</span> <span class="params">(set)</span> </span>{</span><br><span class="line">          <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">while</span> (i &lt; set.length - <span class="number">1</span>) {</span><br><span class="line">              <span class="comment">// If current and next overlap, merge them together into the first, removing the second</span></span><br><span class="line">              <span class="comment">// Then skip the index backwards to compare the previous pair.</span></span><br><span class="line">              <span class="comment">// Otherwise skip forward</span></span><br><span class="line">              <span class="keyword">if</span> (this.overlap(set[i], set[i + <span class="number">1</span>])) {</span><br><span class="line">                  this.merge(set[i], set[i + <span class="number">1</span>], set[i]);</span><br><span class="line">                  set.splice(i + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">                  <span class="keyword">if</span> (i &gt; <span class="number">0</span>) {</span><br><span class="line">                    i--;</span><br><span class="line">                  }</span><br><span class="line">              } <span class="keyword">else</span> {</span><br><span class="line">                  i++;</span><br><span class="line">              }</span><br><span class="line">          }</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> set;</span><br><span class="line">      },</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**@</span><br><span class="line">       * #Crafty.rectManager.boundingRect</span><br><span class="line">       * <span class="doctag">@comp</span> Crafty.rectManager</span><br><span class="line">       * <span class="doctag">@sign</span> public Crafty.rectManager.boundingRect(set)</span><br><span class="line">       * <span class="doctag">@param</span> set - An array of rectangles</span><br><span class="line">       *</span><br><span class="line">       * - Calculate the common bounding rect of multiple canvas entities.</span><br><span class="line">       * - Returns coords</span><br><span class="line">       */</span></span><br><span class="line">      boundingRect: <span class="function"><span class="keyword">function</span> <span class="params">(set)</span> </span>{</span><br><span class="line">          <span class="keyword">if</span> (!set || !set.length) <span class="keyword">return</span>;</span><br><span class="line">          <span class="keyword">var</span> newset = [],</span><br><span class="line">              i = <span class="number">1</span>,</span><br><span class="line">              l = set.length,</span><br><span class="line">              current, master = set[<span class="number">0</span>],</span><br><span class="line">              tmp;</span><br><span class="line">          master = [master._x, master._y, master._x + master._w, master._y + master._h];</span><br><span class="line">          <span class="keyword">while</span> (i &lt; l) {</span><br><span class="line">              current = set[i];</span><br><span class="line">              tmp = [current._x, current._y, current._x + current._w, current._y + current._h];</span><br><span class="line">              <span class="keyword">if</span> (tmp[<span class="number">0</span>] &lt; master[<span class="number">0</span>]) master[<span class="number">0</span>] = tmp[<span class="number">0</span>];</span><br><span class="line">              <span class="keyword">if</span> (tmp[<span class="number">1</span>] &lt; master[<span class="number">1</span>]) master[<span class="number">1</span>] = tmp[<span class="number">1</span>];</span><br><span class="line">              <span class="keyword">if</span> (tmp[<span class="number">2</span>] &gt; master[<span class="number">2</span>]) master[<span class="number">2</span>] = tmp[<span class="number">2</span>];</span><br><span class="line">              <span class="keyword">if</span> (tmp[<span class="number">3</span>] &gt; master[<span class="number">3</span>]) master[<span class="number">3</span>] = tmp[<span class="number">3</span>];</span><br><span class="line">              i++;</span><br><span class="line">          }</span><br><span class="line">          tmp = master;</span><br><span class="line">          master = {</span><br><span class="line">              _x: tmp[<span class="number">0</span>],</span><br><span class="line">              _y: tmp[<span class="number">1</span>],</span><br><span class="line">              _w: tmp[<span class="number">2</span>] - tmp[<span class="number">0</span>],</span><br><span class="line">              _h: tmp[<span class="number">3</span>] - tmp[<span class="number">1</span>]</span><br><span class="line">          };</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> master;</span><br><span class="line">      },</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Crafty.rectManager._rectPool</span></span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">      <span class="comment">// This is a private object used internally by 2D methods</span></span><br><span class="line">      <span class="comment">// Cascade and _attr need to keep track of an entity&apos;s old position,</span></span><br><span class="line">      <span class="comment">// but we want to avoid creating temp objects every time an attribute is set.</span></span><br><span class="line">      <span class="comment">// The solution is to have a pool of objects that can be reused.</span></span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">      <span class="comment">// The current implementation makes a BIG ASSUMPTION:  that if multiple rectangles are requested,</span></span><br><span class="line">      <span class="comment">// the later one is recycled before any preceding ones.  This matches how they are used in the code.</span></span><br><span class="line">      <span class="comment">// Each rect is created by a triggered event, and will be recycled by the time the event is complete.</span></span><br><span class="line">      _pool: (<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</span><br><span class="line">          <span class="keyword">var</span> pool = [],</span><br><span class="line">              pointer = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">return</span> {</span><br><span class="line">              get: <span class="function"><span class="keyword">function</span> <span class="params">(x, y, w, h)</span> </span>{</span><br><span class="line">                  <span class="keyword">if</span> (pool.length &lt;= pointer)</span><br><span class="line">                      pool.push({});</span><br><span class="line">                  <span class="keyword">var</span> r = pool[pointer++];</span><br><span class="line">                  r._x = x;</span><br><span class="line">                  r._y = y;</span><br><span class="line">                  r._w = w;</span><br><span class="line">                  r._h = h;</span><br><span class="line">                  <span class="keyword">return</span> r;</span><br><span class="line">              },</span><br><span class="line"></span><br><span class="line">              copy: <span class="function"><span class="keyword">function</span> <span class="params">(o)</span> </span>{</span><br><span class="line">                  <span class="keyword">if</span> (pool.length &lt;= pointer)</span><br><span class="line">                      pool.push({});</span><br><span class="line">                  <span class="keyword">var</span> r = pool[pointer++];</span><br><span class="line">                  r._x = o._x;</span><br><span class="line">                  r._y = o._y;</span><br><span class="line">                  r._w = o._w;</span><br><span class="line">                  r._h = o._h;</span><br><span class="line">                  <span class="keyword">return</span> r;</span><br><span class="line">              },</span><br><span class="line"></span><br><span class="line">              recycle: <span class="function"><span class="keyword">function</span> <span class="params">(o)</span> </span>{</span><br><span class="line">                  pointer--;</span><br><span class="line">              }</span><br><span class="line">          };</span><br><span class="line">      })(),</span><br><span class="line"></span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">},{<span class="string">&quot;../core/core.js&quot;</span>:<span class="number">7</span>}],<span class="number">43</span>:[<span class="function"><span class="keyword">function</span><span class="params">(require,module,exports)</span></span>{</span><br><span class="line"><span class="keyword">var</span> Crafty = <span class="keyword">require</span>(<span class="string">&apos;../core/core.js&apos;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Spatial HashMap for broad phase collision</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@author</span> Louis Stowasser</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span><br><span class="line">     * #Crafty.HashMap.constructor</span><br><span class="line">     * <span class="doctag">@comp</span> Crafty.HashMap</span><br><span class="line">     * <span class="doctag">@sign</span> public void Crafty.HashMap([cellsize])</span><br><span class="line">     * <span class="doctag">@param</span> cellsize - the cell size. If omitted, `cellsize` is 64.</span><br><span class="line">     *</span><br><span class="line">     * Set `cellsize`.</span><br><span class="line">     * And create `this.map`.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">var</span> cellsize,</span><br><span class="line"></span><br><span class="line">        HashMap = <span class="function"><span class="keyword">function</span> <span class="params">(cell)</span> </span>{</span><br><span class="line">            cellsize = cell || <span class="number">64</span>;</span><br><span class="line">            this.map = {};</span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line">        SPACE = <span class="string">&quot; &quot;</span>,</span><br><span class="line">        keyHolder = {};</span><br><span class="line"></span><br><span class="line">    HashMap.prototype = {</span><br><span class="line">        <span class="comment">/**@</span><br><span class="line">         * #Crafty.map.insert</span><br><span class="line">         * <span class="doctag">@comp</span> Crafty.map</span><br><span class="line">         * <span class="doctag">@sign</span> public Object Crafty.map.insert(Object obj)</span><br><span class="line">         * <span class="doctag">@param</span> obj - An entity to be inserted.</span><br><span class="line">         * <span class="doctag">@returns</span> An object representing this object&apos;s entry in the HashMap</span><br><span class="line">         * </span><br><span class="line">         * `obj` is inserted in &apos;.map&apos; of the corresponding broad phase cells. An object of the following fields is returned.</span><br><span class="line">         *</span></span><br></pre></td></tr></table></figure>

         * {
         *   keys: the object that keep track of cells
         *   obj: The inserted object
         *   map: the HashMap object
         * }
         * <figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"> */</span><br><span class="line">insert: function (obj) {</span><br><span class="line">    var keys = HashMap.key(obj),</span><br><span class="line">        entry = new Entry(keys, obj, this),</span><br><span class="line">        i = <span class="number">0</span>,</span><br><span class="line">        j,</span><br><span class="line">        hash;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//insert into all x buckets</span></span><br><span class="line">    <span class="keyword">for</span> (i = keys.x1; i &lt;= keys.x2; i++) {</span><br><span class="line">        <span class="comment">//insert into all y buckets</span></span><br><span class="line">        <span class="keyword">for</span> (j = keys.y1; j &lt;= keys.y2; j++) {</span><br><span class="line">            hash = (i &lt;&lt; <span class="number">16</span>) ^ j;</span><br><span class="line">            <span class="keyword">if</span> (!this.map[hash]) this.map[hash] = [];</span><br><span class="line">            this.map[hash].push(obj);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    return entry;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Crafty.map.search</span><br><span class="line"> * @comp Crafty.map</span><br><span class="line"> * @sign public Object Crafty.map.search(Object rect[, Boolean filter])</span><br><span class="line"> * @param rect - the rectangular region to search for entities.</span><br><span class="line"> * @param filter - If false, only performs a broad-phase collision check.  The default value is true.</span><br><span class="line"> *</span><br><span class="line"> * - If `filter` is `false`, just search for all the entries in the give `rect` region by broad phase collision. Entity may be returned duplicated.</span><br><span class="line"> * - If `filter` is `true`, filter the above results by checking that they actually overlap `rect`.</span><br><span class="line"> *</span><br><span class="line"> * The easier usage is with `filter == true`. For performance reason, you may use `filter == false`, and filter the result yourself. See examples in drawing.js and collision.js</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line">search: function (rect, filter) {</span><br><span class="line">    var keys = HashMap.key(rect, keyHolder),</span><br><span class="line">        i, j, k, l, cell,</span><br><span class="line">        results = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (filter === undefined) filter = <span class="literal">true</span>; <span class="comment">//default filter to true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//search in all x buckets</span></span><br><span class="line">    <span class="keyword">for</span> (i = keys.x1; i &lt;= keys.x2; i++) {</span><br><span class="line">        <span class="comment">//insert into all y buckets</span></span><br><span class="line">        <span class="keyword">for</span> (j = keys.y1; j &lt;= keys.y2; j++) {</span><br><span class="line">            cell = this.map[(i &lt;&lt; <span class="number">16</span>) ^ j];</span><br><span class="line">            <span class="keyword">if</span> (cell) {</span><br><span class="line">                <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; cell.length; k++)</span><br><span class="line">                    results.push(cell[k]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (filter) {</span><br><span class="line">        var obj, id, finalresult = [],</span><br><span class="line">            found = {};</span><br><span class="line">        <span class="comment">//add unique elements to lookup table with the entity ID as unique key</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>, l = results.length; i &lt; l; i++) {</span><br><span class="line">            obj = results[i];</span><br><span class="line">            <span class="keyword">if</span> (!obj) continue; <span class="comment">//skip if deleted</span></span><br><span class="line">            id = obj[<span class="number">0</span>]; <span class="comment">//unique ID</span></span><br><span class="line">            obj = obj._mbr || obj;</span><br><span class="line">            <span class="comment">//check if not added to hash and that actually intersects</span></span><br><span class="line">            <span class="keyword">if</span> (!found[id] &amp;&amp; obj.<span class="built_in">_x</span> &lt; rect.<span class="built_in">_x</span> + rect._w &amp;&amp; obj.<span class="built_in">_x</span> + obj._w &gt; rect.<span class="built_in">_x</span> &amp;&amp;</span><br><span class="line">                              obj._y &lt; rect._y + rect._h &amp;&amp; obj._y + obj._h &gt; rect._y)</span><br><span class="line">                found[id] = results[i];</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//loop over lookup table and copy to final array</span></span><br><span class="line">        <span class="keyword">for</span> (obj <span class="built_in">in</span> found) finalresult.push(found[obj]);</span><br><span class="line"></span><br><span class="line">        return finalresult;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        return results;</span><br><span class="line">    }</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Crafty.map.remove</span><br><span class="line"> * @comp Crafty.map</span><br><span class="line"> * @sign public void Crafty.map.remove([Object keys, ]Object obj)</span><br><span class="line"> * @param keys - key region. If omitted, it will be derived from obj by `Crafty.HashMap.key`.</span><br><span class="line"> * @param obj - An object to remove from the hashmap</span><br><span class="line"> *</span><br><span class="line"> * Remove an entity in a broad phase map.</span><br><span class="line"> * - The second form is only used in Crafty.HashMap to save time for computing keys again, where keys were computed previously from obj. End users should not call this form directly.</span><br><span class="line"> *</span><br><span class="line"> * @example</span><br><span class="line"> *</span></span><br></pre></td></tr></table></figure>

         * Crafty.map.remove(e);
         * <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span><br><span class="line">remove: function (keys, obj) {</span><br><span class="line">    <span class="keyword">var</span> i = 0,</span><br><span class="line">        j, hash;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (arguments.length == 1) {</span><br><span class="line">        obj = keys;</span><br><span class="line">        keys = HashMap.key(obj, keyHolder);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//search in all x buckets</span></span><br><span class="line">    <span class="keyword">for</span> (i = keys.x1; i &lt;= keys.x2; i++) {</span><br><span class="line">        <span class="comment">//insert into all y buckets</span></span><br><span class="line">        <span class="keyword">for</span> (j = keys.y1; j &lt;= keys.y2; j++) {</span><br><span class="line">            hash = (i &lt;&lt; 16) ^ j;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (this.map[hash]) {</span><br><span class="line">                <span class="keyword">var</span> cell = this.map[hash],</span><br><span class="line">                    <span class="keyword">m</span>, <span class="keyword">n</span> = cell.length;</span><br><span class="line">                <span class="comment">//loop over objs in cell and delete</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">m</span> = 0; <span class="keyword">m</span> &lt; <span class="keyword">n</span>; <span class="keyword">m</span>++)</span><br><span class="line">                    <span class="keyword">if</span> (cell[<span class="keyword">m</span>] &amp;&amp; cell[<span class="keyword">m</span>][0] === obj[0])</span><br><span class="line">                        cell.splice(<span class="keyword">m</span>, 1);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Crafty.map.refresh</span><br><span class="line"> * @comp Crafty.map</span><br><span class="line"> * @sign public void Crafty.map.remove(Entry entry)</span><br><span class="line"> * @param entry - An entry to update</span><br><span class="line"> *</span><br><span class="line"> * Update an entry&apos;s keys, and its position in the broad phrase map.</span><br><span class="line"> *</span><br><span class="line"> * @example</span><br><span class="line"> *</span></span><br></pre></td></tr></table></figure>

         * Crafty.map.refresh(e);
         * <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span><br><span class="line">refresh: function (entry) {</span><br><span class="line">    <span class="keyword">var</span> keys = entry.keys;</span><br><span class="line">    <span class="keyword">var</span> obj = entry.obj;</span><br><span class="line">    <span class="keyword">var</span> cell, i, j, <span class="keyword">m</span>, <span class="keyword">n</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//First delete current object from appropriate cells</span></span><br><span class="line">    <span class="keyword">for</span> (i = keys.x1; i &lt;= keys.x2; i++) {</span><br><span class="line">        <span class="keyword">for</span> (j = keys.y1; j &lt;= keys.y2; j++) {</span><br><span class="line">            cell = this.map[(i &lt;&lt; 16) ^ j];</span><br><span class="line">            <span class="keyword">if</span> (cell) {</span><br><span class="line">                <span class="keyword">n</span> = cell.length;</span><br><span class="line">                <span class="comment">//loop over objs in cell and delete</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">m</span> = 0; <span class="keyword">m</span> &lt; <span class="keyword">n</span>; <span class="keyword">m</span>++)</span><br><span class="line">                    <span class="keyword">if</span> (cell[<span class="keyword">m</span>] &amp;&amp; cell[<span class="keyword">m</span>][0] === obj[0])</span><br><span class="line">                        cell.splice(<span class="keyword">m</span>, 1);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//update keys</span></span><br><span class="line">    HashMap.key(obj, keys);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//insert into all rows and columns</span></span><br><span class="line">    <span class="keyword">for</span> (i = keys.x1; i &lt;= keys.x2; i++) {</span><br><span class="line">        <span class="keyword">for</span> (j = keys.y1; j &lt;= keys.y2; j++) {</span><br><span class="line">            cell = this.map[(i &lt;&lt; 16) ^ j];</span><br><span class="line">            <span class="keyword">if</span> (!cell) cell = this.map[(i &lt;&lt; 16) ^ j] = [];</span><br><span class="line">            cell.push(obj);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> entry;</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span><br><span class="line"> * #Crafty.map.boundaries</span><br><span class="line"> * @comp Crafty.map</span><br><span class="line"> * @sign public Object Crafty.map.boundaries()</span><br><span class="line"> * @returns An object with the following structure, which represents an MBR which contains all entities</span><br><span class="line"> *</span><br><span class="line"> *</span></span><br></pre></td></tr></table></figure>

         * {
         *   min: {
         *     x: val_x,
         *     y: val_y
         *   },
         *   max: {
         *     x: val_x,
         *     y: val_y
         *   }
         * }
         * ~~~
         */
        boundaries: function () {
            var k, ent,
                hash = {
                    max: {
                        x: -Infinity,
                        y: -Infinity
                    },
                    min: {
                        x: Infinity,
                        y: Infinity
                    }
                },
                coords = {
                    max: {
                        x: -Infinity,
                        y: -Infinity
                    },
                    min: {
                        x: Infinity,
                        y: Infinity
                    }
                };

            //Using broad phase hash to speed up the computation of boundaries.
            for (var h in this.map) {
                if (!this.map[h].length) continue;

                //broad phase coordinate
                var i = h &gt;&gt; 16,
                    j = (h &lt;&lt; 16) &gt;&gt; 16;
                if (j &lt; 0) {
                    i = i ^ -1;
                }
                if (i &gt;= hash.max.x) {
                    hash.max.x = i;
                    for (k in this.map[h]) {
                        ent = this.map[h][k];
                        //make sure that this is a Crafty entity
                        if (typeof ent == &apos;object&apos; &amp;&amp; &apos;requires&apos; in ent) {
                            coords.max.x = Math.max(coords.max.x, ent.x + ent.w);
                        }
                    }
                }
                if (i <= hash.min.x)="" {="" hash.min.x="i;" for="" (k="" in="" this.map[h])="" ent="this.map[h][k];" if="" (typeof="" 'object'="" &&="" 'requires'="" ent)="" coords.min.x="Math.min(coords.min.x," ent.x);="" }="" (j="">= hash.max.y) {
                    hash.max.y = j;
                    for (k in this.map[h]) {
                        ent = this.map[h][k];
                        if (typeof ent == &apos;object&apos; &amp;&amp; &apos;requires&apos; in ent) {
                            coords.max.y = Math.max(coords.max.y, ent.y + ent.h);
                        }
                    }
                }
                if (j </=></=></=></r.length;o++)s(r[o]);return>